{
	"simple":
	[
	{
		"name": "dbFind",
		"code": "{ \n data {}\n conditions {}\n action { \n var res array\n var val map\n res = DBFind(\"pages\").Columns(\"name\").Where({id: \"1\"}).Order(\"id\")\n val = res[0]\n $result = val[\"name\"]\n }\n }",
		"result": "admin_index"
	},
	{
		"name": "toUpper",
		"code": "{ \n data {}\n conditions {}\n action { \n $result = ToUpper(\"Hello My Friends!\")\n }}",
		"result": "HELLO MY FRIENDS!"
	},
	{
		"name": "elseif",
		"code": "{ \n data {}\n conditions {}\n action { \n var val int \n val = 8 \n if val > 10 {$result = \"val>10\"}\n elif val>8 {$result = \"val>8\"} \n elif val>5{ \n $result = \"val>5\"}\n else{$result=\"val<5\"}\n }}",
		"result": "val>5"
	},
	{
		"name": "blockTime",
		"code": "{ \n data {}\n conditions {}\n action { \n $result = BlockTime()\n }}",
		"result": ""
	},
	{
		"name": "ecosysParam",
		"code": "{ \n data {}\n conditions {}\n action { \n var res string\n res = EcosysParam(\"changing_menu\")\n $result=res\n }\n }",
		"result":"MainCondition"
	},
	{
	    "name": "ifMap",
		"code":"{\n data {}\n conditions {}\n action {\n var my map\n my[\"test\"] = 1\n if my {\n $result=\"true\"\n }\n else {\n $result=\"false\"\n }\n }\n }",
		"result":"true"
	},
	{
	    "name": "dbRow",
		"code":"{\n data {}\n conditions {}\n action {\n var vals map\n vals = DBRow(\"pages\").Columns(\"name, menu\").Where({id: \"1\"})\n $result = vals[\"name\"]\n }\n }",
		"result": "admin_index"
	},
	{
	 	"name": "evalCondition",
		"code": "{\n data {}\n conditions {\n }\n action {\n EvalCondition(\"pages\", \"default_page\", `conditions`)\n }\n }",
		"result": ""
	},
	{
	    "name": "validateCondition",
		"code": "{\n data {}\n conditions {}\n action {\n ValidateCondition(\"ContractConditions(`MainCondition`)\", 0)\n }\n }",
		"result": ""
	},
	{
	    "name": "addressToId",
		"code": "{\n data {}\n conditions {}\n action {\n $result = AddressToId(\"0005-2070-2000-0006-0200\")\n }\n }",
		"result": "52070200000060200"
	},
	{
		"name": "idToAddress",
		"code": "{\n data {}\n conditions {}\n action {\n $result = IdToAddress(52070200000060200)\n }\n }",
		"result": "0005-2070-2000-0006-0200"
	},
	{
		"name": "one",
		"code": "{\n data {}\n conditions {}\n action {\n $result = DBFind(\"pages\").Columns(\"id,name\").WhereId(1).One(\"name\")\n } \n }",
		"result": "admin_index"
	},
	{
		"name": "row",
		"code": "{\n data {}\n conditions {}\n action {\n var ret map\n ret = DBFind(\"pages\").Columns(\"id,name\").WhereId(1).Row()\n $result = ret[\"name\"]\n } \n }",
		"result": "admin_index"
	},
	{
	    "name": "contains",
		"code": "{\n data {}\n conditions {}\n action {\n if Contains(\"Hello world\", `Hello`) {\n $result = \"Hello world\"\n }\n }\n }",
		"result": "Hello world"
	},
	{
	    "name": "float",
		"code": "{\n data {}\n conditions {}\n action {\n var val int\n val = Float(\"567\") + Float(232)\n $result = Str(val)\n }\n }",
		"result": "799.000000"
	},
	{
	    "name": "hasPrefix",
		"code": "{\n data {}\n conditions {}\n action {\n if HasPrefix(\"myString\", `my`) {\n $result = \"Prefix\"\n }\n }\n }",
		"result": "Prefix"
	},
	{
	    "name": "hexToBytes",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Str(HexToBytes(\"34fe4501a4d80094\"))\n }\n }",
		"result": "[52 254 69 1 164 216 0 148]"
	},
	{
	    "name": "int",
		"code": "{\n data {}\n conditions {}\n action {\n var val int\n val = Int(\"105\") + Int(\"45\")\n $result = Str(val)\n }\n }",
		"result": "150"
	},
	{
		"name": "join",
		"code": "{\n data {}\n conditions {}\n action {\n var val string\n var myarr array\n myarr[0] = \"first\"\n myarr[1] = \"second\"\n $result = Join(myarr, \",\")\n }\n }",
		"result": "first,second"
	},
	{
	    "name": "split",
		"code": "{\n data {}\n conditions {}\n action {\n var myarr array\n myarr = Split(\"first,second,third\", \",\")\n $result = myarr[1]\n }\n }",
		"result": "second"
	},
	{
	    "name": "len",
		"code": "{\n data {}\n conditions {}\n action {\n var arr array\n arr[0] = \"1\"\n arr[1] = \"2\"\n arr[2] = \"3\"\n $result = Len(arr)\n }\n }",
		"result": "3"
	},
	{
	    "name": "pubToID",
		"code": "{\n data {}\n conditions {}\n action {\n $result = PubToID(\"05f1521f6a7e769ebbde2ab3df01f4740d1408e7e7150745cac9fb953d8ad366\")\n }\n }",
		"result": "-6799051354910978041"
	},
	{	
	    "name": "replace",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Replace(\"this is my decision, this is my gole, this is my life\", `this is my`, `your`)\n }\n }",
		"result": "your decision, your gole, your life"
	},
	{	
	    "name": "size",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Size(\"hello\") }\n }",
		"result": "5"
	},
	{
	    "name": "sha256",
		"code": "{\n data {}\n conditions {\n }\n action {\n $result = Sha256(\"Test\")\n }\n }",
		"result": "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25"
	},
	{
	    "name": "sprintf",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Sprintf(\"%s is %d\", \"Five\", 5)\n }\n }",
		"result": "Five is 5"
	},
	{
	    "name": "str",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Str(5.678)\n }\n }",
		"result": "5.678"
	},
	{
	    "name": "substr",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Substr(\"ecosystema\", 2, 5)\n }\n }",
		"result": "osyst"
	},
	{
	    "name": "sysParamString",
		"code": "{\n data {}\n conditions {}\n action {\n $result = SysParamString(\"blockchain_url\")\n }\n }",
		"result": ""
	},
	{
	    "name": "sysParamInt",
		"code": "{\n data {}\n conditions {}\n action {\n $result = Str(SysParamInt(\"max_columns\"))\n }\n }",
		"result": "50"
	},
	{
		"name": "getContractByName",
		"code": "{\n data { }\n conditions {}\n action {$result = Str(GetContractByName(\"MainCondition\"))}\n }",
		"result": "3"
	},
	{
		"name": "random",
		"code": "{\n data {}\n conditions {}\n action {$result = Str(Random(5,6))}\n }",
		"result": "5"
	},
	{
		"name": "getBlock",
		"code": "{\n data {}\n conditions {}\n action { var m map \n m = GetBlock(1) \n $result = m[\"id\"]}\n }",
		"result": "1"
  	},
  	{
  		"name": "type_bool",
		"code": "{\n data {}\n conditions {}\n action {var i, j, k bool \n i = true \n j = false \n k = !j \n $result = (i && j) || k }\n }",
		"result": "true"
	},
	{
		"name": "type_bytes",
		"code": "{\n data {}\n conditions {}\n action {var b bytes \n b = 255 \n $result = b}\n }",
		"result": "255"
	},
	{
		"name": "type_int",
		"code": "{\n data {}\n conditions {}\n action {var i, j int \n i = 43 \n j = -100 \n $result = i + j}\n }",
		"result": "-57"
	},
	{
		"name": "type_address",
		"code": "{\n data {}\n conditions {}\n action {var a address \n a = 1 + 1000000 \n $result = a}\n }",
		"result": "1000001"
	},
	{
		"name": "type_array",
		"code": "{\n data {}\n conditions {}\n action {var a,b,c array \n a[0] = 2500 \n a[1] = \"hello\" \n a[2] = 2.12 \n b = a \n $result = Str(b) + a[1]}\n }",
		"result": "[2500 hello 2.12]hello"
	},
	{
		"name": "type_map",
		"code": "{\n data {}\n conditions {}\n action {var m, m1 map \n m[\"id\"] = 1 \n m[\"name\"] = \"hello\" \n m[\"price\"] = 14.95 \n m1 = m \n $result = Str(m1[\"id\"]) + m1[\"name\"] + Str(m[\"price\"])}\n }",
		"result": "1hello14.95"
	},
	{
		"name": "type_money",
		"code": "{\n data {}\n conditions {}\n action {var m money \n m = 12000000 \n $result = m}\n }",
		"result": "12000000"
	},
	{
		"name": "type_float",
		"code": "{\n data {}\n conditions {}\n action {var f float \n f = 99.9 - 100 \n $result = f}\n }",
		"result": "-0.09999999999999432"
	},
	{
		"name": "type_string",
		"code": "{\n data {}\n conditions {}\n action {var s, s1 string \n s = \"hello\" \n s1 = \"world\" \n $result = s+s1}\n }",
		"result": "helloworld"
	},
	{
		"name": "getColumnType",
		"code": "{\n data {}\n conditions {}\n action {\n $result = GetColumnType(\"contracts\", \"id\") }\n }",
		"result": "number"
  	},
  	{
  		"name": "decodeBase64",
		"code": "{\n data {}\n conditions {}\n action {\n var s string \n s = \"SGVsbG8h\" \n $result = DecodeBase64(s) }\n }",
		"result": "Hello!"
	},
	{
		"name": "encodeBase64",
		"code": "{\n data {}\n conditions {}\n action {\n $my_str = \"Hello!\" \n $result = EncodeBase64($my_str) }\n }",
		"result": "SGVsbG8h"
	},
  	{
  		"name": "jsonEncode",
		"code": "{\n data {}\n conditions {}\n  action {\n var a array, m map\n m[\"k1\"] = 1\n m[\"k2\"] = 2\n a[0] = m \n a[1] = m \n $result = JSONEncode(a)\n}\n }",
		"result": "[{\"k1\":1,\"k2\":2},{\"k1\":1,\"k2\":2}]"
	},
	{
		"name": "jsonDecode",
		"code": "{\n data {}\n conditions {}\n  action {\n var a string \n a = \"[{'k1':'1','k2':'2'},{'k1':'1','k2':'2'}]\" \n $result = JSONDecode(a)\n}\n }",
		"result": ""
	},
	{
		"name": "bytesToString",
		"code": "{\n data {}\n conditions {} \n action { \n var s string \n s = BytesToString(StringToBytes(\"Success test StringToBytes and BytesToString functions!\")) \n $result = s \n}\n }",
		"result": "Success test StringToBytes and BytesToString functions!"
	},
	{
		"name": "stringToBytes",
		"code": "{\n data {}\n conditions {} \n action { \n var b bytes \n b = StringToBytes(\"Hello!\") \n $result = b \n}\n }",
		"result": "[72 101 108 108 111 33]"
	},
	{
		"name": "append",
		"code": "{\n data {}\n conditions {} \n action { \n var a array \n a[0] = \"hello\" \n a = Append(a, 10) \n $result = a \n}\n }",
		"result": "[hello 10]"
  	},
  	{
  		"name": "getMapKeys",
		"code": "{\n data {} \n conditions {} \n action { \n var val map \n var arr array \n val[\"key\"] = \"hello\"  \n arr = GetMapKeys(val) \n $result = arr \n}\n }",
		"result": "[key]"
	},
	{
		"name": "sortedKeys",
		"code": "{\n data {} \n conditions {} \n action { \n var val map \n var arr array \n val[\"k9\"] = \"3\" \n val[\"k5\"] = \"7\" \n val[\"k1\"] = \"1\" \n arr = SortedKeys(val) \n $result = arr \n}\n }",
		"result": "[k1 k5 k9]"
  	}
],
  "langRes":{
		"code": "{\n data {}\n conditions {}\n action {\n $result=LangRes(\"test\", \"de\")\n }\n }",
		"asert":"test_de",
		"information":"needs to create language resourse with name - test and localisacions:en- test_en, de- test_de"
	},		
    "dbInsert": {
		"code": "{\n data {}\n conditions {}\n action {\n $result=DBInsert(\"test\", {name: \"block2\", test: \"val1\"})\n }\n }",
		"asert":"",
		"information":"needs to create table \"test\" with \"name\" and \"test\" string columns"
	},
	    "dbUpdate": {
		"code": "{\n data {}\n conditions {}\n action {\n $result=DBUpdate(\"test\", 1, {test: \"updated\"})\n }\n }",
		"asert": ""
	},
	"dbSelectMetricsMin": {
		"code": "{\n data {}\n conditions {} \n action { \n var a array \n var m map \n var i, ecosysNum int \n ecosysNum = 1 \n a = DBSelectMetrics(\"ecosystem_tx\", \"1 month\", \"min\") \n i = 0 \n  while i < Len(a){ \n m = a[i] \n if m[\"key\"] == ecosysNum {break} \n i = i + 1 \n} \n $result = m[\"value\"] \n}\n }",
		"asert": ""
	},
	 "dbUpdateExt": {
		"code": "{\n data {}\n conditions {}\n action {\n DBUpdateExt(\"test\", \"name\", \"block2\", {test: \"updatedByName\"})\n }\n }",
		"asert": ""
	},
	    "callContract": {
		"code": "{\n data {}\n conditions {}\n action {\n var par map\n $result = CallContract(\"MyContract\", par)\n }\n }",
		"asert": "Hello",
		"information": "needs to create Contact MyContract"
	},
		"myContract": {
		"code": "{\n data {}\n conditions {}\n action {\n $result=\"Hello\"\n }\n }",
		"asert": ""
	},
		"dbSelectMetricsMax": {
		"code": "{\n data {}\n conditions {} \n action { \n var a array \n var m map \n var i, ecosysNum int \n ecosysNum = 1 \n a = DBSelectMetrics(\"ecosystem_members\", \"1 days\", \"max\") \n i = 0 \n  while i < Len(a){ \n m = a[i] \n if m[\"key\"] == ecosysNum {break} \n i = i + 1 \n} \n $result = m[\"value\"] \n}\n }",
		"asert": ""
	},
		"dbSelectMetricsAvg": {
		"code": "{\n data {}\n conditions {} \n action { \n var a array \n var m map \n var i, ecosysNum int \n ecosysNum = 1 \n a = DBSelectMetrics(\"ecosystem_pages\", \"1 day\", \"avg\") \n i = 0 \n  while i < Len(a){ \n m = a[i] \n if m[\"key\"] == ecosysNum {break} \n i = i + 1 \n} \n $result = m[\"value\"] \n}\n }",
		"asert": ""
	},
		"getContractById": {
		"code": "{\n data { ID int }\n conditions {}\n action {$result = GetContractById($ID)}\n }",
		"asert": "MainCondition"
	},
	   	"getHistory": {
		"code": "{\n data {\n Table string \n ID int \n }\n conditions {} \n action { \n var list array \n var item map \n list = GetHistory($Table, $ID) \n if Len(list)>0 { \n item = list[0] } \n $result = item[\"value\"] \n}\n }",
		"asert": ""
	},
		"getHistoryRow": {
		"code": "{\n data {\n Table string \n ID, rID int\n }\n conditions {} \n action { \n var m map \n m = GetHistoryRow($Table, $ID, $rID) \n $result = m[\"value\"] \n}\n }",
		"asert": ""
	} 
  }

