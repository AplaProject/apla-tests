{
    "findEcosystem": {
		"code": "{\n data {}\n conditions {}\n action {\n $result=FindEcosystem(`MyEcosystem`)\n }\n }",
		"asert": "2",
		"information": "needs to create ecosystem with name MyEcosystem"
	},
    "contractAccess":{
		"code": "{\n data {}\n conditions {}\n action {\n ContractAccess(\"AccesContr\")\n }\n }",
		"assert": "",
		"information": "needs to create contract AccesContr"
	},
	    "updateLang": {
		"code": "{\n data {}\n conditions {}\n action {\n UpdateLang(1, \"test\", \"{'ru': 'Тест'}\")\n }\n }",
			"asert": ""
	},
	    "updateSysParam": {
		"code": "{\n data {}\n conditions {}\n action {\n DBUpdateSysParam(\"number_of_nodes\", \"102\", \"true\")\n }\n }",
		"asert": ""
	},
		"for_cost": {
		"code": "{\n data {\n State int\n }\n conditions {}\n action {\n var res array\n res = DBFind(\"pages\").Columns(\"name\").Where({id: \"1\"})\n if $State < 1 {\n var par map\n CallContract(\"incorrectContract\", par)\n $result = GetContractById(999999999999)\n }\n else {\n $result = \"OK\"} }\n }",
		"asert": "_"
	},
		"get_keyId": {
		"code": "{\n data {\n Pub string\n }\n conditions {}\n action {\n $result = PubToID($Pub) }\n }",
		"asert": "_"
	},
		"limits": {
		"code": "{\n data {\n Count int\n }\n conditions {} \n action { \n var i int \n var res array \n while i < $Count { \n var res array\n res = DBFind(\"contracts\").Columns(\"name\")\n i = i + 1\n } \n}\n }",
		"asert": ""
	}	
}