{
    "name": "System",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "import_upload",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#}).Count(roles_count)\r\n    SetTitle($@1import$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1payload_select$)\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(list-group-item){\r\n            Input(Name: Data, Type: file)\r\n        }\r\n        Div(list-group-item text-right){\r\n            Button(Body: $@1load$, Class: btn btn-primary, Contract: @1ImportUpload, Page: @1import_app)\r\n        }\r\n    }\r\n}",
            "Menu": "developer_resources",
            "Type": "pages"
        },
        {
            "Name": "DeveloperCondition",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "// This contract is used to set \"developer\" rights.\r\n// Usually the \"developer\" role is used for this.\r\n// The role ID is written to the ecosystem parameter and can be changed.\r\n// The contract requests the role ID from the ecosystem parameter and the contract checks the rights.\r\n\r\ncontract DeveloperCondition {\r\n    conditions {\r\n        // check for Manager role\r\n        var company_app_id int check_access string\r\n        company_app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Companies Registry\"}).One(\"id\"))\r\n        check_access = AppParam(company_app_id, \"role_manager\", $ecosystem_id)\r\n        if DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": check_access, \"member->account\": $account_id, \"deleted\": 0}).Row(){\r\n            return\r\n        }\r\n      \r\n        // check for Founder\r\n        if EcosysParam(\"founder_account\") == $key_id {\r\n            return\r\n        }\r\n\r\n        // check for Developer role\r\n        var app_id int role_id_develop role_id_admin string\r\n        app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\"))\r\n        role_id_develop = AppParam(app_id, \"role_developer\", $ecosystem_id)\r\n        role_id_admin = AppParam(app_id, \"role_admin\", $ecosystem_id)\r\n\r\n        if Size(role_id_develop) == 0 && Size(role_id_admin) == 0 {\r\n            warning \"DeveloperCondition: Sorry, you do not have access to this action\"\r\n        }\r\n\r\n        if !RoleAccess(Int(role_id_develop)) && !RoleAccess(Int(role_id_admin)) {\r\n            warning \"DeveloperCondition: Sorry, you do not have access to this action\"\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "EditAppParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract EditAppParam {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        var company_app_id int check_access check_access_vendor string\r\n        company_app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Companies Registry\"}).One(\"id\"))\r\n        check_access = AppParam(company_app_id, \"role_law_firm_junior\", $ecosystem_id)\r\n        check_access_vendor = AppParam(company_app_id, \"role_vendor\", $ecosystem_id)\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": check_access, \"member->account\": $account_id, \"deleted\": 0}).Row(){\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": check_access_vendor, \"member->account\": $account_id, \"deleted\": 0}).Row(){\r\n                DeveloperCondition()\r\n            }\r\n        }\r\n\r\n        if !DBFind(\"@1app_params\").Columns(\"id,ecosystem\").Where({\"id\": $Id, \"ecosystem\": $ecosystem_id}) {\r\n            warning LangRes(\"@1item_not_found\", \"en\")\r\n        }\r\n\r\n        //RowConditions(\"@1app_params\", $Id, onlyConditions())\r\n\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1app_params\", $Id, pars)\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "EditContract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract EditContract {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n\r\n        EditObjectId int \"optional\"\r\n        Action string \"optional\"\r\n    }\r\n\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        DeveloperCondition()\r\n\r\n        RowConditions(\"@1contracts\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $cur = DBFind(\"@1contracts\").Columns(\"id,name,value,conditions,wallet_id,token_id\").Where({\"id\": $Id, \"ecosystem\": $ecosystem_id}).Row()\r\n        if !$cur {\r\n            warning Sprintf(LangRes(\"@1template_contract_not_exist\", \"en\"), $Id)\r\n        }\r\n        if $Value {\r\n            ValidateEditContractNewValue($Value, $cur[\"value\"])\r\n        }\r\n\r\n        $recipient = Int($cur[\"wallet_id\"])\r\n    }\r\n\r\n    action {\r\n        if $EditObjectId > 0 {\r\n            if GetContractByName(\"SettingEntityEditSign\") > 0 {\r\n                var par map\r\n                par[\"Id\"] = $EditObjectId\r\n                par[\"Action\"] = $Action\r\n\r\n                //check entity contract list\r\n                $company_app_id = DBFind(\"applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Companies Registry\"}).One(\"id\")\r\n                $check_access_contracts = AppParam(Int($company_app_id), \"vendor_entity_contracts\", $ecosystem_id)\r\n                $search_name = Str($cur[\"name\"])\r\n                if !DBFind(\"app_params\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"vendor_entity_contracts\", \"value\":{\"$like\": $search_name}}).Row() {\r\n                    CallContract(\"SettingEntityEditSign\", par)\r\n                } else {\r\n                    CallContract(\"SettingEntityEditSign\", par)\r\n\r\n                    //send hash and value in CN\r\n                    var params contr_params map\r\n                    params[\"Hash\"] = PubToHex($txhash)\r\n                    params[\"ContractValue\"] = $Value\r\n                    params[\"ContractName\"] = Str($cur[\"name\"])\r\n                    contr_params[\"ExtName\"] = \"send_contracts_text\"\r\n                    contr_params[\"ExtData\"] = params\r\n                    CallContract(\"StartTransaction\",contr_params)\r\n                }\r\n            }\r\n            if $Action == \"Accept\" {\r\n                UpdateContract($Id, $Value, $Conditions, $recipient, $cur[\"token_id\"])\r\n            }\r\n        } else {\r\n            UpdateContract($Id, $Value, $Conditions, $recipient, $cur[\"token_id\"])\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "NewContract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NewContract {\r\n    data {\r\n        ApplicationId int\r\n        Value string\r\n        Conditions string\r\n        TokenEcosystem int \"optional\"\r\n\r\n        EditObjectId int \"optional\"\r\n        Action string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        DeveloperCondition()\r\n\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", \"en\")\r\n        }\r\n\r\n        $contract_name = ContractName($Value)\r\n\r\n        if !$contract_name {\r\n            warning LangRes(\"@1contract_name_missing\", \"en\")\r\n        }\r\n\r\n        if !$TokenEcosystem {\r\n            $TokenEcosystem = 1\r\n        } else {\r\n            if !SysFuel($TokenEcosystem) {\r\n                warning Sprintf(LangRes(\"@1template_eco_isnot_system\", \"en\"), $TokenEcosystem)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $EditObjectId > 0 {\r\n            if GetContractByName(\"SettingEntityEditSign\") > 0 {\r\n                var par map\r\n                par[\"Id\"] = $EditObjectId\r\n                par[\"Action\"] = $Action\r\n                CallContract(\"SettingEntityEditSign\", par)\r\n            }\r\n            if $Action == \"Accept\" {\r\n                $result = CreateContract($contract_name, $Value, $Conditions, $TokenEcosystem, $ApplicationId)\r\n            }\r\n        } else {\r\n            $result = CreateContract($contract_name, $Value, $Conditions, $TokenEcosystem, $ApplicationId)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewUser",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NewUser {\r\n    data {\r\n        NewPubkey string \"optional\"\r\n        Account string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $NewPubkey = Replace($NewPubkey, \"\\n\", \"\")\r\n        $NewPubkey = Replace($NewPubkey, \"\\r\", \"\")\r\n        $NewPubkey = Replace($NewPubkey, \" \", \"\")\r\n        $newId = PubToID($NewPubkey)\r\n\r\n        if $newId == 0 {\r\n            warning LangRes(\"@1wrong_pub\", \"en\")\r\n        }\r\n        if DBFind(\"@1keys\").Columns(\"id\").Where({\"id\": $newId, \"ecosystem\": $ecosystem_id}).One(\"id\") != nil {\r\n            warning Sprintf(LangRes(\"@1template_user_exists\", \"en\"), IdToAddress($newId))\r\n        }\r\n\r\n        if Size($NewPubkey) == 0 {\r\n            warning \"You did not enter the public key\"\r\n        }\r\n\r\n        $pub = HexToPub($NewPubkey)\r\n        $amount = Money(1000) * Money(1000000000000000000)\r\n\r\n        if Size($Account) > 0 {\r\n            var company_app_id int check_access string\r\n            company_app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Companies Registry\"}).One(\"id\"))\r\n            check_access = AppParam(company_app_id, \"role_law_firm_junior\", $ecosystem_id)\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": check_access, \"member->account\": $account_id, \"deleted\": 0}).Row(){\r\n                DeveloperCondition()\r\n            }\r\n\r\n            $k_id = DBFind(\"@1keys\").Columns(\"id\").Where({\"account\": $Account, \"ecosystem\": $ecosystem_id, \"deleted\": 0}).One(\"id\")\r\n            if $k_id == nil {\r\n                warning \"Account not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Size($Account) > 0 {\r\n            $account = $Account\r\n            DBInsert(\"keys\", {\"id\": $newId, \"account\": $account, \"pub\": $pub, \"amount\": $amount, \"ecosystem\": 1})\r\n            $result = $account\r\n\r\n            DBUpdate(\"@1keys\", Int($k_id), {\"deleted\": 1})\r\n        } else {\r\n            $account = IdToAddress($newId)\r\n            DBInsert(\"keys\", {\"id\": $newId, \"account\": $account, \"pub\": $pub, \"amount\": $amount, \"ecosystem\": 1})\r\n            $result = $account\r\n\r\n            if GetContractByName(\"ProfileEdit\") > 0 {\r\n                var par map\r\n                par[\"MemberAccount\"] = $account\r\n                CallContract(\"ProfileEdit\", par)\r\n            }\r\n\r\n            var buffer_data map\r\n            $BufferKey = \"new_user_reg\"\r\n            buffer_data[\"add_member\"] = IdToAddress($newId)\r\n            @1BufferManager(\"Action,Key\", \"clean\", $BufferKey)\r\n            @1BufferManager(\"Action,Key,Val\", \"set\", $BufferKey, JSONEncode(buffer_data))\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "UpdateSysParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract UpdateSysParam {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Conditions string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        @1AdminCondition()\r\n        if GetContractByName($Name) == 0 {\r\n            warning LangRes(\"@1system_parameter_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"Value\"] = $Value\r\n        CallContract($Name, params)\r\n        DBUpdateSysParam($Name, $Value, $Conditions)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UploadBinary",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract UploadBinary {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Data bytes\r\n        DataMimeType string \"optional\"\r\n        MemberAccount string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        var company_app_id int check_access string\r\n        company_app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Companies Registry\"}).One(\"id\"))\r\n        check_access = AppParam(company_app_id, \"role_law_firm_junior\", $ecosystem_id)\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": check_access, \"member->account\": $account_id, \"deleted\": 0}).Row(){\r\n            DeveloperCondition()\r\n        }\r\n\r\n        if Size($MemberAccount) > 0 {\r\n            $UserID = $MemberAccount\r\n        } else {\r\n            $UserID = $account_id\r\n        }\r\n\r\n        $Id = Int(DBFind(\"@1binaries\").Columns(\"id\").Where({\"app_id\": $ApplicationId, \"account\": $UserID, \"name\": $Name, \"ecosystem\": $ecosystem_id}).One(\"id\"))\r\n\r\n        if $Id == 0 {\r\n            if $ApplicationId == 0 {\r\n                warning LangRes(\"@1aid_cannot_zero\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var hash string\r\n        hash = Hash($Data)\r\n\r\n        if $DataMimeType == \"\" {\r\n            $DataMimeType = \"application/octet-stream\"\r\n        }\r\n\r\n        if $Id != 0 {\r\n            DBUpdate(\"@1binaries\", $Id, {\"data\": $Data, \"hash\": hash, \"mime_type\": $DataMimeType})\r\n        } else {\r\n            $Id = DBInsert(\"@1binaries\", {\"app_id\": $ApplicationId, \"account\": $UserID, \"name\": $Name, \"data\": $Data, \"hash\": hash, \"mime_type\": $DataMimeType, \"ecosystem\": $ecosystem_id})\r\n        }\r\n\r\n        $result = $Id\r\n    }\r\n}\r\n",
            "Type": "contracts"
        }
    ]
}