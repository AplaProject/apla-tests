{
    "name": "Basic",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "basic_paginator",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(per_page)){}.Else{\r\n    SetVar(per_page,25)\r\n}\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(search,)\r\n}\r\nIf(GetVar(Sort)!=\"\"){\r\n    SetVar(Sort,)\r\n}\r\nIf(And(GetVar(this_page),GetVar(table))){\r\n    If(GetVar(Where)!=\"\"){\r\n        DBFind(#table#).Where(#Where#).Count(table_count)\r\n    }.ElseIf(GetVar(where)!=\"\"){\r\n        DBFind(#table#).Where(#where#).Count(table_count)\r\n    }.Else{\r\n        DBFind(#table#).Count(table_count)\r\n    }\r\n    If(#table_count#>#per_page#){\r\n        If(#Page#>0){\r\n            SetVar(prev_page,Calculate(#Page#-1)\r\n        }.Else{\r\n            SetVar(Page,0).(prev_page,0)\r\n        }\r\n        SetVar(paginator_offset,Calculate(#Page#*#per_page#)).(last_page,Calculate(#table_count#/#per_page#)).(next_page,#last_page#)\r\n        If(#table_count#>Calculate(#paginator_offset#+#per_page#)){\r\n            SetVar(next_page,Calculate(#Page#+1)\r\n        }\r\n        Div(button-group){\r\n            If(#Page#>0){\r\n                Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"Page=0,search=#search#,Sort=#Sort#\")\r\n            }.Else{\r\n                Button(Body:\"1\", Class:btn btn-default disabled)\r\n            }\r\n            If(#Page#>1){\r\n                Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#prev_page#,search=#search#,Sort=#Sort#\")\r\n            }\r\n            If(And(#Page#>0,#Page#<#last_page#)){\r\n                Button(Body:Calculate(#Page#+1), Class:btn btn-default disabled)\r\n            }\r\n            If(#next_page#<#last_page#){\r\n                Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#next_page#,search=#search#,Sort=#Sort#\")\r\n            }\r\n            If(#Page#<#last_page#){\r\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#last_page#,search=#search#,Sort=#Sort#\")\r\n            }.ElseIf(#last_page#>0){\r\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_roles",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nIf(#role_id#>0){\r\n    DBFind(@1roles).Where({id:#role_id#}).Vars(my)\r\n    SetTitle($@1role_notifics$ (#my_role_name#))\r\n}.Else{\r\n    SetTitle($@1role_notifics$)\r\n}\r\nSetVar(role_admin, EcosysParam(Ecosystem:1, Name: role_admin))\r\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\r\n    DBFind(@1ecosystems).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast_send$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_roles_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, {\"ecosystem\":#ecosystem_id#, \"recipient->role_id\":#role_id#, {$and: [{\"notification->type\":2}, {$or: [{\"sender->member_name\":{$like: #search#}},{\"sender->role_name\":{$like: #search#}}]}]}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\":#ecosystem_id#, \"notification->type\":2, \"recipient->role_id\":#role_id#}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order([{closed:\"1\"},{id:\"-1\"}]).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n    If(#closed# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #recipient.role_name#\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){#sender.member_name#}\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n    }\r\n}.Custom(_icon){\r\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# h6 m0){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    Div(#style_text# h6 m0){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n}.Custom(_processing){\r\n    Div(Class: #style_text# h6 m0){\r\n        If(#date_start_processing# == NULL){\r\n           $@1not_started$\r\n        }.Else{\r\n            Span(LangRes(@1started_by) #processing_info.member_name#)\r\n            Div(){DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#){\r\n            If(#date_start_processing# == NULL){\r\n                LangRes(@1active)\r\n            }.Else{\r\n                LangRes(@1processing)\r\n            }\r\n        }\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Button(Class: btn btn-default fa fa-play, Contract: @1NotificationsProcess, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.Else{\r\n                Button(Class: btn btn-default fa fa-trash, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton:$@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=_icon,$@1page$=_page,$@1sender$=_sender,=custom_arrow,$@1recipient$=_recipient,$@1processing$=_processing,$@1sent$ / $@1closed$=_date,$@1status$=_status,=_actions\")\r\n            }.ElseIf(#role_id#>0){\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_notifics$ $@1not_founded$\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_not_selected$\")\r\n            }                     \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_single",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1single_notifics$\")\r\nSetVar(role_admin, EcosysParam(Ecosystem:1, Name: role_admin))\r\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\r\n    DBFind(@1ecosystems).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast_send$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_single_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, {\"ecosystem\":#ecosystem_id#, \"recipient->member_id\":#key_id#, {$and: [{\"notification->type\":1}, {$or: [{\"sender->member_name\":{$like: #search#}},{\"sender->role_name\":{$like: #search#}}]}]}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\":#ecosystem_id#, \"notification->type\":1, \"recipient->member_id\":#key_id#}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order([{closed:\"1\"}, {id:\"-1\"}]).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n    If(#closed# == 0){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n    }.Else{\r\n        SetVar(Name: style_text, Value: \"text-muted\")\r\n        SetVar(Name: style_link, Value: \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(custom_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#recipient.member_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#recipient.member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(custom_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){\r\n            Span(Body: #sender.member_name#)\r\n        }\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n            Span(Body: #sender.role_name#)\r\n        }\r\n    }\r\n}.Custom(custom_icon){\r\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(custom_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(custom_date){\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(custom_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#, Body: LangRes(@1active))\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(actions){\r\n    Div(pull-right){\r\n        If(#closed# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=custom_icon,$@1page$=custom_page,$@1sender$=custom_sender,=custom_arrow,$@1recipient$=custom_recipient,$@1sent$ / $@1closed$=custom_date,$@1status$=custom_status,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1single_notifics$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "profile",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    If(Or(#v_key_id#>0,#v_key_id#<0)){\r\n    }.Else{\r\n        SetVar(v_key_id,#key_id#)\r\n    }\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#v_key_id#}).Columns(\"id,image_id,member_name,member_info->information\").Vars(member)\r\n\r\n    If(Or(#member_id#>0,#member_id#<0)){\r\n        SetVar(member_name, #member_member_name#).(member_info, #member_member_info_information#)\r\n    }.Else{\r\n        SetVar(member_name,).(member_info,)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1user_info)\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            If(Or(#member_id#>0,#member_id#<0)){\r\n                                If(#member_id# == #key_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        If(#member_image_id#>0){\r\n                                            Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-5x text-primary)\r\n                                        }\r\n                                        Div(m0 h4 text-bold){\r\n                                            #member_name#\r\n                                            If(#role_id# > 0){\r\n                                                DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#role_id#}).Columns(\"role_name\").Vars(role)\r\n                                                Span(Body: \" (#role_role_name#)\")\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    If(#member_image_id#>0){\r\n                                        Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#member_name#}\r\n                                }\r\n                                Div(Class: h5 text-muted m0, Body: #member_info#)\r\n                            }.Else{\r\n                                If(#v_key_id# == #key_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        Div(Class: h4 m0, Body: LangRes(@1editing_profile))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            Div(text-bold m0 h5, Body: LangRes(@1wallet_address))\r\n                            Span(Class: h5, Body: Address(#v_key_id#))\r\n                        }\r\n                    }\r\n                    If(#v_key_id# == #key_id#){\r\n                        Div(row){\r\n                            Div(col-md-12 mt text-center){\r\n                                DBFind(@1keys).Where({ecosystem:1, id:#v_key_id#}).Vars(apl)\r\n                                If(#ecosystem_id#>1){\r\n                                    DBFind(@1keys).Where({ecosystem:#ecosystem_id#, id:#v_key_id#}).Vars(tokens)\r\n                                }\r\n                                Div(text-bold m0 h5, Body: LangRes(@1balance))\r\n                                Div(Class: m0 h5, Body: Money(#apl_amount#) APLA)\r\n                                If(#ecosystem_id#>1){\r\n                                    If(#tokens_amount#>0){\r\n                                        Div(Class: m0 h5, Body: Money(#tokens_amount#) ecosystem tokens)\r\n                                    }.Else{\r\n                                        Div(Class: m0 h5, Body: 0 ecosystem tokens)\r\n                                    }\r\n                                }\r\n                                Button(Class: btn-xs btn-link, Page: @1profile_transactions, Body: LangRes(@1transactions_history))\r\n                                Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"back_page=@1profile_view\", Body: LangRes(@1tokens_send)).Popup(Header: $@1tokens_send$, Width: \"50\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center mt-lg){\r\n                        Div(text-bold m0 h5, Body: LangRes(@1roles))\r\n                        DBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#v_key_id#, deleted:0}).Columns(\"id\").Vars(check)\r\n                        If(#check_id#>0){\r\n                            DBFind(@1roles_participants,src_roles).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#v_key_id#, deleted:0}).Columns(\"role->id,role->name\").Order(\"id\")\r\n                            ForList(src_roles){\r\n                                Span(){\r\n                                    LinkPage(Class: h6 m0 text-primary, Page: @1roles_view, PageParams: \"v_role_id=#role.id#\", Body: \"#role.name#\")\r\n                                }.Style(margin-right: 5px; margin-left: 5px;)\r\n                            }\r\n                        }.Else{\r\n                            Span(LangRes(@1role_none))\r\n                        }\r\n                        If(#v_key_id# == #key_id#){\r\n                            SetVar(founder_account, EcosysParam(\"founder_account\"))\r\n                            If(#founder_account# != #key_id#){\r\n                                Div(row){\r\n                                    Div(col-md-12 text-center){    \r\n                                        Button(Class: btn-xs btn-link, Page: @1roles_request, Body: LangRes(@1request)).Popup(Header: $@1request_to_role$, Width: \"50\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "welcome",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(panel panel-primary){\r\n        Div(list-group-item text-center){\r\n            P(Class: h3 m0 text-bold, Body: $@1welcome_title$)\r\n        }\r\n        Div(list-group-item){\r\n            Span(Class: h4, Body: $@1welcome_text$)\r\n            Span(Class: h4 text-primary, Body: \" https://genesiskernel.readthedocs.io\")\r\n        }\r\n        Div(panel-footer text-right clearfix){\r\n            Button(Body: $@1install$, Class: btn btn-primary, Page: @1import_upload)\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    MenuItem(Title:$@1ecosystem_members$, Page:@1members_list_admin, Icon:\"icon-people\")\r\n    MenuItem(Title:$@1ecosystems$, Page:@1ecosystems_list, Icon:\"icon-layers\")\r\n    MenuItem(Title:$@1platform_parameters$, Page:@1sysparams_list, Icon:\"icon-settings\")\r\n    MenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"icon-pie-chart\")\r\n    MenuItem(Title:$@1tokens_refund$, Page:@1tokenrefund_list, Icon:\"icon-shuffle\")\r\n}.ElseIf(#ecosystem_id# > 1){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#}).Count(roles_count)\r\n    If(#roles_count# > 0){\r\n        MenuItem(Title:$@1ecosystem_members$, Page:@1members_list_admin, Icon:\"icon-people\")\r\n        MenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"icon-pie-chart\")\r\n    }\r\n}",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")\r\n    MenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\"icon-speech\")\r\n    MenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")\r\n    MenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"icon-people\")\r\n    MenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"icon-note\")\r\n    MenuItem(Title:$@1sysparams_candidates$, Page:@1sysparams_candidates_list, Icon:\"icon-graduation\")\r\n}.ElseIf(#ecosystem_id# > 1){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#}).Count(roles_count)\r\n    If(#roles_count# > 0){\r\n        MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")\r\n        MenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\"icon-speech\")\r\n        MenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")\r\n        MenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"icon-people\")\r\n        MenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"icon-note\")\r\n    }\r\n}",
            "Type": "menu"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"date_created\",\r\n        \"type\":\"datetime\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"commission_pub\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"candidate_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"commission_address\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"comment\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1CandidateValidatorDelete\\\")\",\r\n        \"name\":\"deleted\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"host_ip\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"description\",\r\n        \"type\":\"text\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1CandidateValidatorRequest\\\")\", \"update\": \"ContractAccess(\\\"@1CandidateValidatorDelete\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "tokens_refund",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"amount\",\r\n        \"type\":\"money\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\",\r\n        \"name\":\"status\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"voting_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"victim_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"attacker_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"validator_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"note\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\",\r\n        \"name\":\"result\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"closed_at\",\r\n        \"type\":\"datetime\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"blocked_at\",\r\n        \"type\":\"datetime\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\", \"update\": \"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"subject\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"type_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"ecosystem\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"init_contract\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"title\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"voters\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"type_voting\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"accept_params\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"type_participants\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"vacancies\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"candidates\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"volume\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\r\n        \"false\",\"name\":\"reject_params\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"type\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"quorum\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"contract_reject\",\r\n        \"type\":\"varchar\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"count_type_voters\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"type_decision\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"contract_accept\",\r\n        \"type\":\"varchar\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingTemplateCreate\\\",\\\"@1VotingTemplatesInstall\\\")\", \"update\": \"false\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingInvite\\\")\",\r\n        \"name\": \"voting\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingSubjectCandidates\\\", \\\"@1VotingSubjectDocument\\\", \\\"@1VotingSubjectFormal\\\", \\\"@1VotingSubjectSettings\\\")\",\r\n        \"name\": \"optional\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingUpdate\\\",\\\"@1VotingInvite\\\")\",\r\n        \"name\": \"progress\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"date_ended\",\r\n        \"type\": \"datetime\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingDecisionCheck\\\", \\\"@1VotingNotificationSend\\\", \\\"@1VotingStatusUpdate\\\", \\\"@1VotingSubjectCheck\\\", \\\"@1VotingUpdate\\\")\",\r\n        \"name\": \"flags\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingStatusUpdate\\\",\\\"@1VotingUpdate\\\")\",\r\n        \"name\": \"status\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"creator\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingDelete\\\")\",\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"date_started\",\r\n        \"type\": \"datetime\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingCreate\\\")\", \"update\": \"ContractAccess(\\\"@1VotingDecisionCheck\\\",\\\"@1VotingDelete\\\",\\\"@1VotingInvite\\\",\\\"@1VotingNotificationSend\\\",\\\"@1VotingStatusUpdate\\\",\\\"@1VotingSubjectCandidates\\\",\\\"@1VotingSubjectCheck\\\",\\\"@1VotingSubjectDocument\\\",\\\"@1VotingSubjectFormal\\\",\\\"@1VotingSubjectSettings\\\",\\\"@1VotingUpdate\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"member\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"decision\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"decision_date\",\r\n        \"type\": \"datetime\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingInvite\\\")\", \"update\": \"ContractAccess(\\\"@1VotingDecisionReject\\\",\\\"@1VotingDecisionAccept\\\",\\\"@1VotingCandidateAccept\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\")\",\r\n        \"name\": \"number_accept\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingSubjectContract\\\", \\\"@1VotingSubjectDocument\\\", \\\"@1VotingSubjectFormal\\\")\",\r\n        \"name\": \"subject\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingSubjectCandidates\\\",\\\"@1VotingSubjectContract\\\",\\\"@1VotingSubjectDocument\\\",\\\"@1VotingSubjectFormal\\\")\", \"update\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\",\\\"@1VotingDecisionAccept\\\",\\\"@1VotingSubjectContract\\\",\\\"@1VotingSubjectDocument\\\",\\\"@1VotingSubjectFormal\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "notification_closure",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1single,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "notification_icon",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Type": "app_params"
        },
        {
            "Name": "notification_sender",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1notification_sender_member,@1notification_sender_role",
            "Type": "app_params"
        },
        {
            "Name": "notification_type",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1single,@1role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role,@1system_role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types_selection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1tokenrefund_result1,@1tokenrefund_result2,@1tokenrefund_result3",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1discussion,@1voting,@1closed",
            "Type": "app_params"
        },
        {
            "Name": "type_tokens_transfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1resources_fees,@1emission_tokens,@1tokens_transfer",
            "Type": "app_params"
        },
        {
            "Name": "type_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1type_voting_custom,@1type_voting_system",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_decisions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1candidate_requests,@1candidate_manual,@1document,@1database_write,@1contract_run",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_participants",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1everybody,@1manual_add,@1roles_list1,@1roles_list2,@1roles_list3",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1waiting,@1valid,@1started,@1finished,@1invalid",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses_classes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "text-warning,text-success,text-success,text-muted,text-danger",
            "Type": "app_params"
        },
        {
            "Name": "voting_sysparams_template_id",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_tokenrefund_template_id",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_validators_template_id",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_ves_template_id",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "contract_bind_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({id:#notific_id#,ecosystem:#ecosystem_id#}).Columns(\"sender->image_id,sender->member_id,sender->member_name,closed,page_params->contract_id,page_params->contract_name\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_contract_binding$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1contract_binding_des))\r\n                        Span(Class: h5 text-bold, Body: LangRes(@1contract) - #notific_page_params_contract_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mr-lg, Body: LangRes(@1request_reject), Contract: NotificationsClose, Page: notifications_list, Params: \"notific_id=#notific_id#\").Alert(Text: $@1want_reject_request$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                                Button(Class: btn btn-success, Body: LangRes(@1contract_binding_accept), Contract: @1BindWallet, Page: notifications_list, Params: \"Id=#notific_page_params_contract_id#,NotificId=#notific_id#\").Alert(Text: $@1want_bind_contract$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    Include(@1profile)\r\n}\r\nIf(#ecosystem_id# > 1){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#}).Count(roles_count)\r\n    If(#roles_count# > 0){\r\n        Include(@1profile)\r\n    }.Else{\r\n        Include(@1welcome)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Label(Public Key)\r\n    P(Class: text-muted h6 m0, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: memberskeys, Type: textarea)\r\n    Button(Contract: @1MembershipAdd, Class: btn btn-primary pull-right mt, Page:@1members_list, Body: $@1members_add$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1members_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_new",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Placeholder: $@1ecosystem_name$, Name:Name)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Contract: @1NewEcosystem, Page: @1ec_list)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ec_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ecosystems_list).(this_table, @1ecosystems)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystems$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystems_list_desc$\"))\r\nAddToolButton(Title: $@1update_metrics$, Page: @1ecosystems_metrics_update, Icon: icon-refresh).Popup(Header: $@1update_metrics$, Width: \"30\")\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, \"{name:{$like:#search#}}\")\r\n}.Else{\r\n    SetVar(where, \"{id:{$neq:1}}\").(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1ecosystem_name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1buffer_data).Where({ecosystem:#ecosystem_id#, member_id:#key_id#, key:\"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(basic_application)\r\nSetVar(template_id, AppParam(Ecosystem:1, App:#basic_application_id#, Name: voting_ves_template_id))\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(#id#)\r\n}.Custom(_name){\r\n    Span(#name#)\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page: @1sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}.Custom(valued){\r\n    If(#template_id#>0){\r\n        If(#is_valued#==0){\r\n            Button(Body: $@1start_voting_ves$, Class: btn-xs btn-link, Page: @1voting_list, Contract: @1VotingVesCreate, Params: \"RowId=#id#\")\r\n        }\r\n    }.ElseIf(#is_valued#==1){\r\n        $@1is_valued$\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=_id,$@1ecosystem_name$=_name,$@1metrics$=_metrics,$@1valued$=valued\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1ecosystems$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Data(aggregates, \"id,name\"){\r\n        max,$@1maximum$\r\n        min,$@1minimum$\r\n        avg,$@1average$\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Interval){\r\n                LangRes(@1interval)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Interval, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Aggregate){\r\n                LangRes(@1aggregate)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1update_metrics), Page: @1ecosystems_list, Class: btn btn-primary pull-right mt, Contract: @1MetricsUpdate)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ecosystems_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystem_members$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystem_members_list_desc$\"))\r\nIf(And(#role_id# == EcosysParam(role_admin),#ecosystem_id# != 1)){\r\n    AddToolButton(Title: Add members, Page:@1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, {deleted:0, ecosystem:#ecosystem_id#, id:#search#})\r\n}.Else{\r\n    SetVar(where, {deleted:0, ecosystem:#ecosystem_id#, id:{\"$neq\":0}}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1id))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    SetVar(Name: style_text, Value: \"text-normal\")\r\n    SetVar(Name: style_link, Value: \"text-primary\")\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n    SetVar(m_id, 0)\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n}.Custom(custom_member_id){\r\n    Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_key_id=#id#\"){\r\n        Span(Class: h5, Body: Address(#id#))\r\n    }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n}.Custom(custom_username){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1wallet$=custom_member_id\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list_admin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list_admin).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystem_members$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystem_members_list_desc$\"))\r\nIf(And(#role_id# == EcosysParam(role_admin),#ecosystem_id# != 1)){\r\n    AddToolButton(Title: Add members, Page:@1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, {ecosystem:#ecosystem_id#, id:#search#})\r\n}.Else{\r\n    SetVar(where, {ecosystem:#ecosystem_id#, id:{\"$neq\":0}}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1id))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n    SetVar(m_id, 0)\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n}.Custom(custom_member_id){\r\n    Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_key_id=#id#,back_page=#this_page#\"){\r\n        Span(Class: h5 #style_text#, Body: Address(#id#))\r\n    }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n}.Custom(custom_username){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(actions){\r\n    If(#deleted#==0){\r\n        Button(Body: LangRes(@1delete), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#\", Contract: @1DeleteMember).Alert(Text: \"$@1want_delete_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        If(#blocked#==0){\r\n            Button(Body: LangRes(@1block_key), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#,Value=1\", Contract: @1BlockMember).Alert(Text: \"$@1want_block_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }.Else{\r\n            Button(Body: LangRes(@1unblock_key), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#,Value=0\", Contract: @1BlockMember).Alert(Text: \"$@1want_unblock_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }.Else{\r\n        Span(Class: h6 text-muted pull-right, Body: $@1deleted$)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1id$=custom_id,$@1wallet$=custom_member_id,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({id:#notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n    DBFind(@1ecosystems).Where({id:#notific_page_params_ecosystem_id#}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1ecosystem))\r\n                        Span(Class: h5 text-bold, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,accept=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,accept=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\r\n    DBFind(@1ecosystems).Where({id: #notific_page_params_ecosystem_id#}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_recipient_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_accepted$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-success, Body: $@1close$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: \"@1default_page\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_rejected$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-danger, Body: $@1close$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1broadcast))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: \"broadcast\", Type: \"checkbox\", Value: \"false\")\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#}).Columns(\"id\").Custom(_name){\r\n                SetVar(m_member_name, \"\")\r\n                DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\r\n                Address(#id#)\r\n                If(GetVar(m_member_name)!=\"\"){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n            Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n        }.Show(\"broadcast=false\")\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,source_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#>0){\r\n                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n            }.Else{\r\n                Div(mt-sm){\r\n                    $@1roles$ $@1not_founded$\r\n                }\r\n            }\r\n        }.Show(\"broadcast=true\")\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_subject)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"\", Placeholder: $@1message_subject_type_here$)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_text)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Type: Hidden, Name: eco_id, Value: \"#ecosystem_id#\")\r\n            Input(Type: Hidden, Name: sender, Value: \"1\")\r\n            Input(Type: Hidden, Name: icon_name, Value: \"icon-speech\")\r\n            Input(Type: Hidden, Name: params_map, Value: `{\"type\": \"message\"}`)\r\n            Input(Type: Hidden, Name: page_name, Value: \"@1message_view\")\r\n            Input(Type: textarea, Name: text_body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"rid=0,current_role_id=#role_id#\")\r\n            }.Show(\"broadcast=false\")\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"member_id=0,current_role_id=#role_id#,closure_type=2\")\r\n            }.Show(\"broadcast=true\")\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: @1messages_list)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\").Vars(message)\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#message_sender_member_id#}).Vars(highlighted)\r\n    If(GetVar(highlighted_id)){\r\n        SetVar(message_sender_member_name,#highlighted_member_name#)\r\n        SetVar(message_sender_image_id,#highlighted_image_id#)\r\n    }\r\n\r\n    If(#message_page_params_thread#>0){\r\n        SetVar(thread,#message_page_params_thread#)\r\n        DBFind(@1notifications,src_thread).Where({ecosystem:#ecosystem_id#, page_params->thread:#message_page_params_thread#}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->member_id,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#message_page_params_thread#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,notification->body,date_created\").Vars(init_message)\r\n    }.Else{\r\n        SetVar(thread,#message_id#)\r\n        DBFind(@1notifications,src_thread).Where({ecosystem:#ecosystem_id#, page_params->thread:#message_id#}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->member_id,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#message_id#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,notification->body,date_created\").Vars(init_message)\r\n    }\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init_message_sender_member_id#}).Vars(starter)\r\n    If(GetVar(starter_id)){\r\n        SetVar(init_message_sender_member_name,#starter_member_name#)\r\n        SetVar(init_message_sender_image_id,#starter_image_id#)\r\n    }\r\n\r\n    If(#init_message_sender_member_id#!=#key_id#){\r\n        SetVar(reply_recipient,#init_message_sender_member_id#)\r\n    }.Else{\r\n        SetVar(reply_recipient,#init_message_recipient_member_id#)\r\n    }\r\n    If(#message_notification_header#==\"\"){\r\n        SetVar(thread_name,$@1message_subject_empty$)\r\n    }.Else{\r\n        SetVar(thread_name,#message_notification_header#)\r\n    }\r\n\r\n    SetTitle($@1messenger$)\r\n    Span(Class: h5 m0 ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1messenger$, Page: @1messages_list)\r\n        Span(Class: text-muted mh, Body: /)\r\n        Span(Class: text-muted, Body: $@1message_view$)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    Form(){\r\n        Div(content-wrapper){\r\n            Div(row){\r\n                Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                    Form(panel panel-primary){\r\n                        Div(text-center pt){\r\n                            If(#message_sender_member_id#==#key_id#){\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from_you))\r\n                            }.Else{\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from) #message_sender_member_name#)\r\n                            }\r\n                        }\r\n                        Div(panel-body pt pb){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#message_sender_member_id#\"){\r\n                                        If(#message_sender_image_id#>0){\r\n                                            Image(Src: Binary().ById(#message_sender_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#message_sender_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #message_notification_body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#message_date_created#,HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                            Div(row mt-lg){\r\n                                Div(col-md-12 text-left){\r\n                                    Label(){\r\n                                        If(#message_sender_member_id#!=#key_id#){\r\n                                            Span(Body: LangRes(@1reply_text))\r\n                                        }.Else{\r\n                                            Span(Body: LangRes(@1message_text))\r\n                                        }\r\n                                    }\r\n                                    Input(Type: Hidden, Name: member_id, Value: \"#reply_recipient#\")\r\n                                    Input(Type: Hidden, Name: eco_id, Value: \"#ecosystem_id#\")\r\n                                    Input(Type: Hidden, Name: sender, Value: \"1\")\r\n                                    Input(Type: Hidden, Name: icon_name, Value: \"icon-speech\")\r\n                                    Input(Type: Hidden, Name: params_map, Value: `{\"type\":\"message\",\"thread\":\"#thread#\"}`)\r\n                                    Input(Type: Hidden, Name: page_name, Value: \"@1message_view\")\r\n                                    Input(Type: Hidden, Name: text_header, Value: \"#thread_name#\")\r\n                                    Input(Type: textarea, Name: text_body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n                                }\r\n                            }\r\n                            If(And(#message_closed#==0,#message_sender_member_id#!=#key_id#)){\r\n                                Div(mt text-right){\r\n                                    Button(Body: LangRes(@1mark_read), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1messages_list)\r\n                                    Button(Body: LangRes(@1reply), Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\")\r\n                                }\r\n                            }.Else{\r\n                                Div(mt text-right){\r\n                                    Button(Body: LangRes(@1send), Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(#thread_quantity#>0){\r\n                Div(row){\r\n                    Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: h4 text-bold, Body: #thread_name#)\r\n                        }\r\n                        Div(list-group-item wrapper-block){\r\n                            Div(avatar-block text-center){\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#init_message_sender_member_id#\"){\r\n                                    If(#init_message_sender_image_id#>0){\r\n                                        Image(Src: Binary().ById(#init_message_sender_image_id#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#init_message_sender_member_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                Span(Class: h5, Body: #init_message_notification_body#)\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                Span(Class: badge mr, Body: 1)\r\n                                Span(Class: mb-sm h6, Body: DateTime(#init_message_date_created#,HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                        ForList(src_thread){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#sender.member_id#}).Vars(thread_message)\r\n                                    If(GetVar(thread_message_id)==\"\"){\r\n                                        SetVar(thread_message_member_name,#sender.member_name#)\r\n                                        SetVar(thread_message_image_id,#sender.image_id#)\r\n                                    }\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){\r\n                                        If(#thread_message_image_id#>0){\r\n                                            Image(Src: Binary().ById(#thread_message_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#thread_message_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #notification.body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: badge mr, Body: Calculate(#src_thread_index#+1))\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#date_created#,HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .wrapper-block {min-height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {\r\n            margin-left: 85px;\r\n            margin-bottom: 15px;\r\n            }\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n    )\r\n}.Else{\r\n    Div(col-md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "messages_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1notifications,threads).Where({ecosystem:#ecosystem_id#, \"page_params->type\":\"message\",{\"$or\": [{\"sender->member_id\":#key_id#}, {\"recipient->member_id\":#key_id#}]}}).Order({\"id\":\"-1\"}).Limit(250).Count(threads_count).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\")\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Div(list-group-item text-center p0){\r\n                Span(Class: h4 text-bold vc, Body: LangRes(@1message_active_threads))\r\n                Button(Class: btn-xs btn-link plus-button p0 b0, Page: @1message_create){\r\n                    Span(Class: fa fa-2x icon-plus vc)\r\n                }.Popup(50, $@1message_create$)\r\n            }.Style(\r\n                .plus-button {\r\n                    position: absolute;\r\n                    right: 10px;\r\n                }\r\n            )\r\n            If(#threads_count#>0){\r\n                ForList(threads){\r\n                    If(#page_params.thread#>0){\r\n                        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"page_params->thread\": #page_params.thread#}).Order({\"id\":\"-1\"}).Limit(1).Columns(\"id\").Vars(last)\r\n                    }.Else{\r\n                        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"page_params->thread\": #id#}).Count(thread_depth)\r\n                    }\r\n                    If(Or(#id#==#last_id#,#thread_depth#==0)){\r\n                        If(Or(#closed#==1,#sender.member_id#==#key_id#)){SetVar(status,\"read\")}.Else{SetVar(status,\"unread\")}\r\n                        Div(list-group-item col-sm-12 thread-block #status#){\r\n                            Div(avatar-block text-center){\r\n                                DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"sender->member_id,recipient->member_id,sender->member_name,recipient->member_name,sender->image_id,recipient->image_id\").Vars(init_message)\r\n                                If(#init_message_sender_member_id#!=#key_id#){\r\n                                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init_message_sender_member_id#}).Vars(talker)\r\n                                    If(GetVar(talker_id)){\r\n                                        SetVar(talker_name,#talker_member_name#)\r\n                                        SetVar(talker_picture,#talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_id,#init_message_sender_member_id#)\r\n                                        SetVar(talker_name,#init_message_sender_member_name#)\r\n                                        SetVar(talker_picture,#init_message_sender_image_id#)\r\n                                    }\r\n                                }.Else{\r\n                                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init_message_recipient_member_id#}).Vars(talker)\r\n                                    If(GetVar(talker_id)){\r\n                                        SetVar(talker_name,#talker_member_name#)\r\n                                        SetVar(talker_picture,#talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_id,#init_message_recipient_member_id#)\r\n                                        SetVar(talker_name,#init_message_recipient_member_name#)\r\n                                        SetVar(talker_picture,#init_message_recipient_image_id#)\r\n                                    }\r\n                                }\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#talker_id#\"){\r\n                                    If(#talker_picture#>0){\r\n                                        Image(Src: Binary().ById(#talker_picture#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#talker_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                LinkPage(Page: @1message_view, PageParams: \"notific_id=#id#\"){\r\n                                    If(#notification.header#==\"\"){\r\n                                        Div(Class: preview h4 m0, Body: LangRes(@1message_subject_empty))\r\n                                    }.Else{\r\n                                        Div(Class: preview h4 m0, Body: #notification.header#)\r\n                                    }\r\n                                    If(#sender.member_id#==#key_id#){\r\n                                        Div(Class: preview text-muted, Body: $@1you$: #notification.body#)\r\n                                    }.Else{\r\n                                        Div(Class: preview text-muted, Body: #notification.body#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                If(GetVar(status)==\"unread\"){\r\n                                    Span(Class: badge mr, Body: LangRes(@1unread))\r\n                                }\r\n                                Span(Class: h6, Body: DateTime(#date_created#, HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(list-group-item text-center text-muted){\r\n                    $@1messages_empty$\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .thread-block {height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {margin-left: 85px;}\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n        .unread {background-color: #f7fafe;}\r\n        .vc {line-height: 44px;}\r\n    )\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1notifications,notification_singles).Where({ecosystem:#ecosystem_id#, closed:0,\"notification->type\": 1, \"recipient->member_id\": #key_id#}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body\").Count(count_singles)\r\n\r\nDBFind(@1notifications,notification_roles).Where({ecosystem:#ecosystem_id#, closed:0, \"notification->type\": 2, \"recipient->role_id\":#role_id#, {\"$or\":[{date_start_processing: $isnull}, {\"processing_info->member_id\": #key_id#}]}}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body,recipient->role_id\").Count(count_current_role)\r\n\r\nSetVar(limit,10).(limit_count,#limit#)\r\nSetVar(remaining,Calculate(#count_singles#+#count_current_role#-#limit#))\r\n\r\nIf(And(#limit_count#>0,#count_singles#>0)){\r\n    ForList(notification_singles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(And(#limit_count#>0,#count_current_role#>0)){\r\n    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#role_id#}).Columns(\"role_name\").Vars(role)\r\n    Div(dropdown-heading b0){\r\n        $@1role_notifics$ (#role_role_name#)\r\n    }\r\n    ForList(notification_roles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(#remaining#>0){\r\n    Button(Class: btn btn-block btn-default, Page: @1notifications_list){\r\n        $@1notifications_show_all$ (#remaining# $@1more$)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_broadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(role_admin, EcosysParam(Ecosystem:1, Name: role_admin))\r\nDBFind(@1ecosystems).Count(ecos_count)\r\nForm(){\r\n    If(And(#role_id#==#role_admin#,#ecosystem_id#==1,#ecos_count#>1)){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Value: $@1ecosystems_administrators$, Disabled: true)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Header)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1body_text)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Body, Type: textarea).Style(resize: vertical;)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1popup))\r\n                }\r\n            }.Style(line-height: 18px;)\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Popup, Type: checkbox, Value: false, Class: mt-sm)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-sm-12 alert alert-warning text-center){\r\n            If(#role_id#!=#role_admin#){\r\n                LangRes(@1only_admin_action)\r\n            }\r\n            If(#ecosystem_id#!=1){\r\n                LangRes(@1only_first_ecosystem_action)\r\n            }\r\n            If(#ecos_count#==1){\r\n                LangRes(@1other_ecosystems_not_found)\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: @1notifications_list, Contract: @1NotificationsBroadcast, Params: \"RoleId=#role_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(page_par)!=\"\"){\r\n    SetVar(Name: type, Value: #page_par#)\r\n}\r\n\r\nIf(Or(#type#==0,#type#==1)){\r\n}.Else{\r\n    SetVar(Name: type, Value: 0)\r\n}\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1notifications_list_desc$\"))\r\nDiv(btn-group ml-lg){\r\n    If(#type#==0){\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray ml-sm)\r\n    }\r\n    If(#type#==1){\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray ml-sm)\r\n    }\r\n}\r\nIf(#type#==0){\r\n    Include(@1notifications_single)\r\n}\r\nIf(#type#==1){\r\n    Include(@1notifications_roles)\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_roles_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_roles_send).(back_page,@1notifications_list)\r\nIf(GetVar(SelectedId)==\"\"){\r\n    SetVar(SelectedId,#ecosystem_id#)\r\n}\r\nDBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\nDBFind(@1ecosystems).Columns(\"id,name\").WhereId(#SelectedId#).Vars(eco)\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: eco_id, Type:hidden, Value: #eco_id#)\r\n            Div(input-group){\r\n                Input(Name: eco_id_v, Disabled: 1, Value: #eco_name#)\r\n                Div(input-group-btn){\r\n                    Button(Body: LangRes(@1select), Page: @1select_page, PageParams: \"Type=ecosystem,back_page=#this_page#,Header=$@1send$\", Class:btn btn-primary).Popup(Header: $@1ecosystem$, Width: \"50\")\r\n                }\r\n            }  \r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,source_roles).Where({ecosystem:#SelectedId#, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#>0){\r\n                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n            }.Else{\r\n                Div(mt-sm){\r\n                    $@1roles$ $@1not_founded$\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1closure_type)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_closure, Source: src_closure_type)\r\n            Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name_popup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name_popup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name)\")\r\n    }.Show(\"popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name_popup)\")\r\n    }.Show(\"popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"type=1\")\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_show",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\nSetTitle($@1notifications_view$)\r\n\r\nSetVar(type,0).(header,).(body,)\r\nDiv(content-wrapper){\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\r\n        SetVar(type,#note_sender_type#)\r\n        SetVar(header,#note_notification_header#)\r\n        SetVar(body,#note_notification_body#)\r\n\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading text-center){\r\n                        #header#\r\n                    }\r\n                    Div(panel-body){\r\n                        #body#\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#type# == 1){\r\n                            If(#note_closed# == 0){\r\n                                Button(Body: LangRes(@1understood), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }.ElseIf(#type# == 2){\r\n                            If(#note_closed#==0){\r\n                                If(#note_date_start_processing#==\"\"){\r\n                                    Button(Body: LangRes(@1understood), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_show)\r\n                                }.Else{\r\n                                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_single_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_single_send).(back_page,@1notifications_list)\r\nIf(GetVar(SelectedId)==\"\"){\r\n    SetVar(SelectedId,#ecosystem_id#)\r\n}\r\nDBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\nDBFind(@1ecosystems).Columns(\"id,name\").WhereId(#SelectedId#).Vars(eco)\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: eco_id, Type:hidden, Value: #eco_id#)\r\n            Div(input-group){\r\n                Input(Name: eco_id_v, Disabled: 1, Value: #eco_name#)\r\n                Div(input-group-btn){\r\n                    Button(Body: LangRes(@1select), Page: @1select_page, PageParams: \"Type=ecosystem,back_page=#this_page#,Header=$@1send$\", Class:btn btn-primary).Popup(Header: $@1ecosystem$, Width: \"50\")\r\n                }\r\n            }  \r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1keys,src_keys).Where({ecosystem:#SelectedId#}).Columns(\"id\").Custom(_name){\r\n                SetVar(m_member_name, \"\")\r\n                DBFind(@1members).Where({ecosystem:#SelectedId#, id:#id#}).Columns(\"id,member_name\").Vars(m)\r\n                Address(#id#)\r\n                If(GetVar(m_member_name)!=\"\"){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n            Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name_popup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name_popup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name)\")\r\n    }.Show(\"popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name_popup)\")\r\n    }.Show(\"popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n        SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n        SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(){\r\n                Div(list-group-item text-center){\r\n                    Span(Class: h3, Body: #notific_header#)\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1id))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_id#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1type))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#notification_type# > 0){\r\n                                Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #notification_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1sender))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#sender_type# > 0){\r\n                                Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_sender, Index: #sender_type#))\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #sender_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1body_text))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_body#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_number))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_int#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_string))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_str#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item text-right){\r\n                    If(#prefix_closed# == 0){\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            If(#prefix_date_start_processing# == \"\"){\r\n                                Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage_popup",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\nForm(){\r\n    If(#notific_id#>0){\r\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,sender->member_name,sender->role_name,notification->body,notification->type,notification->header,date_start_processing,closed\").Vars(n)\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(LangRes(@1sender))\r\n                }\r\n            }\r\n            Div(col-md-9 mt-sm text-left){\r\n                If(#n_sender_type#==1){\r\n                    Span(Class: text-normal, Body: #n_sender_member_name#)\r\n                }.ElseIf(#n_sender_type#==2){\r\n                    Span(Class: text-normal, Body: #n_sender_role_name#)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(LangRes(@1header))\r\n                }\r\n            }\r\n            Div(col-md-9 mt-sm text-left){\r\n                Span(Class: text-normal, Body: #n_notification_header#)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(LangRes(@1body_text))\r\n                }\r\n            }\r\n            Div(col-md-9 mt-sm text-left){\r\n                Span(Class: text-normal, Body: #n_notification_body#)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n    }\r\n    If(#n_notification_type# == 1){\r\n        SetVar(page_type,0)\r\n    }.ElseIf(#n_notification_type# == 2){\r\n        SetVar(page_type,1)\r\n    }\r\n    If(#n_closed# == 0){\r\n        If(#n_notification_type# == 1){\r\n            Button(Body: LangRes(@1close), Class: btn btn-primary pull-right mt, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=#page_type#\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list, PageParams: \"type=#page_type#\")\r\n        }.ElseIf(#n_notification_type# == 2){\r\n            If(#n_date_start_processing# == \"\"){\r\n                Button(Body: LangRes(@1begin), Class: btn btn-primary pull-right mt, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=#page_type#\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list, PageParams: \"type=#page_type#\")\r\n            }.Else{\r\n                Button(Body: LangRes(@1close), Class: btn btn-primary pull-right mt, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=#page_type#\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list, PageParams: \"type=#page_type#\")\r\n            }\r\n        }\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list, PageParams: \"type=#page_type#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_avatar_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($@1avatar$)\r\n        Span(Class: text-danger, Body:*)\r\n        Input(Name: member_image, Type: file)\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Contract: @1ProfileEditAvatar, Page: @1profile_edit, PageParams:\"avatar_uploaded=1\")\r\n            Button(Body: LangRes(@1close), Class: btn btn-default, Page: @1profile_edit)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1editing_profile$)\r\n    Div(breadcrumb){\r\n        LinkPage($@1user_info$, @1profile_view)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $@1editing_profile$)\r\n    }\r\n\r\n    SetVar(prefix_image_id, 0)\r\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#key_id#}).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\r\n\r\n    DBFind(@1buffer_data).Columns(\"value->image_id\").Where({ecosystem:#ecosystem_id#, key:avatar, member_id:#key_id#}).Vars(avatar)\r\n    If(And(#avatar_value_image_id#>0,#avatar_uploaded#==1)){\r\n        SetVar(prefix_image_id, #avatar_value_image_id#)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(@1editing_profile))\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-5 mt-lg text-center){\r\n                            Button(Class: btn btn-link, Page: @1profile_avatar_edit){\r\n                                If(#prefix_image_id#>0){\r\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\r\n                                }\r\n                            }.Popup(Header: $@1editing_profile$, Width: 30)\r\n                        }\r\n                        Div(col-md-7 mc-sm text-left){\r\n                            Div(form-group){\r\n                                Label(){\r\n                                    Span(Body: LangRes(@1member_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\r\n                                }.Else{\r\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\r\n                                    InputErr(Name: member_name, minLength: $@1validate_member_name$, maxLength: $@1validate_member_name$)\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                If(GetVar(prefix_member_info_information)){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(@1information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\r\n                                }.Else{\r\n                                    Label(){\r\n                                        Span(Body: LangRes(@1information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1profile_view)\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1profile_view, Params:\"image_id=#prefix_image_id#\", Contract: @1ProfileEdit).Alert(Text: \"$@1want_save_changes$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1profile_transactions).(this_table, @1history)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1transactions_history$)\r\n\r\nIf(GetVar(new_filter)){\r\n    If(#show_fees#!=\"true\"){\r\n        SetVar(filter1, {\"type\": {$neq: 1}})\r\n    }\r\n    If(Or(#wallet#<0,#wallet#>0)){\r\n        SetVar(filter2, {$or: [{$and: [{\"sender_id\":#key_id#}, {\"recipient_id\":#wallet#}]}, {$and: [{\"sender_id\":#wallet#}, {\"recipient_id\":#key_id#}]}]})\r\n    }.Else{\r\n        SetVar(filter2, {$or: [{\"sender_id\":#key_id#}, {\"recipient_id\":#key_id#}]})\r\n    }\r\n    If(#lower_limit#>0){\r\n        If(#upper_limit#>0){\r\n            SetVar(filter3, {\"amount\": [{$gte: Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}, {$lte: Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}]})\r\n        }.Else{\r\n            SetVar(filter3, {\"amount\": {$gte: Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}})\r\n        }\r\n    }.ElseIf(#upper_limit#>0){\r\n        SetVar(filter3, {\"amount\": {$lte: Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}})\r\n    }\r\n    SetVar(filters, {$and: [{\"ecosystem\":#ecosystem_id#}, GetVar(filter1), GetVar(filter2), GetVar(filter3)]})\r\n    SetVar(page_par, #filters#)\r\n}.ElseIf(GetVar(page_par)){\r\n    SetVar(filters, #page_par#)\r\n}.Else{\r\n    SetVar(filters, {$and: [{\"ecosystem\":#ecosystem_id#}, {\"type\": {$neq: 1}}, {$or: [{\"sender_id\":#key_id#}, {\"recipient_id\":#key_id#}]}]})\r\n}\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, {$and: [GetVar(filters), {\"comment\": {$like: #search#}}]})\r\n}.Else{\r\n    SetVar(where, GetVar(filters)).(search,)\r\n}\r\n\r\nDiv(mr-lg text-right){\r\n    Button(Page: @1profile_transactions_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"show_fees=#show_fees#,wallet=#wallet#,lower_limit=#lower_limit#,upper_limit=#upper_limit#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"45\")\r\n    If(GetVar(page_par)){\r\n        Button(Page: #this_page#, Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\r\n    }\r\n}.Style(margin-top: -33px; z-index: 1001;)\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1comment))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(@1history, src_history).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(sender_wallet){\r\n    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#sender_id#\"){\r\n        Address(#sender_id#)\r\n    }\r\n}.Custom(recipient_wallet){\r\n    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#recipient_id#\"){\r\n        Address(#recipient_id#)\r\n    }\r\n}.Custom(amount_apl){\r\n    Money(#amount#) APLA\r\n}.Custom(_type){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name: type_tokens_transfer, Index: #type#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_history, \"$@1block$=block_id,$@1sender$=sender_wallet,$@1recipient$=recipient_wallet,$@1amount$=amount_apl,$@1comment$=comment,$@1type$=_type\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1transactions_history_empty$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions_filter",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1key_id))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            If(Or(#wallet#<0,#wallet#>0)){\r\n                Input(Name: wallet, Value: #wallet#)\r\n            }.Else{\r\n                Input(Name: wallet)\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_wallet_desc))\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: \"$@1amount_range$ (APLA)\")\r\n            }\r\n        }\r\n        Div(col-sm-3 pr0){\r\n            If(#lower_limit#>0){\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\", Value: #lower_limit#)\r\n            }.Else{\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_lower_desc))\r\n        }\r\n        Div(col-sm-2 ph0 mt-sm text-center){\r\n            Label(Body: \"< $@1amount$ <\")\r\n        }\r\n        Div(col-sm-3 pl0){\r\n            If(#upper_limit#>0){\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\", Value: #upper_limit#)\r\n            }.Else{\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_upper_desc))\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-4 mt text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1resources_fees_show))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            If(#show_fees#==\"true\"){\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"true\")\r\n            }.Else{\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"false\")\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1filter), Class: btn btn-primary pull-right, Page: @1profile_transactions, PageParams: \"new_filter=1,show_fees=Val(show_fees),wallet=Val(wallet),lower_limit=Val(lower_limit),upper_limit=Val(upper_limit)\")\r\n    Button(Body: LangRes(@1clear), Class: btn btn-default pull-right, Page: @1profile_transactions)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Include(@1profile)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({name:\"Basic\", ecosystem:1}).Vars(application)\r\nIf(#v_role_id#>0){\r\n    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, id:#v_role_id#}).Columns(\"id,role_name,role_type,roles_access,creator->member_id\").Vars(prefix)\r\n\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0)){\r\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_roles_access#}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\r\n    }.Else{\r\n        SetVar(manager_id,0)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1role))\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type) Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_role_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                If(#manager_id#==0){\r\n                    P(Class: m0 text-danger h6, Body: LangRes(@1appointment_impossible))\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            SetVar(participants,0)\r\n            DBFind(@1roles_participants).Where({\"role->id\":#v_role_id#, deleted:0, ecosystem:#ecosystem_id#}).Columns(\"id,member->member_id\").Custom(_id){\r\n                SetVar(participants,\"#participants#,#member.member_id#\")\r\n            }\r\n            DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#participants#]}}).Columns(\"id\").Custom(_name){\r\n                SetVar(m_id, 0)\r\n                DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\r\n                Address(#id#)\r\n                If(Or(#m_id#>0,#m_id#<0)){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1member)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: @1RolesAssign, Params: \"member_id=Val(member_id)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns([\"name\", \"id\"]).Where({ecosystem:1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nDBFind(@1roles).Columns([\"role_name\", \"id\"]).Where({ecosystem:#ecosystem_id#, deleted:0, id:#role_id#}).Order(id).Vars(admin_role)\r\nSetVar(admin_role_name, #admin_role_role_name#)\r\n\r\nIf(GetVar(rid)){\r\n    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#rid#}).Columns(\"roles_access,id,role_type,role_name\").Vars(role)\r\n    SetVar(title, $@1edit_role$)\r\n    SetVar(role_type, AppParam(Ecosystem:1, App:#application_id#, Name: roles_types_selection, Index: #role_role_type#))\r\n\r\n    If(And(#role_roles_access#!=\"NULL\",#role_roles_access#!=\"\",#role_roles_access#!=\"[]\")){\r\n        DBFind(@1roles,src_roles_access).Where({ecosystem:#ecosystem_id#, id:{\"$in\":#role_roles_access#}}).Columns(\"id,role_name\").Order(role_name)\r\n    }\r\n}.Else{\r\n    SetVar(rid, 0)\r\n    SetVar(title, $@1new_role$)\r\n    AppParam(Ecosystem:1, App: #application_id#, Name: roles_types_selection, Source: app_roles_types)\r\n\r\n    DBFind(@1buffer_data).Columns(value).Where({ecosystem:#ecosystem_id#, \"key\": \"roles_access\", \"member_id\": #key_id#}).Vars(buffer)\r\n    If(And(#buffer_value#!=\"NULL\",#buffer_value#!=\"\",#buffer_value#!=\"[]\",GetVar(buffer_value)!=\"\")){\r\n        DBFind(@1roles, src_roles_access).Columns(\"id,role_name\").Where({ecosystem:#ecosystem_id#, \"id\": {\"$in\": #buffer_value#}}).Order(role_name)\r\n    }\r\n}\r\nDBFind(@1roles, src_roles).Columns([\"id\", \"role_name\"]).Where({ecosystem:#ecosystem_id#, \"deleted\":0}).Order(id)\r\nIf(GetVar(back_page)){}.Else{\r\n    SetVar(back_page,\"@1roles_list\")\r\n}\r\nIf(GetVar(vID)){}.Else{\r\n    SetVar(vID,)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid# > 0){\r\n                Div(text-muted mt-sm){\r\n                    #role_role_name#\r\n                }\r\n            }.Else{\r\n                Input(Name: role_name).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: role_name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid# > 0){\r\n                Div(text-muted mt-sm){\r\n                    #role_type#\r\n                }\r\n            }.Else{\r\n                Select(Name: role_type, Source: app_roles_types, NameColumn: name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1roles_access)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn btn-primary fa fa-plus, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: @1RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\r\n                }\r\n            }\r\n            ForList(src_roles_access){\r\n                SetVar(btn_class,\"btn-default\")\r\n                If(#id#==#role_id#){\r\n                    SetVar(btn_class,\"btn-info\")\r\n                }\r\n                Button(Class: btn #btn_class# mr-sm mb-sm, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: @1RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n            }\r\n        }\r\n    }\r\n    If(#rid#>0){}.Else{\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1RolesCreate)\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1roles_list).(this_table, @1roles)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1roles$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1roles_list_desc$\"))\r\nAddToolButton(Page: @1roles_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_role$)\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, \"{role_name:{$like:#search#}, ecosystem:#ecosystem_id#}\")\r\n}.Else{\r\n    SetVar(where, \"{id:{$neq:0}, ecosystem:#ecosystem_id#}\").(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1role))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#).Where({ecosystem:#ecosystem_id#}).Count(all_roles_count)\r\nDBFind(#this_table#, src_roles).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text,).(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #role_name#\r\n        }.Else{\r\n            Div(Class: text-primary){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Div(Class: text-primary){\r\n                Span(Class: btn-link text-bold pb-sm, Body: #role_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    }\r\n}.Custom(_type){\r\n    DBFind(@1applications).Where({name:\"Basic\", ecosystem:1}).Columns(\"name,id\").Vars(application)\r\n    Span(Class: #style_text#, Body: AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #role_type#))\r\n}.Custom(_status){\r\n    Span(Class:#style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.member_id#==#key_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n\r\n    If(And(#roles_access#!=\"NULL\",#roles_access#!=\"\",#roles_access#!=\"[]\")){\r\n        DBFind(@1roles,src_access_list).Where({id:{\"$in\":#roles_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(And(#role_id#==#id#)){\r\n                    SetVar(access,done)\r\n                }\r\n\r\n                If(#access_count#!=#src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access#==\"done\"){\r\n            If(And(#deleted#==0,#role_type#!=3)){\r\n                Button(Class: fa fa-trash btn btn-danger mh-sm, Contract: @1RolesDelete, Params: \"ops=D,rid=#id#\", Page: @1roles_list).Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.ElseIf(#deleted#==1){\r\n                Button(Class: fa fa-recycle btn btn-info mh-sm, Contract: @1RolesDelete, Params: \"ops=R,rid=#id#\", Page: @1roles_list)\r\n            }\r\n            Button(Class: fa fa-edit btn btn-default mh-sm, PageParams: \"rid=#id#\", Page: @1roles_create).Popup(50, $@1edit_role$)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_roles, \"$@1role$=_name,$@1type$=_type,$@1id$=id,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1roles_access$=_access,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1roles$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted){\r\n                    Button(Body: $@1install_default_roles$, Class: btn btn-primary, Page: @1roles_list, Contract: @1RolesInstall)\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:1, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#==0){\r\n                Div(Body: LangRes(@1send_not_possible))\r\n                Div(Body: LangRes(@1no_assigned_roles))\r\n            }.Else{\r\n                Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    If(#roles_count#>0){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Contract: @1RolesRequest, Page: @1profile_view)\r\n    }\r\n    Button(Body: LangRes(@1close), Class: btn btn-default pull-right mt, Page: @1profile_view)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_to_role$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#notific_page_params_rid#}).Columns(\"role_name\").Vars(r)\r\n                        Div(text-muted m0 h5, Body: LangRes(@1role))\r\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\r\n                                Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(page_par)!=\"\"){\r\n    SetVar(Name: v_role_id, Value: #page_par#)\r\n}\r\nIf(#v_role_id# > 0){\r\n    SetVar(this_page, @1roles_view).(this_table, @1roles_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#v_role_id#}).Columns(\"role_name,role_type,deleted,roles_access,creator->member_id\").Vars(prefix)\r\n    SetTitle(\"$@1role$\": #prefix_role_name#)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n        If(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0)){\r\n            DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_roles_access#}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\r\n        }\r\n    }\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1roles_assign, PageParams: \"v_role_id=#v_role_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n    }\r\n\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1roles$, Page: @1roles_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_role_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    If(GetVar(search)){\r\n        SetVar(where, {\"ecosystem\":#ecosystem_id#, \"role->id\":#v_role_id#, \"member->member_name\":{\"$like\": #search#}})\r\n    }.Else{\r\n        SetVar(where, {\"ecosystem\":#ecosystem_id#, \"role->id\":#v_role_id#}).(search,)\r\n    }\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_role_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#appointed.member_id#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n        If(#appointed.voting_id#>0){\r\n            LinkPage(Class:#style_link# h5 text-bold, Page: @1voting_view, PageParams: \"vID=#appointed.voting_id#\"){\r\n                Span(Body: #appointed.voting_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1RolesUnassign, Params: \"row_id=#id#\", Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }                       \r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "select_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#Type#==ecosystem){\r\n    DBFind(@1ecosystems,items).Limit(250).Columns(\"name,id\")\r\n    SetVar(name_column,\"name\")\r\n    SetVar(value_column,\"id\")\r\n}\r\nIf(#Type#==ecosystem_catalog){\r\n    DBFind(@1parameters,items).Where({\"$and\": [{ecosystem: {\"$neq\": 1}}, {\"$or\": [{\"$and\": [{\"name\": \"founder_account\"},{\"value\": #key_id#}]},{\"$and\": [{\"name\": \"delegate_account\"},{\"value\": #key_id#}]}]}]}).Columns(\"ecosystem\").Custom(\"custom_name\"){\r\n        DBFind(@1ecosystems).Where({id: #ecosystem#}).Vars(eco)\r\n        Span(#eco_name#)\r\n    }\r\n    SetVar(name_column,\"custom_name\")\r\n    SetVar(value_column,\"ecosystem\")\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Select(Name: SelectedId, Source: items, NameColumn: #name_column#, ValueColumn: #value_column#)  \r\n        }\r\n    }\r\n    If(GetVar(Header)!=\"\"){\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"SelectedId=Val(SelectedId)\").Popup(Header: #Header#, Width: 50)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#).Popup(Header: #Header#, Width: 50)\r\n    }.Else{\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"SelectedId=Val(SelectedId)\")\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidate_validators_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1host_ip))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\r\n            InputErr(Name: HostIp, minLength: $@1ip_short$, maxLength: $@1ip_long$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1wallet))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\r\n            InputErr(Name: CommissionAddress, minLength: $@1address_invalid$, maxLength: $@1address_invalid$\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1description_equipment))\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Description, Type: textarea)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1comment))\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Comment, Type: textarea)\r\n        }\r\n    }\r\n    Button(Contract: @1CandidateValidatorRequest, Class: btn btn-primary pull-right mt, Page: @1sysparams_candidates_list, Body: $@1send_request$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1sysparams_candidates_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1sysparams_candidates_list).(this_table, @1sysparams_candidate)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1sysparams_candidates$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1sysparams_candidates_list_desc$\"))\r\nAddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1sysparams_candidate_validators_create).Popup(50, $@1sysparams_candidate_validators_form$)\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, \"{{host_ip:{$like:#search#}}, deleted:0}\")        \r\n}.Else{\r\n    SetVar(where, \"{deleted:0}\").(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1host_ip))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_validators_template_id))\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    If(#template_id#>0){\r\n        Form(btn-group pull-right){\r\n            Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\r\n            Button(Contract: @1VotingValidatorCreate, Page: @1voting_list, Class: btn btn-default fa fa-play)\r\n        }\r\n    }.Else{\r\n        Span($@1voting_template_not_found$,text-muted)\r\n    }\r\n}.Custom(_date){\r\n    DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n}.Custom(_addr){\r\n    Address(#commission_address#)\r\n}.Custom(custom_username){\r\n    SetVar(user_member_name, \"\")\r\n    DBFind(members).Where({\"id\":#commission_address#,\"ecosystem\":#ecosystem_id#}).Vars(user)\r\n    If(GetVar(user_member_name)==\"\"){\r\n        SetVar(user_member_name, Address(#commission_address#))\r\n    }\r\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#user_id#\"){\r\n        If(#user_image_id#>0){\r\n            Image(Src: Binary().ById(#user_image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#user_member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#user_member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1host_ip$=host_ip,$@1name$=custom_username,$@1wallet$=_addr,$@1description_equipment$=description,$@1comment$=comment,$@1date_created$=_date,$@1voting$=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1sysparams_candidates$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1sysparams_list).(this_table, @1system_parameters)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1platform_parameters$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1platform_params_desc$\"))\r\nSetVar(role_validator, EcosysParam(Ecosystem:1, Name: role_validator))\r\nDBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\nIf(#validator_id#>0){\r\n    AddToolButton(Title: $@1sysparams_validator_resign$, Icon: icon-pin, Page: @1sysparams_validator_resign).Popup(50, $@1sysparams_validator_resign$)\r\n}\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, \"{name:{$like:#search#}}\")\r\n}.Else{\r\n    SetVar(where, \"{id:{$gt:0}}\").(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    SetVar(sp_id,0)\r\n    DBFind(@1contracts).Where({ecosystem:1, name:#name#}).Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        Span(Class: pull-right){\r\n            LinkPage(Class: text-primary h4, Body: Em(Class: fa fa-cogs), Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        Span(Class: pull-right){\r\n            $@1contract_404$\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    Div(){\r\n        #name#\r\n    }.Style(min-width:200px;)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=_name,$@1value$=value,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1platform_parameters$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(@1ecosystems_list), Page: @1ecosystems_list)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(@1metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(@1metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(GetVar(Id)){\r\n            SetVar(title,\"LangRes(@1metrics): LangRes(@1ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(@1metrics,src_metric).Where({key:#Id#, metric:#Metric#}).Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$@1timestam$=time,$@1value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_validator_resign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-12 text-center h4){\r\n            $@1validator_removing_desc$\r\n        }\r\n    }\r\n    SetVar(role_validator, EcosysParam(Ecosystem:1, Name: role_validator))\r\n    DBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\n    If(#validator_id#>0){\r\n        Button(Body: $@1resign$, Class: btn btn-danger pull-right mt-lg, Page: @1sysparams_list, Contract: @1ValidatorResign).Alert(Text: \"$@1want_resign$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n    }\r\n    Button(Body: $@1back$, Class: btn btn-default pull-right mt-lg, Page: @1sysparams_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid, AppParam(Ecosystem:1, App:#application_id#, Name: voting_sysparams_template_id))\r\nDBFind(@1voting_templates,temps).WhereId(#tid#).Vars(template)\r\nSetVar(role_asbl,EcosysParam(Name:role_apla_consensus_asbl, Ecosystem:1))\r\nSetTitle($@1voting$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($@1system_params$, @1sysparams_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $@1voting$)\r\n    }\r\n\r\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\r\n        DBFind(@1system_parameters).Where({name:#param_name#}).Vars(param)\r\n        DBFind(@1voting_templates).WhereId(#template_id#).Columns(\"title,id\").Vars(template)\r\n        SetTitle(#template_title#)\r\n        If(#param_name#!=\"full_nodes\"){\r\n            Form(){\r\n                Div(form-group){\r\n                    Label(For: ColumnName){\r\n                        LangRes(@1name)\r\n                    }\r\n                    Input(Name: ColumnName, Value: #param_name#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: Value){\r\n                        LangRes(@1value)\r\n                    }\r\n                    Input(Name: Value, Value: #param_value#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(){\r\n                        LangRes(@1new_value)\r\n                    }\r\n                    Input(Name: NewValue, Type: textarea)\r\n                }\r\n                Div(text-left){\r\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\r\n                    Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingParamCreate, Page: @1voting_list)\r\n                }\r\n            }\r\n        }.Else{\r\n            SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(Ecosystem:1, App:#application_id#, Name: first_node)).(first_node_set,)\r\n            SetTitle(\"#param_name#: $@1add$ $@1new_value$\")\r\n            Form(){\r\n                If(`#full_nodes#`==\"\"){\r\n                    JsonToSource(src_first_node,#first_node#)\r\n                    ForList(src_first_node){\r\n                        If(#value#==\"\"){\r\n                            SetVar(first_node_set,error)\r\n                        }\r\n                    }\r\n                    If(#first_node_set#==error){\r\n                        Div(text-center){\r\n                            ForList(src_first_node){\r\n                                If(#value#==\"\"){\r\n                                    Div(){first node: '#key#' empty}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(text-center){\r\n                            DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, name:first_node}).Vars(first_node_param)\r\n                            Button(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=@1sysparams_list\"){\r\n                                Install the first node before adding the new\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#first_node_set#!=error){\r\n                    Div(form-group){\r\n                        Label(For: Duration){\r\n                            LangRes(@1duration)\r\n                        }\r\n                        Input(Name:Duration, Value:21, Disabled: true)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: TcpAddress){\r\n                            LangRes(@1tcp_address)\r\n                        }\r\n                        Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: ApiAddress){\r\n                            LangRes(@1api_address)\r\n                        }\r\n                        Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: KeyId){\r\n                            LangRes(@1node_founder_key_id)\r\n                        }\r\n                        Input(Name: KeyId,Type: number, Value: #key_id#)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: PubKey){\r\n                            LangRes(@1node_pub_key)\r\n                        }\r\n                        Input(Name: PubKey, Type: textarea)\r\n                    }\r\n\r\n                    Div(text-left mb-lg){\r\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\r\n                        Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingNodeAdd, Page: @1voting_list)\r\n                    }\r\n                }\r\n            }\r\n            AppParam(Ecosystem:1, App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\r\n            SetVar(node_owner,)\r\n            ForList(nodes_keys){\r\n                If(#name#==\"key_id\"){\r\n                    SetVar(node_owner, 1)\r\n                }\r\n            }\r\n            If(`#full_nodes#`!=\"\"){\r\n                SetVar(nodes_count,0)\r\n                ArrayToSource(src_full_nodes,`#full_nodes#`)\r\n                Div(mt-lg form-group text-left text-muted){\r\n                    Label(){Nodes list}\r\n                    ForList(src_full_nodes){\r\n                        SetVar(nodes_count,#src_full_nodes_index#)\r\n                        JsonToSource(src_node,`#value#`)\r\n                        Div(list-group-item){\r\n                            Label(){node #key#}\r\n                            ForList(src_node){\r\n                                Div(){\r\n                                    Strong(#key#:) #value#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(word-break: break-all;)\r\n\r\n                If(#role_id#==#role_asbl#){\r\n                    Div(panel panel-primary){\r\n                        Form(){\r\n                            Div(panel-heading text-center h3){\r\n                                Span(#param_name#, text-uppercase): Span(LangRes(delete) $value$, text-lowercase)\r\n                            }\r\n                            Input(Name:Duration, Type:hidden, Value:21)\r\n                            Div(panel-body text-left text-break){\r\n                                RadioGroup(Name:Index, Source:src_full_nodes, NameColumn: value, ValueColumn: key)\r\n                            }\r\n                            Div(panel-footer text-right){\r\n                                If(#nodes_count#>2){\r\n                                    Button(Body: $@1voting$, Class: btn btn-danger, Contract: @1VotingNodeRemove, Page: @1voting_list)\r\n                                }.Else{\r\n                                    Button(Body: $@1voting$, Class: btn btn-danger disabled)\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Style(\r\n                        .text-break label,.text-break td {word-break: break-all;}\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(text-danger text-center text-bold){\r\n            If(#param_index#>0){}.Else{\r\n                Div(){LangRes(@1attention)}\r\n            }\r\n            If(#tid#>0){\r\n                If(#template_id#>0){}.Else{\r\n                    Div(mb-sm){\r\n                        LangRes(@1voting_template_not_found)\r\n                    }\r\n                    LinkPage(Page: @1voting_templates_list, Class: btn btn-info){\r\n                        LangRes(@1template_set)\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(mb-sm){\r\n                    LangRes(@1voting_template_id_not_found)\r\n                }\r\n                DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, name:voting_sysparams_template_id}).Vars(template_param)\r\n                LinkPage(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"back_page=@1sysparams_list,id=#template_param_id#\"){\r\n                    LangRes(@1template_id_set)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Amount){\r\n                LangRes(@1amount)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Amount, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: VictimAccount){\r\n                LangRes(@1tokens_refund_victim)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: VictimAccount, Placeholder: $@1key_id_or_wallet$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: SuspectAccount){\r\n                LangRes(@1tokens_refund_attacker)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: SuspectAccount, Placeholder: $@1key_id_or_wallet$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Note){\r\n                LangRes(@1description)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Note, Type: textarea)\r\n        }\r\n    }\r\n    Button(Body: $@1request_refund$, Contract: @1VotingTokensRefundCreate, Page: @1tokenrefund_list, Class: btn pull-right btn-primary mt)\r\n    Button(Body: LangRes(@1back), Class: btn pull-right btn-default mt, Page: @1tokenrefund_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1tokenrefund_list).(this_table, @1tokens_refund)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1tokens_refunds_list$\")\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid,AppParam(App:#application_id#, Name:voting_tokenrefund_template_id, Ecosystem:1))\r\nIf(#tid#>0){\r\n    DBFind(@1voting_templates).Where({ecosystem:#ecosystem_id#, id:#tid#}).Columns(\"voters\").Vars(template)\r\n    If(#template_voters#>0){\r\n        DBFind(@1roles).Where({ecosystem:1, id:#template_voters#}).Columns(\"id,role_name\").Vars(voters)\r\n    }\r\n}\r\nIf(And(#template_voters#>0,#template_voters#==#role_id#)){\r\n    Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_desc$))\r\n    AddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1tokenrefund_create).Popup(50, $@1create_request$)\r\n}.Else{\r\n    If(#voters_id#>0){\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_allowed_role$ #voters_role_name#))\r\n    }.Else{\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1template_id_not_found$))\r\n    }\r\n}\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, \"{note:{$like:#search#}}\")\r\n}.Else{\r\n    SetVar(where, \"{id:{$gt:0}}\").(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1description))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src_refunds_list).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_status){\r\n    If(#status#>0){\r\n        SetVar(sta,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n        LangRes(#sta#)\r\n    }.Else{\r\n        $@1tokenrefund_status0$\r\n    }\r\n}.Custom(_result){\r\n    If(#result#>0){\r\n        SetVar(res,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n        LangRes(#res#)\r\n    }.Else{\r\n        $@1tokenrefund_result0$\r\n    }\r\n}.Custom(_blocked){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n}.Custom(_closed){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n}.Custom(_accounts){\r\n    Div(){$@1tokens_refund_victim$: #victim_key_id#}\r\n    Div(){$@1tokens_refund_attacker$: #attacker_key_id#}\r\n}.Custom(_amount){\r\n    Money(#amount#)\r\n}.Custom(_voting){\r\n    LinkPage(Page: @1voting_view, PageParams: \"vID=#voting_id#\", Body: $@1voting$ ##voting_id#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_refunds_list, \"$@1voting$=_voting,$@1accounts$=_accounts,$@1description$=note,$@1validator_id$=validator_id,$@1blocked_at$=_blocked,$@1closed$=_closed,$@1result$=_result,$@1amount$=_amount,$@1status$=_status\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1tokens_refunds$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokens_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(back_page)==\"\"){\r\n    SetVar(Name: back_page, Value: \"@1members_list\")\r\n}\r\n\r\nForm(){\r\n    If(Or(#v_key_id#>0,#v_key_id#<0)){\r\n        SetVar(Name: v_address, Value: Address(#v_key_id#))\r\n    }.Else{\r\n        SetVar(Name: v_address, Value: \"\")\r\n    }\r\n    If(GetVar(v_amount)==\"\"){\r\n        SetVar(Name: v_amount, Value: \"\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label($@1sender$)\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            SetVar(m_a, Address(#key_id#))\r\n            Input(Name: Sender, Disabled: 1, Value: #m_a#)\r\n            Div(Class: m0 h6 text-muted, Body: $@1send_tokens_my_balance$)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label($@1recipient$)\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Recipient, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label($@1amount$)\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Amount, Type: Number, Value: #v_amount#)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1TokensSend).Alert(Text: \"$@1want_send_tokens$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "upload_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-12){\r\n            Input(Name: FileData, Type: file)\r\n        }\r\n    }\r\n    If(GetVar(app_id)==\"\"){\r\n        SetVar(app_id,)\r\n    }\r\n    If(GetVar(buffer_key)==\"\"){\r\n        SetVar(buffer_key,)\r\n    }\r\n    If(GetVar(file_name)==\"\"){\r\n        SetVar(file_name,)\r\n    }\r\n    If(#back_page_popup#==50){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n    }.ElseIf(#back_page_popup#==30){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n    }.ElseIf(Or(#back_page_popup#==40,#back_page_popup#==1)){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n    }.Else{\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\")\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(this_page,\"@1voting_create\")\r\n\r\nIf(GetVar(count_type_voters)==\"\"){\r\n    SetVar(count_type_voters,0)\r\n}\r\n\r\nForm(){\r\n    Div(list-group-item){\r\n        Div(row mb-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1vote_count_type)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                If(GetVar(count_type_voters)==0){\r\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary disabled mr-lg).Popup(50, $@1new_voting$)\r\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary).Popup(50, $@1new_voting$)                \r\n                    \r\n                }.ElseIf(GetVar(count_type_voters)==1){\r\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary mr-lg).Popup(50, $@1new_voting$)\r\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary disabled).Popup(50, $@1new_voting$)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For:type_decision){\r\n                    LangRes(@1decision)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                If(GetVar(count_type_voters)==0){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                    RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id)\r\n                }.ElseIf(GetVar(count_type_voters)==1){\r\n                    Data(numbers_type_decisions,\"value,name\"){\r\n                        3,$@1document$\r\n                        4,$@1database_write$\r\n                        5,$@1contract_run$\r\n                    }\r\n                    RadioGroup(Name: type_decision, Source: numbers_type_decisions, NameColumn: name, ValueColumn: value)\r\n                }.Else{\r\n                    Div(mt-sm text-warning){\r\n                        $@1please_select$ \"$@1vote_count_type$\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: type_participants){\r\n                    LangRes(@1participants)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\n                Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item){\r\n        Div(row mb-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For:voting_name){\r\n                    LangRes(@1name)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: voting_name, Value: \"New voting\")\r\n            }\r\n        }\r\n        Div(row mb-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: volume){\r\n                    LangRes(@1voting_volume)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: volume, Value: 75, Type: number)\r\n                Div(m0 h6 text-muted){\r\n                    If(GetVar(count_type_voters)==0){\r\n                        $@1voting_volume_desc$\r\n                    }.ElseIf(GetVar(count_type_voters)==1){\r\n                        $@1voting_volume_number_desc$\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SetVar(hide_quorum,)\r\n        If(GetVar(count_type_voters)==1){\r\n            SetVar(hide_quorum,\"hidden\")\r\n        }\r\n        Div(row mb-sm #hide_quorum#){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: quorum){\r\n                    LangRes(@1voting_quorum)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: quorum, Value: 51, Type: number)\r\n                Div(m0 h6 text-muted){\r\n                    $@1voting_quorum_desc$\r\n                }\r\n            }\r\n        }\r\n        Div(row mb-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: start_date){\r\n                    LangRes(@1date_start)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: start_date, Type: date)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: start_time, Type: time)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: end_date){\r\n                    LangRes(@1date_end)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: end_date, Type: date)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: end_time, Type: time)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }    \r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For:description){\r\n                    LangRes(@1description)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: description, Type: textarea)\r\n            }\r\n        }\r\n    }\r\n    Input(Name: voting_type, Type: hidden, Value: 1)\r\n    Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1voting_list, Contract: @1VotingCreate, Params: \"count_type_voters=#count_type_voters#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_candidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    If(GetVar(back_page)){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n    DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n    DBFind(@1votings_subject).Where({voting_id:#vID#, \"subject->member_id\":#key_id#}).Columns(\"id\").Vars(already_candidate)\r\n\r\n    If(#elective_roles_count#>0){\r\n        Form(){\r\n            SetVar(hidden,)\r\n            If(#already_candidate_id#>0){\r\n                SetVar(hidden,hidden)\r\n            }\r\n            Div(row mt-sm #hidden#){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1candidates))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(input-group){\r\n                        Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\r\n                        Div(input-group-btn){\r\n                            Button(Body: LangRes(@1apply), Class: btn btn-primary, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-sm-9 col-sm-offset-3){\r\n                    DBFind(@1votings_subject,src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                        Address(#subject.member_id#)\r\n                    }.Custom(_member){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n                            Span(Body: #subject.member_name#)\r\n                        }\r\n                    }\r\n                    Table(src_voting_subject, \"$@1candidates$=_member,=_address\")\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1role))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1vacancies))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_accept))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_reject))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt){\r\n                Div(col-md-12){\r\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                    Input(Name: memberID, Type: hidden, Value: 0)\r\n                    Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                    Div(pull-right){\r\n                        Button(Body: LangRes(@1save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(row){\r\n            Div(col-md-12 text-center h3){\r\n                P(LangRes(@1elective_roles_not_found))\r\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                    Span(Class: h3, Body: LangRes(@1create_role))\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_contract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    If(GetVar(back_page)){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\r\n    DBFind(@1votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(prefix_subject_contract_accept,)\r\n        SetVar(prefix_subject_contract_accept_params,)\r\n        SetVar(prefix_subject_contract_reject,)\r\n        SetVar(prefix_subject_contract_reject_params,)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1contract_accept)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1params))\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                Div(pull-right){\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_document",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    If(GetVar(back_page)){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(Name: prefix_subject_text, Value: \"\")\r\n    }\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-12 mt-sm){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1text_document))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                Div(pull-right){\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_election",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    If(GetVar(back_page)){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n\r\n    SetVar(candidates,0)\r\n    DBFind(@1votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n        SetVar(candidates,\"#candidates#,#subject.member_id#\")\r\n        Address(#subject.member_id#)\r\n    }.Custom(_member){\r\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n            Span(Body: #subject.member_name#)\r\n        }\r\n    }\r\n    DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#candidates#]}}).Columns(\"id\").Custom(_name){\r\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\r\n        Address(#id#)\r\n        If(Or(#m_id#>0,#m_id#<0)){\r\n            \" (#m_member_name#)\"\r\n        }\r\n    }\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Div(input-group){\r\n                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                        Div(input-group-btn){\r\n                            Button(Body: LangRes(@1add), Class: btn btn-primary, Page: @1voting_decision_election, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-sm-9 col-sm-offset-3){\r\n                    Table(src_subject, \"$@1candidates$=_member,=_address\")\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(count_roles)\r\n                    If(#count_roles#>0){\r\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }.Else{\r\n                        elected role is not found\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                Div(pull-right){\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_formal",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    If(GetVar(back_page)){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings,src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1votings_subject,src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(prefix_subject_description,)\r\n        SetVar(prefix_subject_table,)\r\n        SetVar(prefix_subject_table_id,)\r\n        SetVar(prefix_subject_column,)\r\n        SetVar(prefix_subject_column_value,)\r\n    }\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1table_to_written))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$@1table_to_written_desc$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1row_id))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$@1row_id_desc$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1column_name))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$@1column_name_desc$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1written_value))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$@1written_value_desc$\")\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-lg text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1description))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                Div(pull-right){\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectFormal)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_invite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# > 0){\r\n    Form(){\r\n        If(GetVar(back_page)){}.Else{\r\n            SetVar(back_page,@1voting_view)\r\n        }\r\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\r\n        SetVar(participants,#guest_key#)\r\n        DBFind(@1votings_participants, src_participants).Where({voting_id:#vID#}).Columns(\"id,member->member_id,member->member_name,member->role_id,member->member->member_id,member->member->member_name\").Count(participants_count).Custom(_id){\r\n            SetVar(participants,\"#participants#,#member.member_id#\")\r\n            Address(#member.member_id#)\r\n        }.Custom(_name){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\", Body: #member.member_name#)\r\n        }.Custom(_sent){\r\n            Role added to vote\r\n        }.Custom(_member_roles){\r\n            DBFind(@1roles).Columns(\"id,role_name,image_id\").WhereId(#member.role_id#).Vars(rl)\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                If(#rl_image_id#>0){\r\n                    Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                    #rl_role_name#\r\n                }.Else{\r\n                    Div(){\r\n                        Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n                    }.Style(display:flex; align-items:center;)\r\n                }\r\n            }\r\n        }\r\n        If(#participants_count#>0){\r\n            Div(list-group-item){\r\n                If(#instance_voting_type_participants# == 5){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\r\n                }.ElseIf(#instance_voting_type_participants# == 4){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\r\n                }.Else{\r\n                    Table(src_participants, \"$@1member$=_name,=_id\")\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                If(#instance_voting_type_participants# == 1){\r\n                }\r\n                If(#instance_voting_type_participants# == 2){\r\n                    Label(){\r\n                        LangRes(@1select_member)\r\n                        Span(*, text-danger)\r\n                    }\r\n                    DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#participants#]}}).Columns(\"id\").Count(keys_count).Custom(_name){\r\n                        SetVar(m_member_name,)\r\n                        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\r\n                        Address(#id#)\r\n                        If(Or(#m_id#>0,#m_id#<0)){\r\n                            \" (#m_member_name#)\"\r\n                        }\r\n                    }\r\n                    If(#keys_count#>0){\r\n                        Select(Name: var_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                    }.Else{\r\n                        Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_keys_added$\")\r\n                    }\r\n                }\r\n                If(#instance_voting_type_participants# == 3){\r\n                    Label(){\r\n                        LangRes(@1select_role)\r\n                        Span(*, text-danger)\r\n                    }\r\n                    DBFind(@1roles, src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\")\r\n                    Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                }\r\n                If(Or(#instance_voting_type_participants# == 4,#instance_voting_type_participants# == 5)){\r\n                    Div(row){\r\n                        Div(col-md-12){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1select_role))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                            DBFind(@1roles, src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\")\r\n                            Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-md-12){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                If(#instance_voting_type_participants# == 2){\r\n                    If(#keys_count#>0){\r\n                        Button(Body: LangRes(@1add_member), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\r\n                    }\r\n                }.ElseIf(#instance_voting_type_participants# > 2){\r\n                    Button(Body: LangRes(@1add_role), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_list).(this_table, @1votings)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_list$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1votings_list_desc$\"))\r\nAddToolButton(Title: $@1templates_list$, Page: @1voting_templates_list, Icon: fa icon-pin)\r\nAddToolButton(Title: $@1create$, Page: @1voting_create, Icon: icon-plus).Popup(50, $@1new_voting$)\r\nIf(EcosysParam(Name:founder_account)==#key_id#){\r\n    Div(btn-group ml-lg){\r\n        Button(Body: Em(Class: fa fa-refresh) $@1update_votings_statuses$, Class: btn bg-gray ml-sm, Page: #this_page#, Contract: @1VotingStatusUpdate)\r\n    }\r\n}\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where, {ecosystem:#ecosystem_id#, \"voting->name\":{\"$like\":#search#}, deleted:0})\r\n}.Else{\r\n    SetVar(where, {ecosystem:#ecosystem_id#, deleted:0}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1voting))\r\n    Include(@1search)\r\n}\r\n\r\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status,voting->count_type_voters,voting->volume,progress->number_voters\").Count(count_votings).Custom(_id){\r\n    Span(Class: h5, Body: #id#)\r\n}.Custom(_name){\r\n    LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\r\n        Span(Class: h5 text-bold m0, Body: #voting.name#)\r\n    }\r\n}.Custom(_subject){\r\n    SetVar(decision, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #decision#\r\n        }.Else{\r\n            If(#voting.type_decision# == 1){\r\n                SetVar(link_page,\"@1voting_decision_candidates\")\r\n            }.ElseIf(#voting.type_decision# == 2){\r\n                SetVar(link_page,\"@1voting_decision_election\")\r\n            }.ElseIf(#voting.type_decision# == 3){\r\n                SetVar(link_page,\"@1voting_decision_document\")\r\n            }.ElseIf(#voting.type_decision# == 4){\r\n                SetVar(link_page,\"@1voting_decision_formal\")\r\n            }.ElseIf(#voting.type_decision# == 5){\r\n                SetVar(link_page,\"@1voting_decision_contract\")\r\n            }\r\n            Button(Body: #decision#, Class: btn btn-link, Page: #link_page#, PageParams: \"vID=#id#,back_page=#this_page#\").Popup(50, $@1subject_voting$)\r\n        }\r\n    }\r\n}.Custom(_participants){\r\n    SetVar(participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #participants#\r\n        }.Else{\r\n            Button(Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\", Class: btn btn-link p0 text-bold, Body: #participants#).Popup(45, $@1participants_add$)\r\n        }\r\n    }\r\n}.Custom(_creator){\r\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\", Body: #creator.member_name#)\r\n}.Custom(_date){\r\n    SetVar(started_class,text-center text-bold h5 m0).(finished_class,text-center text-bold h5 m0)\r\n    If(Or(#status#==#STARTED#,#status#==#FINISHED#)){\r\n        SetVar(started_class,text-center text-muted h5 m0)\r\n    }\r\n    If(#status#==#FINISHED#){\r\n        SetVar(finished_class,text-center text-muted h5 m0)\r\n    }\r\n    P(Class: #started_class#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    P(Class: #finished_class#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(_type){\r\n    Div(h6 m0 p0){\r\n        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #voting.type#) /\r\n        If(#voting.count_type_voters#==1){\r\n            $@1number_votes$\r\n        }.Else{\r\n            $@1percent_votes$\r\n        }\r\n    }\r\n}.Custom(_progress){\r\n    Div(text-center h5 text-bold){\r\n        If(#voting.count_type_voters#==1){\r\n            #progress.number_voters# / #progress.number_participants#\r\n        }.Else{\r\n            #progress.percent_success# %\r\n        }\r\n    }\r\n}.Custom(_decision){\r\n    Div(text-center){\r\n        If(#flags.decision# == 0){\r\n            If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\r\n                Button(Body: LangRes(@1decision), Class: btn btn-primary, Contract: @1VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\r\n            }.Else{\r\n                Div(text-muted){LangRes(@1no)}\r\n            }\r\n        }.ElseIf(#flags.decision# == -2){\r\n            Div(text-muted){LangRes(@1not_enough_votes)}\r\n        }.ElseIf(#flags.decision# == 1){\r\n            Div(text-success){LangRes(@1accepted)}\r\n        }.ElseIf(#flags.decision# == -1){\r\n            Div(text-danger){LangRes(@1rejected)}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#status#))\r\n    Div(text-center #status_class#){\r\n        If(#status#==#STARTED#){\r\n            Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\r\n        }.Else{\r\n            AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses, Index:#status#)\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\r\n            Button(Class: fa fa-trash btn btn-default, Contract: @1VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: \"$@1want_delete_voting$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1voting$=_name,$@1type$=_type,$@1subject_voting$=_subject,$@1participants$=_participants,$@1date_start$ / $@1date_end$=_date,$@1creator$=_creator,$@1progress$=_progress,$@1decision$=_decision,$@1status$=_status,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1votings$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, 0)\r\nSetVar(title,\"New voting\").(typevoting,0).(volume,50).(quorum,51).(subj,).(voters,).(candidates,).(vacancies,1).(contract_init,).(contract_accept,).(accept_params,).(contract_reject,).(reject_params,)\r\nIf(#TemplateId#>0){\r\n    DBFind(@1voting_templates).WhereId(#TemplateId#).Vars(template)\r\n    SetVar(title, #template_title#)\r\n    SetVar(typevoting, #template_type_voting#)\r\n    SetVar(volume, #template_volume#)\r\n    SetVar(subj, #template_subject#)\r\n    SetVar(quorum, #template_quorum#)\r\n    SetVar(voters, #template_voters#)\r\n    SetVar(candidates, #template_candidates#)\r\n    SetVar(vacancies, #template_vacancies#)\r\n    SetVar(contract_init, #template_init_contract#)\r\n    SetVar(contract_accept, #template_contract_accept#)\r\n    SetVar(accept_params, #template_accept_params#)\r\n    SetVar(contract_reject, #template_contract_reject#)\r\n    SetVar(reject_params, #template_reject_params#)\r\n    If(GetVar(CountTypeVoters)==\"\"){\r\n        SetVar(CountTypeVoters, #template_count_type_voters#)\r\n    }\r\n}\r\n\r\nIf(#TypeDecision#>0){\r\n    SetVar(typedec,#TypeDecision#)\r\n}.Else{\r\n    SetVar(typedec,0)\r\n}\r\nIf(#TypeParticipants#>0){\r\n    SetVar(typepart,#TypeParticipants#)\r\n}.Else{\r\n    SetVar(typepart,0)\r\n}\r\n\r\nSetVar(col_right,\"col-sm-8 mb-sm text-left\")\r\nSetVar(col_right_nob,\"col-sm-8 text-left\")\r\nSetVar(col_left,\"col-sm-4 mt-sm text-right\")\r\n\r\nSetVar(this_page,@1voting_template_create)\r\nIf(GetVar(CountTypeVoters)==\"\"){\r\n    SetVar(CountTypeVoters,0)\r\n}\r\n\r\nForm(){\r\n    If(#typedec#>0){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: TypeParticipants){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    If(GetVar(CountTypeVoters)==0){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\r\n                    }.ElseIf(GetVar(CountTypeVoters)==1){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\r\n                    }\r\n                    Input(Name: CountTypeVoters, Type: hidden, Value: #CountTypeVoters#)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: TypeDecision){\r\n                        LangRes(@1decision)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right_nob#){\r\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #typedec#))\r\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\r\n                    Input(Name: TypeDecision, Type: hidden, Value: #typedec#)\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: TypeParticipants){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                If(#typepart#==3){\r\n                     SetVar(col_right_n1, #col_right#)\r\n                }.Else{\r\n                    SetVar(col_right_n1, #col_right_nob#)\r\n                }\r\n                Div(#col_right_n1#){\r\n                    SetVar(var_type_voting_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #typepart#))\r\n                    Input(Name: InputTypeVotingParticipants, Disabled: 1, Value: #var_type_voting_participants#)\r\n                    Input(Name: TypeParticipants, Type: hidden, Value: #typepart#)\r\n                }\r\n            }\r\n            If(#typepart#==3){\r\n                Div(row){\r\n                    Div(#col_left#){\r\n                        Label(For: Voters){\r\n                            LangRes(@1voters_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(#col_right_nob#){\r\n                        DBFind(@1roles,src_roles1).Where({ecosystem:#ecosystem_id#, deleted:0}).Order(id).Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Voters, Source: src_roles1, NameColumn: name, ValueColumn: id, Value: #voters#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: Title){\r\n                        LangRes(@1name)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    Input(Name: Title, Value: #title#)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: TypeVoting){\r\n                        LangRes(@1voting_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Source: src_typevoting)\r\n                    Select(Name: TypeVoting, Source: src_typevoting, NameColumn: name, ValueColumn: id, Value: #typevoting#)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: Volume){\r\n                        LangRes(@1voting_volume)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    Input(Name: Volume, Type: number, Value: #volume#).Validate(minLength: 1)\r\n                    InputErr(Name: Volume, minLength: Please enter Volume)\r\n                    If(GetVar(CountTypeVoters)==0){\r\n                        P(Class: m0 h6 text-muted, Body: $@1voting_volume_desc$)\r\n                    }.ElseIf(GetVar(CountTypeVoters)==1){\r\n                        P(Class: m0 h6 text-muted, Body: $@1voting_volume_number_desc$)\r\n                    }\r\n                }\r\n            }\r\n            SetVar(hide_quorum,)\r\n            If(GetVar(CountTypeVoters)==1){\r\n                SetVar(hide_quorum,\"hidden\")\r\n            }\r\n            Div(row #hide_quorum#){\r\n                Div(#col_left#){\r\n                    Label(For: Quorum){\r\n                        LangRes(@1voting_quorum)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    Input(Name: Quorum, Type: number, Value: #quorum#).Validate(minLength: 1)\r\n                    InputErr(Name: Quorum, minLength: Please enter Quorum)\r\n                    P(Class: m0 h6 text-muted, Body: $@1voting_quorum_desc$)\r\n                }\r\n            }\r\n            If(Or(#typedec#==1,#typedec#==2)){\r\n                SetVar(col_right_n2, #col_right#)\r\n            }.Else{\r\n                SetVar(col_right_n2, #col_right_nob#)\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: Subject){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(#col_right_n2#){\r\n                    Input(Name: Subject, Value: #subj#)\r\n                }\r\n            }\r\n            If(Or(#typedec#==1,#typedec#==2)){\r\n                Div(row){\r\n                    Div(#col_left#){\r\n                        Label(For: Vacancies){\r\n                            LangRes(@1vacancies)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(#col_right#){\r\n                        Input(Name: Vacancies, Value: #vacancies#, Type: number)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(#col_left#){\r\n                        Label(For: Candidates){\r\n                            LangRes(@1candidates_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(#col_right_nob#){\r\n                        DBFind(@1roles,src_roles2).Where({role_type:2, ecosystem:#ecosystem_id#, deleted:0}).Order(id).Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Candidates, Source: src_roles2, NameColumn: name, ValueColumn: id, Value: #candidates#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: InitContract){\r\n                        LangRes(@1voting_init_contract)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    Input(Name: InitContract, Value: #contract_init#)\r\n                    P(Class: m0 h6 text-muted, Body: $@1voting_init_contract_desc$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: ContractAccept){\r\n                        LangRes(@1voting_contract_accept)\r\n                    }\r\n                }\r\n                Div(#col_right#){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: ContractAccept, Placeholder: $@1contract$, Value: #contract_accept#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: ParamsAccept, Placeholder: $@1arguments$, Value: #accept_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(#col_left#){\r\n                    Label(For: ContractReject){\r\n                        LangRes(@1voting_contract_reject)\r\n                    }\r\n                }\r\n                Div(#col_right_nob#){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: ContractReject, Placeholder: $@1contract$, Value: #contract_reject#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: ParamsReject, Placeholder: $@1arguments$, Value: #reject_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1voting_templates_list, Contract: @1VotingTemplateCreate)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#\").Popup(50, $@1voting_template_create$)\r\n    }.Else{\r\n        Div(row){\r\n            Div(#col_left#){\r\n                Label(){\r\n                    LangRes(@1vote_count_type)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(#col_right#){\r\n                If(GetVar(CountTypeVoters)==0){\r\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary disabled mr-lg).Popup(50, $@1voting_template_create$)\r\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary).Popup(50, $@1voting_template_create$)    \r\n                }.ElseIf(GetVar(CountTypeVoters)==1){\r\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary mr-lg).Popup(50, $@1voting_template_create$)\r\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary disabled).Popup(50, $@1voting_template_create$)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-sm-4 mt-lg mb-lg text-right){\r\n                Label(For: #name#){\r\n                    LangRes(@1decision)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(#col_right#){\r\n                If(GetVar(CountTypeVoters)==0){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                    RadioGroup(Name: TypeDecision, Value: #template_type_decision#, Source: procent_type_decisions, ValueColumn: id, NameColumn: name)\r\n                }.ElseIf(GetVar(CountTypeVoters)==1){\r\n                    Data(numbers_type_decisions,\"value,name\"){\r\n                        3,$@1document$\r\n                        4,$@1database_write$\r\n                        5,$@1contract_run$\r\n                    }\r\n                    RadioGroup(Name: TypeDecision, Value: #template_type_decision#, Source: numbers_type_decisions, ValueColumn: value, NameColumn: name)\r\n                }.Else{\r\n                    Div(mt-lg mb-lg text-warning){\r\n                        $@1please_select$ \"$@1vote_count_type$\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(#col_left#){\r\n                Label(For: #name#){\r\n                    LangRes(@1participants)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(#col_right#){\r\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: src_typepart)\r\n                Select(Name: TypeParticipants, Source: src_typepart, NameColumn: name, ValueColumn: id, Value: #template_type_participants#)\r\n            }\r\n        }\r\n\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right mt, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants),CountTypeVoters=#CountTypeVoters#\").Popup(50, $@1voting_template_create$)\r\n        If(#TemplateId#>0){\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_templates_list)\r\n        }   \r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_start",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetTitle($@1voting_start$)\r\n\r\nSetVar(col_left,\"col-md-4 text-right\")\r\nSetVar(col_left_for_input,\"col-md-4 mt-sm text-right\")\r\nSetVar(col_right,\"col-md-8 text-left\")\r\nSetVar(col_right_for_input,\"col-md-8 mb-sm text-left\")\r\n\r\nIf(#TemplateId#>0){\r\n    DBFind(@1voting_templates).WhereId(#TemplateId#).Vars(template)\r\n\r\n    SetVar(v_role,).(c_role,)\r\n    If(#template_voters#>0){\r\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#template_voters#}).Columns(\"role_name\").Vars(vid)\r\n        SetVar(v_role, \"#vid_role_name#\")\r\n    }\r\n    If(#template_candidates#>0){\r\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#template_candidates#}).Columns(\"role_name\").Vars(cid)\r\n        SetVar(c_role, \"#cid_role_name#\")\r\n    }\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: $@1voting$, Page: @1voting_list)\r\n        Span(/, mh)\r\n        LinkPage(Body: $@1voting_templates$, Page: @1voting_templates_list)\r\n        Span(/,mh)\r\n        Span($@1voting_start$, text-muted)\r\n    }\r\n\r\n    If(#TemplateId#>0){\r\n        Div(row){\r\n            Div(col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading){LangRes(@1voting_params)}\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1template_id))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_id#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1name))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_title#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1vote_count_type))\r\n                            }\r\n                            Div(#col_right#){\r\n                                If(#template_count_type_voters#==0){\r\n                                    $@1percent_votes$\r\n                                }.ElseIf(#template_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1participants))\r\n                            }\r\n                            Div(#col_right#){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_type))\r\n                            }\r\n                            SetVar(type_class,)\r\n                            If(#template_type_voting# == 2){\r\n                                SetVar(type_class,\"text-warning\")\r\n                            }\r\n                            Div(#col_right# #type_class#){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #template_type_voting#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1decision))\r\n                            }\r\n                            Div(#col_right#){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_volume))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_volume#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_quorum))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_quorum#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_subject))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_subject#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voters))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #v_role#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1candidates))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #c_role#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1vacancies))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_vacancies#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1init_contract))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_init_contract#\r\n                            }\r\n                        }\r\n\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_contract_accept))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_contract_accept#\r\n                                If(`#template_accept_params#`!=\"\"){\r\n                                    (#template_accept_params#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(#col_left#){\r\n                                Strong(LangRes(@1voting_contract_reject))\r\n                            }\r\n                            Div(#col_right#){\r\n                                #template_contract_reject#\r\n                                If(`#template_reject_params#`!=\"\"){\r\n                                    (#template_reject_params#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#template_type_voting# != 2){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(#col_left_for_input#){\r\n                                    Label(For: Duration){\r\n                                        LangRes(@1duration)\r\n                                    }\r\n                                }\r\n                                Div(#col_right_for_input#){\r\n                                    Input(Name: Duration, Type: number, Value: 3)\r\n                                }\r\n                            }\r\n                            If(#template_type_decision#==3){\r\n                                Div(row){\r\n                                    Div(#col_left_for_input#){\r\n                                        Label(For: TextDocument){\r\n                                            LangRes(@1text_document)\r\n                                        }\r\n                                    }\r\n                                    Div(#col_right_for_input#){\r\n                                        Input(Name: TextDocument, Type: textarea)\r\n                                    }\r\n                                }\r\n                            }.ElseIf(#template_type_decision#==4){\r\n                                If(#template_type_voting#==2){\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: ColumnName){\r\n                                                LangRes(@1system_param)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: ColumnName)\r\n                                        }\r\n                                    }\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: NewValue){\r\n                                                LangRes(@1value)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: NewValue)\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: TableWritten){\r\n                                                LangRes(@1table_to_written)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: TableWritten)\r\n                                        }\r\n                                    }\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: RowId){\r\n                                                LangRes(@1row_id)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: RowId, Type: number)\r\n                                        }\r\n                                    }\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: ColumnName){\r\n                                                LangRes(@1column_name)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: ColumnName)\r\n                                        }\r\n                                    }\r\n                                    Div(row){\r\n                                        Div(#col_left_for_input#){\r\n                                            Label(For: NewValue){\r\n                                                LangRes(@1value)\r\n                                                Span(*,text-danger)\r\n                                            }\r\n                                        }\r\n                                        Div(#col_right_for_input#){\r\n                                            Input(Name: NewValue)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_templates_list)\r\n                        Div(pull-right){\r\n                            Button(Class: fa fa-copy btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\").Popup(50, $@1voting_template_create$)\r\n                            If(#template_type_voting# == 2){\r\n                                Button(Body: LangRes(@1voting_start), Class: btn btn-primary disabled)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1voting_start), Class: btn btn-primary, Page: @1voting_list, Contract: @1VotingTemplateRun, Params: \"TemplateId=#TemplateId#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_templates_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_templates_list).(this_table, @1voting_templates)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_templates$\")\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1votings$, Page: @1voting_list)\r\n    Span(Class: text-muted mh, Body: /)\r\n    Span(Class: text-muted, Body: $@1voting_templates$)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nIf(GetVar(search)){\r\n    SetVar(where,{ecosystem:#ecosystem_id#, \"title\":{\"$like\":#search#}})\r\n}.Else{\r\n    SetVar(where,{ecosystem:#ecosystem_id#, \"id\":{\"$gt\":0}}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1template))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\r\nDBFind(#this_table#).Where({ecosystem:#ecosystem_id#}).Count(all_templates_count)\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_participants){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_participants, Index: #type_participants#)\r\n}.Custom(_decision){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_decisions, Index: #type_decision#)\r\n}.Custom(_type){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting, Index: #type_voting#)\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        Button(Class: btn btn-default fa fa-eye, Page: @1voting_template_start, PageParams: \"TemplateId=#id#\")\r\n    }\r\n}.Custom(_contracts){\r\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\r\n        Div(){#init_contract#}\r\n    }\r\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\r\n        Div(){#contract_accept#}\r\n    }\r\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\r\n        Div(){#contract_reject#}\r\n    }\r\n}.Custom(_vq){\r\n    #volume#/#quorum#\r\n}.Custom(_vacancies){\r\n    If(#vacancies#>0){\r\n        #vacancies#\r\n    }\r\n}.Count(count)\r\n\r\nIf(Or(#count#>0,#ecosystem_id#>1)){\r\n    AddToolButton(Title: $@1create$, Page: @1voting_template_create, Icon: icon-plus).Popup(50, $@1voting_template_create$)\r\n}\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1template$=title,$@1voting_subject$=subject,$@1voting_volume$ / $@1voting_quorum$=_vq,$@1voting_type$=_type,$@1participants$=_participants,$@1decision$=_decision,$@1vacancies$=_vacancies,$@1contracts$=_contracts,=_actions\")\r\n            }.ElseIf(#all_templates_count# > 0){\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1voting_templates_not_found$\")\r\n            }.ElseIf(#ecosystem_id# == 1){\r\n                Form(Class: text-center h6){\r\n                    Data(autofill, \"value,description\"){\r\n                        yes,$@1use_default_voting_templates$\r\n                        no,$@1select_default_templates_manually$\r\n                    }\r\n                    RadioGroup(Name: fill_ids, Source: autofill, NameColumn: description, ValueColumn: value).Style(line-height: 20px;)\r\n                    Button(Body: $@1install_default_templates$, Class: btn btn-primary, Page: @1voting_templates_list, Contract: @1VotingTemplatesInstall)\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\r\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\r\nSetVar(this_page,\"@1voting_view\")\r\n\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type_participants,voting->type,voting->count_type_voters,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status\").Vars(instance)\r\n        SetVar(type_decision,#instance_voting_type_decision#)\r\n        SetVar(type_participants,#instance_voting_type_participants#)\r\n\r\n        SetVar(isVotingAllowed,0)\r\n        SetVar(isStartProcessing,0)\r\n        If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3,#type_participants#==4)){\r\n            DBFind(@1votings_participants).Where({voting_id:#vID#,\"member->member_id\":#key_id#, decision:0, ecosystem: #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"recipient->member_id\":#key_id#, page_name:#this_page#, \"page_params->voting_id\": #vID#, closed:0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#type_participants#==5){\r\n            DBFind(@1votings_participants).Where({voting_id:#vID#,\"member->role_id\":#role_id#, decision:0, ecosystem: #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(@1notifications).Where({{\"$or\":[{\"date_start_processing\": \"$isnull\"}, {\"processing_info->member_id\": #key_id#}]}, \"ecosystem\":#ecosystem_id#, \"recipient->role_id\":#role_id#, \"page_name\":#this_page#, \"page_params->voting_id\": #vID#, \"closed\":0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        SetTitle($@1voting_view$: #instance_voting_name#)\r\n        Div(breadcrumb){\r\n            LinkPage(Body: $@1voting_list$, Page: @1voting_list)\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: ##instance_id#)\r\n        }\r\n\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-primary){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\r\n                            }\r\n                        }\r\n                        If(`#instance_voting_description#`!=\"\"){\r\n                            Div(row){\r\n                                Div(col-md-6 text-right){\r\n                                    Div(Class: t5 text-muted m0, Body: LangRes(@1description))\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        Div(row t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1vote_count_type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }.Else{\r\n                                    $@1percent_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#type_decision#==1,#type_decision#==2,#type_decision#==3,#type_decision#==4)){\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(@1yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(@1no))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#type_decision#==1,#type_decision#==2)){\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1role)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#instance_optional_role_id#}).Columns(\"id,role_name\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(@1id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1vacancies)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1candidates)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: #instance_optional_number_candidates#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                                Address(#subject.member_id#)\r\n                            }.Custom(_member){\r\n                                LinkPage(Class: text-primary t5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n                                    #subject.member_name#\r\n                                }\r\n                            }.Custom(_voting){\r\n                                If(#isStartProcessing#==1){\r\n                                    Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                }.Else{\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Button(Body: LangRes(@1vote), Class: btn btn-success, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingCandidateAccept, Params: \"CandidateID=#subject.member_id#,RoleId=#role_id#\")\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#type_decision#==1){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(50, $@1subject_voting$)\r\n                                        }\r\n                                        If(#type_decision#==2){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(50, $@1subject_voting$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==3){\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text,subject->hash\").Vars(subject)\r\n                            Div(row t5 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(@1empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(@1subject_voting_edit))\r\n                                        }.Popup(50, $@1subject_voting$)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==4){\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Vars(subject)\r\n\r\n                            If(#instance_voting_type#==1){\r\n                                Div(row t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1table_to_written)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(row t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1row_id)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table_id#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    If(#instance_voting_type#==1){\r\n                                        LangRes(@1column_name)\r\n                                    }.Else{\r\n                                        LangRes(@1parameter_name)\r\n                                    }\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    Span(Body: LangRes(@1written_value))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column_value#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1description)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        If(#subject_subject_description# == \"\"){\r\n                                            Span(Class:text-muted, Body: LangRes(@1optional))\r\n                                        }.Else{\r\n                                            #subject_subject_description#\r\n                                        }\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(@1subject_voting_edit))\r\n                                        }.Popup(50, $@1subject_voting$)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==5){\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject\").Vars(subject)\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(@1subject_voting_edit))\r\n                                        }.Popup(50, $@1subject_voting$)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center t5){\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\r\n                                Div(#status_class#){\r\n                                    AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses, Index:#instance_status#)\r\n                                }\r\n\r\n                                If(#instance_flags_full_data#==0){\r\n                                    Div(text-muted){LangRes(@1not_filled)}\r\n                                }\r\n                                If(#instance_progress_number_participants#==0){\r\n                                    Div(text-muted){LangRes(@1not_participants)}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(@1not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(@1rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(@1no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(@1accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_start)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\r\n                                SetVar(date_started_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_started_class#){\r\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_end)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(#instance_status#==#FINISHED#){\r\n                                SetVar(date_ended_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_ended_class#){\r\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_volume)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_volume#\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            If(#instance_voting_count_type_voters# != 1){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voting_quorum)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #instance_voting_quorum#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1participants)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                DBFind(@1votings_participants, src_voting_participants).Where({voting_id:#vID#, ecosystem: #ecosystem_id#}).Order(\"id\").Columns(\"id,member->member_id,member->role_id,decision_date,decision,voting_id\").Custom(_address){\r\n                                    DBFind(@1votings).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\r\n                                    If(Or(#type_voting_type_participants# == 4,#type_voting_type_participants# == 5)){\r\n                                        DBFind(@1roles).Columns(\"id,role_name\").WhereId(#member.role_id#).Vars(rl)\r\n                                        LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                                            Span(Class: fa icon-eye mr-sm).(#rl_role_name#)\r\n                                        }.Style(display:flex; align-items:center;)\r\n                                    }.Else{\r\n                                        Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                    }\r\n                                }.Custom(_voter){\r\n                                    DBFind(@1votings).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\r\n                                    If(#type_voting_type_participants# == 4){\r\n                                        Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                    }\r\n                                    If(#type_voting_type_participants# == 5){\r\n                                        If(#decision#!=0){\r\n                                            Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                        }\r\n                                    }\r\n                                }.Custom(_decision){\r\n                                    If(#decision#==0){\r\n                                        LangRes(@1did_not_vote)\r\n\r\n                                    }.ElseIf(Or(#type_decision#==1,#type_decision#==2)){\r\n                                        Div(Class: text-success text-center, Body: $@1vote_for_candidate$:)\r\n                                        Div(Class: text-success text-center, Body: Address(#decision#))\r\n                                        Div(Class: text-success text-center, Body: $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n\r\n                                    }.ElseIf(#type_decision#==3){\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $@1document_accepted$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $@1document_rejected$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n\r\n                                    }.ElseIf(#type_decision#==4){\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $@1decision_accepted$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $@1decision_rejected$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n\r\n                                    }.ElseIf(#type_decision#==5){\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $@1contract_accepted$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $@1contract_rejected$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Table(src_voting_participants, \"=_address,=_voter,=_decision\")\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-12){\r\n                                If(#instance_voting_type#==1){\r\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\r\n                                        Button(Class: btn btn-link text-bold, Page: @1voting_invite, PageParams: \"vID=#vID#\"){\r\n                                            LangRes(@1participants_add)\r\n                                        }.Popup(50, $@1participants_add$)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row t4){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                LangRes(@1voted)\r\n                            }\r\n                            Div(col-md-5){\r\n                                LangRes(@1progress)\r\n                            }\r\n                        }\r\n                        If(graph_work==\"good\"){\r\n                            Div(row text-muted t6 text-center){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    LangRes(@1voting_graph_voted)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    LangRes(@1voting_graph_progress)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row text-center t3){\r\n                            If(#instance_voting_count_type_voters# == 1){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    #instance_progress_number_voters# LangRes(@1voters) / #instance_voting_volume# LangRes(@1voters)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    #instance_progress_percent_success#% LangRes(@1success) / 100% LangRes(@1total)\r\n                                }\r\n                            }.Else{\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    #instance_progress_number_voters# LangRes(@1voters) / #instance_progress_percent_voters#% LangRes(@1voters)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    #instance_progress_percent_success#% LangRes(@1success) / 100% LangRes(@1total)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TokensLockoutMember",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensLockoutMember {\r\n    data {\r\n        KeyId int\r\n        Value int\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1VotingTokensRefundCreate\", \"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1BlockMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            error LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        getPermission()\r\n        \r\n        if !DBFind(\"@1keys\").Where({ecosystem:1, id:$KeyId}).One(\"id\"){\r\n            error LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($Value) < 0 || Int($Value) > 1 {\r\n            error LangRes(\"@1value_between_0_and_1\", \"en\")      \r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1keys\", $KeyId, {\"blocked\": $Value})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferManager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n    \r\n    func decodeArray(s string) array {\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") {\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n    \r\n    action {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, key:$Key, member_id:$key_id}).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, key:$Key, value:$emptyVal, member_id:$key_id})\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"member_id\"] = Str($key_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n        var id int\r\n        id = Int($buf[\"id\"])\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$emptyVal})\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$Val})\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar = Append(ar, $Val)\r\n            enc = JSONEncode(ar)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array i int enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i < Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew = Append(arNew, ar[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n            enc = JSONEncode(arNew)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "BufferFileUpload",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferFileUpload {\r\n    data {\r\n        AppId int\r\n        BufferKey string\r\n        FileName string \"optional\"\r\n        FileData file\r\n    }\r\n\r\n    conditions {\r\n        var app_id int\r\n        app_id = DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, id: $AppId, deleted:0}).One(\"id\")    \r\n        if !app_id {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        if $BufferKey == \"\" {\r\n            warning LangRes(\"@1buffer_key_empty\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var buffer_data map\r\n        if $FileName != \"\" {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Name,Data,ApplicationId\", $FileName, $FileData, Int($AppId))\r\n        } else {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Data,ApplicationId\", $FileData, Int($AppId))\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $BufferKey, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessCheck {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$rid}).Columns(\"id,role_name,deleted,roles_access,role_type,creator->member_id\").Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: \" + LangRes(\"@1role_not_found\", \"en\"), $this_contract)\r\n        }\r\n\r\n        if role[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var rids array\r\n        rids = JSONDecode(role[\"roles_access\"])\r\n        if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":{\"$in\":rids}, \"member->member_id\":$key_id, deleted:0}).Row() {\r\n        // if !RoleAccess(...rids){\r\n            warning Sprintf(LangRes(\"@1role_change_no_permission\", \"en\"), role[\"role_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesUnassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map roleId int\r\n        assigned = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, id:$row_id, deleted:0 }).Columns(\"id,role->id\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1role_participant_not_found\", \"en\")\r\n        }\r\n        var buffer_id int\r\n        buffer_id = Int(assigned[\"role.id\"])\r\n        roleId = Int(DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:buffer_id}).One(\"id\"))\r\n        if roleId == 0 {\r\n            warning LangRes(\"@1role_not_found_in_registry\", \"en\")\r\n        }\r\n\r\n        var specialRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specialRules[\"@1VotingValidatorAccept\"] = 1\r\n        specialRules[\"@1DelegateRefresh\"] = 1\r\n        specialRules[\"@1CandidateValidatorRequest\"] = 1\r\n        specialRules[\"@1InvestorRefresh\"] = 1\r\n        specialRules[\"@1VotingTokensRefundCreate\"] = 1\r\n        specialRules[\"@1sysparams_ValidatorResign\"] = 1\r\n\r\n        if specialRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"rid\", roleId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = BlockTime()\r\n        DBUpdate(\"@1roles_participants\", $row_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAssign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $role = DBFind(\"@1roles\").Where({id:$rid}).Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Row()\r\n        if (Int($role[\"role_type\"]) == 2){\r\n            warning LangRes(\"@1elective_role_voting_only\", \"en\")\r\n        }\r\n        if !$role {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$member_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n\r\n        if $role[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1role_deleted_request_impossible\", \"en\")\r\n        }\r\n\r\n        var specRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specRules[\"@1VotingValidatorAccept\"] = 1\r\n        specRules[\"@1DelegateRefresh\"] = 1\r\n        specRules[\"@1CandidateValidatorRequest\"] = 1\r\n        specRules[\"@1VotingTemplateRun\"] = 1\r\n        specRules[\"@1VotingTokensRefundCreate\"] = 1\r\n        specRules[\"@1VotingValidatorCreate\"] = 1\r\n        specRules[\"@1VotingParamCreate\"] = 1\r\n        if specRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"rid\", $rid)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$rid, \"member->member_id\":$member_id, deleted:0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointer map\r\n        role[\"id\"] = $role[\"id\"]\r\n        role[\"type\"] = $role[\"role_type\"]\r\n        role[\"name\"] = $role[\"role_name\"]\r\n        role[\"image_id\"] = $role[\"image_id\"]\r\n\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n        var m map\r\n        m[\"role\"] = role\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = BlockTime()\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1roles_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeleteMember",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DeleteMember {\r\n    data {\r\n        KeyId int\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1DeleteMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            error LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\")\r\n\r\n        getPermission()\r\n        \r\n        if !DBFind(\"@1keys\").Where({ecosystem:1, id:$KeyId}).One(\"id\"){\r\n            error LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1keys\", $KeyId, {\"deleted\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "FormStateSave",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract FormStateSave {\r\n    data {\r\n        FormName string\r\n        ParamNames string\r\n        Param1 string \"optional\"\r\n        Param2 string \"optional\"\r\n        Param3 string \"optional\"\r\n        Param4 string \"optional\"\r\n        Param5 string \"optional\"\r\n        Param6 string \"optional\"\r\n        Param7 string \"optional\"\r\n        Param8 string \"optional\"\r\n        Param9 string \"optional\"\r\n        Param10 string \"optional\"\r\n        Param11 string \"optional\"\r\n        Param12 string \"optional\"\r\n        Param13 string \"optional\"\r\n        Param14 string \"optional\"\r\n        Param15 string \"optional\"\r\n        Param16 string \"optional\"\r\n        Param17 string \"optional\"\r\n        Param18 string \"optional\"\r\n        Param19 string \"optional\"\r\n        Param20 string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $FormName == \"\" {\r\n            warning LangRes(\"@1form_state_name_needed\", \"en\")\r\n        }\r\n        if $ParamNames == \"\" {\r\n            warning LangRes(\"@1form_state_param_names_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var values string\r\n        values = $Param1+\";\"+$Param2+\";\"+ $Param3+\";\"+ $Param4+\";\"+ $Param5+\";\"+ $Param6+\";\"+$Param7+\";\"+$Param8+\";\"+$Param9+\";\"+$Param10+\";\"+$Param11+\";\"+$Param12+\";\"+$Param13+\";\"+ $Param14+\";\"+ $Param15+\";\"+ $Param16+\";\"+$Param17+\";\"+$Param18+\";\"+$Param19+\";\"+$Param20\r\n        $ParamValue = Split(values, \";\")\r\n        $ParamName = Split($ParamNames, \";\")\r\n        var buffer_data map, i int\r\n        i = 0\r\n        while i < Len($ParamName) {\r\n            buffer_data[$ParamName[i]] = $ParamValue[i]\r\n            i = i + 1\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $FormName, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CandidateValidatorRequest {\r\n    data {\r\n        HostIp string\r\n        // CommissionPub string\r\n        CommissionAddress string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    func isNotValidIp(ip string) bool {\r\n        var parts array\r\n        var i, lenParts, part int\r\n        parts = Split(ip, \".\")\r\n\r\n        lenParts = Len(parts)\r\n        if lenParts != 4{\r\n            return true\r\n        }\r\n        while i < lenParts {\r\n            part = Int(parts[i])\r\n            if part < 0{\r\n                return true\r\n            }\r\n            if part > 255{\r\n                return true\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n        $CommissionAddress = AddressToId($CommissionAddress)\r\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$CommissionAddress}).Row(){\r\n            warning LangRes(\"@1address_invalid\", \"en\")\r\n        }\r\n\r\n        if isNotValidIp($HostIp){\r\n            warning LangRes(\"@1enter_valid_ip\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var roleParam string roleId int\r\n        roleParam = \"role_candidate_for_validators\"\r\n        roleId = Int(EcosysParam(roleParam))\r\n\r\n        if !DBFind(\"@1roles\").Where({ecosystem:1, id:roleId, deleted:0}).One(\"id\"){\r\n            warning Sprintf(LangRes(\"@1role_app_param_not_found\", \"en\"), roleParam)\r\n        }\r\n        \r\n        @1RolesAssign(\"rid,member_id\", roleId, $key_id)\r\n        //no $ecosystem_id\r\n        var m map\r\n        m[\"host_ip\"] = $HostIp\r\n        m[\"commission_pub\"] = \"\"\r\n        m[\"commission_address\"] = $CommissionAddress\r\n        m[\"description\"] = $Description\r\n        m[\"comment\"] = $Comment\r\n        m[\"candidate_key_id\"] = $key_id\r\n        m[\"date_created\"] = BlockTime()\r\n        m[\"deleted\"] = 0\r\n        DBInsert(\"@1sysparams_candidate\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipAdd",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipAdd {\r\n    data {\r\n        memberskeys string\r\n    }\r\n\r\n    func addPub(pub_key string) {\r\n        if HasPrefix(pub_key, \"04\") {\r\n            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)\r\n        }\r\n        if Size(pub_key) < 128 {\r\n            error LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub_key) > 128 {\r\n            error LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var k_id int\r\n        k_id = PubToID(pub_key)\r\n        if k_id == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        $check_user = DBFind(\"@1keys\").Where({id:k_id, ecosystem:$ecosystem_id})\r\n        if $check_user {\r\n            error LangRes(\"@1key_already_exists\", \"en\")\r\n        }\r\n\r\n        DBInsert(\"@1keys\",{id:k_id, pub:pub_key, ecosystem:$ecosystem_id})\r\n    }\r\n\r\n    conditions {\r\n        if $memberskeys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $memberskeys = Replace($memberskeys, \" \", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\n\", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\r\", \"\")\r\n\r\n        var admin_id int\r\n        admin_id = EcosysParam(\"role_admin\")\r\n       \r\n        if !RoleAccess(Int(admin_id)) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if ($ecosystem_id == 1) {\r\n            error LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Contains($memberskeys, \",\") {\r\n            var pub_array array\r\n            pub_array = Split($memberskeys, \",\")\r\n\r\n            var i int\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($memberskeys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsProcess",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsProcess {\r\n    data {\r\n        notific_id int\r\n    }\r\n    \r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2{\r\n            if $notify[\"date_start_processing\"] != \"\" {\r\n                warning LangRes(\"@1notification_processing_started_already\", \"en\")\r\n            }\r\n            var rid string\r\n            rid = Int($notify[\"recipient.role_id\"])\r\n            if rid > 0{\r\n                if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\r\n                    warning LangRes(\"@1notification_not_part_of_role\", \"en\")\r\n                }\r\n            }\r\n        }else{\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var model map\r\n        model[\"processing_info\"] = getMemberInfo($key_id)\r\n        model[\"date_start_processing\"] = BlockTime()\r\n        DBUpdate(\"@1notifications\", $notific_id, model)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsSend {\r\n    data {\r\n        member_id int \"optional\"\r\n        rid int \"optional\"\r\n        closure_type int \"optional\"\r\n\r\n        sender int\r\n        icon_name string \"optional\"\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map string // json encoded expected\r\n        current_role_id string \"optional\"\r\n        eco_id string \"optional\"\r\n        popup string \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(kid, ecoId int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:ecoId, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"@1keys\").Where({ecosystem:ecoId, id:kid}).Columns(\"id\").Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    func sendNotify(recipient map) {\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n        if $popup == \"true\" || $popup == \"1\" {\r\n            notification[\"popup\"] = 1\r\n        }else{\r\n            notification[\"popup\"] = 0\r\n        }\r\n        var sender map\r\n        if $sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $sender\r\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        }else{\r\n            if $sender == 2 && $senderRole{\r\n                // send from role\r\n                sender[\"type\"] = $sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n        var model map\r\n        model[\"recipient\"] = recipient\r\n        model[\"sender\"] = sender\r\n        model[\"notification\"] = notification\r\n        model[\"page_name\"] = $page_name\r\n        model[\"page_params\"] = $params_map\r\n        model[\"date_created\"] = BlockTime()\r\n        model[\"ecosystem\"] = $eco_id\r\n        DBInsert(\"@1notifications\", model)\r\n    }\r\n\r\n    func sendToRole(roleId, ecoId int) {\r\n        var role recipient map\r\n        role = DBFind(\"@1roles\").Where({ecosystem:ecoId, id:roleId}).Row()\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        $member_id = Int($member_id)\r\n        $rid = Int($rid)\r\n        $current_role_id = Int($current_role_id)\r\n        $eco_id = Int($eco_id)\r\n        if $eco_id == 0{\r\n            $eco_id = $ecosystem_id\r\n        }\r\n        if Size($icon_name) < 1{\r\n            $icon_name = \"icon-envelope\"\r\n        }\r\n        if $member_id != 0 {\r\n            if !DBFind(\"@1keys\").Where({ecosystem:$eco_id, id:$member_id}).Row(){\r\n                warning LangRes(\"@1key_not_found\", \"en\")\r\n            }\r\n            $notify_type = 1 // is \"member\"\r\n        }elif $rid > 0{\r\n            $notify_type = 2 // is \"role\"\r\n            if !DBFind(\"@1roles\").Where({ecosystem:$eco_id, id:$rid}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n            if !DBFind(\"@1roles_participants\").Where({ecosystem:$eco_id, \"role->id\":$rid, deleted:0}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_no_members\", \"en\")\r\n            }\r\n        } else{\r\n            warning $this_contract + \": \" + LangRes(\"@1notification_type_not_defined\", \"en\")\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $sender == 1 {\r\n            $senderMember = getMemberInfo($key_id, $ecosystem_id)\r\n        }elif $sender == 2 {\r\n            $senderRole = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$current_role_id}).Row()\r\n            if !$senderRole {\r\n                warning $this_contract + \": \" + LangRes(\"@1sender_role_not_found\", \"en\")\r\n            }\r\n        }else{\r\n            warning $this_contract + \": \" + LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $member_id != 0 {\r\n            sendNotify(getMemberInfo($member_id, $eco_id))\r\n            UpdateNotifications($eco_id, Int($member_id))\r\n        }elif $rid > 0 {\r\n            if $closure_type == 1 {\r\n                // Single closure: one begins the process - the others do not see\r\n                sendToRole($rid, $eco_id)\r\n                UpdateRolesNotifications($eco_id, Int($rid))\r\n            } else {\r\n                // Multiple closure: to each his own notification\r\n                $notify_type = 1\r\n                var participants array\r\n                participants = DBFind(\"@1roles_participants\").Where({ecosystem:$eco_id, \"role->id\":$rid, deleted:0}).Columns(\"member->member_id\")\r\n                var i int\r\n                while i < Len(participants) {\r\n                    var p map\r\n                    p = participants[i]\r\n                    sendNotify(getMemberInfo(Int(p[\"member.member_id\"]), $eco_id))\r\n                    UpdateNotifications($eco_id, Int(p[\"member.member_id\"]))\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MetricsUpdate {\r\n    data {\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n    \r\n    func mapping(items array) map {\r\n        var mapout map, i int\r\n        while i < Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i = i + 1\r\n        }\r\n        return mapout\r\n    }\r\n    \r\n    conditions {\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = Int(Substr(BlockTime(), 0, 4))\r\n        if $Interval > (current_year - 1970) * 365 {\r\n            warning LangRes(\"@1interval_too_big\", \"en\")\r\n        }\r\n        $interval = Sprintf(LangRes(\"@1x_days\", \"en\"), $Interval)\r\n    }\r\n\r\n    action {\r\n        var pages members txs array metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n\r\n        var i lenPages int\r\n        lenPages = Len(pages)\r\n        while i < lenPages{\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(LangRes(\"@1pages\", \"en\") + \": %v, \" + LangRes(\"@1members\", \"en\") + \": %v, \" + LangRes(\"@1tx\", \"en\") + \": %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i = i + 1\r\n        }\r\n\r\n        if lenPages > 0{\r\n            @1BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NodeRemoveByKey {\r\n    data {}\r\n    \r\n    func nodesRemove(keyId int) array {\r\n        var nodesJSON string nodes res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res = Append(res, node)\r\n            }\r\n            i = i + 1\r\n        }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        if $original_contract != \"ValidatorResign\"{\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var nodes array fullNodes string\r\n        nodes = nodesRemove($key_id)\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsBroadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsBroadcast {\r\n    data {\r\n        RoleId int\r\n        Header string\r\n        Body string\r\n        Popup string \"optional\"\r\n    }\r\n    \r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"@1keys\").Columns(\"id\").Where({ecosystem:$ecosystem_id, id:kid}).Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        if $RoleId !=1 {\r\n            error LangRes(\"@1admin_only_action\", \"en\")\r\n        }\r\n        if $ecosystem_id != 1 {\r\n            error LangRes(\"@1first_ecosystem_admin_only_action\", \"en\")\r\n        }\r\n        $ecos = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        $lenEcos = Len($ecos)\r\n        if $lenEcos == 1 {\r\n            error LangRes(\"@1other_ecosystems_not_found\", \"en\")\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var i lenIds int eco map ids array bt string sender recipient params note map\r\n        bt = BlockTime()\r\n        sender = getMemberInfo($key_id)\r\n        sender[\"type\"] = 1\r\n        note[\"header\"] = $Header\r\n        note[\"type\"] = 1\r\n        note[\"icon\"] = \"icon-envelope\"\r\n        note[\"body\"] = $Body\r\n        if $Popup == \"true\" || $Popup == \"1\" {\r\n            note[\"popup\"] = 1\r\n        }else{\r\n            note[\"popup\"] = 0\r\n        }\r\n        \r\n        while i < $lenEcos{\r\n            eco = $ecos[i]\r\n            var ecoId int\r\n            ecoId = Int(eco[\"id\"])\r\n            if ecoId != 1 {\r\n                var adminRoleId int\r\n                adminRoleId = Int(DBFind(\"@1parameters\").Where({ecosystem:ecoId, name:\"role_admin\"}).One(\"value\"))\r\n                ids = DBFind(\"@1roles_participants\").Where({ecosystem:ecoId, \"role->id\":adminRoleId, \"role->type\":3}).Columns(\"member->member_id\")\r\n                lenIds = Len(ids)\r\n                var i_ids int\r\n                while i_ids < lenIds{\r\n                    recipient = ids[i_ids]\r\n                    recipient = getMemberInfo(Int(recipient[\"member.member_id\"]))\r\n                    var m map\r\n                    m[\"recipient\"] = recipient\r\n                    m[\"sender\"] = sender\r\n                    m[\"notification\"] = note\r\n                    m[\"page_name\"] = \"@1notifications_show\"\r\n                    m[\"page_params\"] = params\r\n                    m[\"date_created\"] = bt\r\n                    m[\"ecosystem\"] = ecoId\r\n                    DBInsert(\"@1notifications\", m)\r\n                    i_ids = i_ids + 1\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsClose",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsClose {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    func getPermission() int {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1VotingDecisionCheck\", \"@1VotingDelete\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"id,date_start_processing,processing_info->member_id,closed,notification->type,recipient->member_id,recipient->role_id\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        // checking the type of notification\r\n        if $notify[\"notification.type\"] != 1 && $notify[\"notification.type\"] != 2 {\r\n            warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n        }\r\n\r\n        // getting permission\r\n        var flag_permission int\r\n        flag_permission = getPermission()\r\n\r\n        // checking single notification\r\n        if $notify[\"notification.type\"] == 1 && flag_permission == 0 {\r\n            if $notify[\"recipient.member_id\"] != $key_id {\r\n                warning LangRes(\"@1notification_another_member\", \"en\")\r\n            }\r\n        }\r\n\r\n        // checking role notification\r\n        if $notify[\"notification.type\"] == 2 && flag_permission == 0 {\r\n            if $notify[\"date_start_processing\"] == \"\" {\r\n                warning LangRes(\"@1notification_processing_not_started\", \"en\")\r\n            }\r\n\r\n            if $notify[\"processing_info.member_id\"] != $key_id {\r\n                warning LangRes(\"@1notice_processing_started_another_member\", \"en\")\r\n            }     \r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"closed\"] > 0 {\r\n            return\r\n        }\r\n        if $notify[\"notification.type\"] == 1 {\r\n            @1NotificationsProcess(\"notific_id\", $notific_id)\r\n        }\r\n        var m map\r\n        m[\"date_closed\"] = BlockTime()\r\n        m[\"closed\"] = 1\r\n        DBUpdate(\"@1notifications\", $notific_id, m)\r\n\r\n        if $notify[\"notification.type\"] == 1 {\r\n            UpdateNotifications($ecosystem_id, Int($notify[\"recipient.member_id\"]))\r\n        } else {\r\n            UpdateRolesNotifications($ecosystem_id, Int($notify[\"recipient.role_id\"]))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipDecide {\r\n    data {\r\n        notific_id int\r\n        accept int\r\n    }\r\n\r\n    conditions {\r\n        $request = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id,page_params->ecosystem_sender\").Row()\r\n        var ecoId int\r\n        ecoId = Int($request[\"page_params.ecosystem_id\"])\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning LangRes(\"@1request_processed_already\", \"en\")\r\n        }\r\n\r\n        var admin_id int\r\n        admin_id = EcosysParam(\"role_admin\")\r\n        if !RoleAccess(Int(admin_id)) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if $accept == 1 {\r\n            params[\"status\"] = 1\r\n            var pub string mid eco_id int\r\n            mid = Int($request[\"sender.member_id\"])\r\n            eco_id = Int($request[\"page_params.ecosystem_id\"])\r\n            pub = DBFind(\"@1keys\").Where({ecosystem:1, id:mid}).One(\"pub\") \r\n            DBInsert(\"@1keys\", {id:mid, pub:pub, ecosystem:$ecosystem_id})\r\n        }\r\n        else{\r\n            params[\"status\"] = 0\r\n        }\r\n\r\n        var icon header body page ecoName ecoId string\r\n        ecoId = $request[\"page_params.ecosystem_id\"]\r\n        ecoName = DBFind(\"@1ecosystems\").Where({id:ecoId}).One(\"name\")\r\n        icon = \"icon icon-user-follow\"\r\n        header = LangRes(\"@1request_approved\", \"en\")\r\n        body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, ecoId)\r\n        page = \"@1membership_user_view\"\r\n\r\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $request[\"sender.member_id\"], 1, icon, header, body, page, params, Int($request[\"page_params.ecosystem_sender\"]))\r\n        @1NotificationsProcess(\"notific_id\", $notific_id)\r\n        @1NotificationsClose(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipRequest {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n\r\n        if $ecosystem_num == 1 {\r\n            warning LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1ecosystems\").Where({id:$ecosystem_num}).One(\"id\"){\r\n            error Sprintf(LangRes(\"@1template_eco_not_exist\", \"en\"), $ecosystem_num)\r\n        }\r\n\r\n        if DBFind(\"@1keys\").Where({id:$key_id, ecosystem:$ecosystem_num}) {\r\n            warning LangRes(\"@1member_added_before\", \"en\")\r\n        }\r\n\r\n        $free_membership = Int(DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_num, name:\"free_membership\"}).One(\"value\"))\r\n        if $free_membership == 0 {\r\n            if DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_num, \"page_params->ecosystem_id\":$ecosystem_num, \"sender->member_id\":$key_id, closed:0, page_name:\"@1membership_admin_view\"}).Row(){\r\n                warning LangRes(\"@1request_sent_already\", \"en\")\r\n            }\r\n\r\n            $admin_id = Int(DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_num, name:\"role_admin\"}).One(\"value\"))\r\n            if $admin_id == 0 { \r\n                warning LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $free_membership == 0 {\r\n            var notific_params map\r\n            notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n            notific_params[\"ecosystem_sender\"] = $ecosystem_id\r\n\r\n            @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type,eco_id\", $admin_id, 1, \"icon icon-user-follow\", LangRes(\"@1membership_request_new\", \"en\"), LangRes(\"@1details_view\", \"en\"), \"@1membership_admin_view\", notific_params,1,$ecosystem_num)\r\n        }\r\n        if $free_membership == 1 {\r\n            var pub string\r\n            pub = DBFind(\"@1keys\").Where({ecosystem:1, id:$key_id}).One(\"pub\") \r\n            DBInsert(\"@1keys\", {id:$key_id, pub:pub, ecosystem:$ecosystem_num})\r\n\r\n            var params map\r\n            params[\"ecosystem_id\"] = $ecosystem_num\r\n            params[\"status\"] = 1\r\n\r\n            var icon header body page ecoName string\r\n            ecoName = DBFind(\"@1ecosystems\").Where({id:$ecosystem_num}).One(\"name\")\r\n            icon = \"icon icon-user-follow\"\r\n            header = LangRes(\"@1request_approved\", \"en\")\r\n            body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, $ecosystem_num)\r\n            page = \"@1membership_user_view\"\r\n\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $key_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEdit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ProfileEdit {\r\n    data {\r\n        member_name string\r\n        information string \"optional\"\r\n        image_id string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\r\n        $app_id = DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\")\r\n        $image_id = Int($image_id)\r\n\r\n        if !$member {\r\n            // check member_name\r\n            if DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, member_name:$member_name}).One(\"id\") {\r\n                warning LangRes(\"@1member_name_taken\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $image_id > 0 {\r\n            $Data = DBFind(\"@1binaries\").Where({ecosystem:$ecosystem_id, id:$image_id}).One(\"data\")\r\n            $image_id = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $Data, Int($app_id))\r\n        }\r\n\r\n        var m map\r\n        m[\"member_info\"] = {information:$information}\r\n        m[\"image_id\"] = $image_id\r\n        \r\n        if $member{\r\n            DBUpdate(\"members\", $key_id, m)\r\n        } else {\r\n            m[\"id\"] = $key_id\r\n            m[\"member_name\"] = $member_name\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"members\", m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEditAvatar",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ProfileEditAvatar {\r\n    data {\r\n        member_image file\r\n    }\r\n\r\n    conditions {\r\n        $app_id = DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\")\r\n        \r\n        if !$app_id {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"image_id\"] = @1UploadFile(\"Name,Data,ApplicationId\", \"new_avatar\", $member_image, Int($app_id))\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", \"avatar\", JSONEncode(m))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RoleConditions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RoleConditions {\r\n    data {\r\n        role string\r\n    }\r\n    \r\n    conditions {\r\n        if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->name\":$role, \"member->member_id\":$key_id, deleted:0}).Row() {\r\n            warning Sprintf(LangRes(\"@1x_role_only_action\", \"en\"), $role)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CandidateValidatorDelete {\r\n    data {\r\n        Id int\r\n    }\r\n    \r\n    conditions {\r\n        var candidateId roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"sysparams_candidate\").Where({ecosystem:$ecosystem_id, id:$Id}).One(\"candidate_key_id\")\r\n\r\n        $role = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":roleId, \"member->member_id\":candidateId}).Row()\r\n        if !$role {\r\n            warning LangRes(\"@1candidate_role_not_found\", \"en\")\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"sysparams_candidate\", $Id, {deleted:1})\r\n        @1RolesUnassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n    }\r\n    \r\n    func updateAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        DBUpdate(\"@1roles\", $Rid, {\"roles_access\": roles_access})\r\n    }\r\n    \r\n    func updateBufferAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\", \"value\": roles_access})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": roles_access})\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $Rid > 0 {\r\n            @1RolesAccessCheck(\"rid\", $Rid)\r\n\r\n            $role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$Rid}).Columns(\"id,roles_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1role_not_found\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"roles_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Rid == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $Action == \"clean\" {\r\n            updateAccess([])\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int, idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DelegateRefresh {\r\n    data {}\r\n    \r\n    func notInArray(val string, arr array) bool {\r\n        var i int\r\n        // info arr\r\n        while i < Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n    \r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n    \r\n    conditions {\r\n        MainCondition()\r\n        var roleId int\r\n        roleId = getRoleId(\"role_delegate\")\r\n\r\n        $role = DBFind(\"@1roles\").Where({id:roleId, deleted:0}).Row()\r\n        if !$role{\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\r\n        ecosystems = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"@1parameters\").Where({name:\"delegate_account\", ecosystem:ecoId}).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"@1parameters\").Where({name:\"founder_account\", ecosystem:ecoId}).Row()\r\n            }\r\n\r\n            if notInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        rid = Int($role[\"id\"])\r\n        currentDelegates = DBFind(\"@1roles_participants\").Where({\"role->id\":rid, deleted:0}).Columns(\"id,member->member_id\")\r\n        var delegate map id int\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            delegate = currentDelegates[i]\r\n            if notInArray(delegate[\"member.member_id\"], delegateIds){\r\n                id = Int(delegate[\"id\"])\r\n                @1RolesUnassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        var key map delegateId int\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            delegateId = Int(delegateIds[i])\r\n            key = DBFind(\"@1keys\").WhereId(delegateId).Row()\r\n            if key {\r\n                // check role dup\r\n                if !DBFind(\"@1roles_participants\").Where({\"member->member_id\":delegateId, \"role->id\":rid, deleted:0}).Row(){\r\n                    @1RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesCreate {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n    }\r\n    \r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        // system role\r\n        if $role_type == 3 {\r\n            warning LangRes(\"@1system_role_can_not_create\", \"en\")\r\n        }\r\n\r\n        // check role_creates_roles\r\n        $role_creates_roles = Int(EcosysParam(\"role_creates_roles\"))\r\n        if $role_creates_roles != 0 {\r\n            if !RoleAccess($role_creates_roles) {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var roles_access_arr array, buffer map\r\n        buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\r\n        if buffer {\r\n            roles_access_arr = JSONDecode(buffer[\"value\"])\r\n            DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": \"[]\"})\r\n        }\r\n        roles_access_arr = Append(roles_access_arr, 1)\r\n\r\n        var m map\r\n        m[\"creator\"] = getMemberInfo($key_id)\r\n        m[\"role_name\"] = $role_name\r\n        m[\"role_type\"] = $role_type\r\n        m[\"date_created\"] = BlockTime()\r\n        m[\"roles_access\"] = JSONEncode(roles_access_arr)\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        $result = DBInsert(\"@1roles\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract InvestorRefresh {\r\n    data {\r\n        RoleId int\r\n    }\r\n\r\n    func notInArray(val string, arr array) bool {\r\n        var i lenArr int\r\n        lenArr = Len(arr)\r\n        while i < lenArr{\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n\r\n    func getParamInt(id int, name string) int {\r\n        var param int\r\n        param = Int(AppParam(id, name, 1))\r\n        if param == 0{\r\n            warning Sprintf(LangRes(\"@1application_parameter_not_set\", \"en\"), name)\r\n        }\r\n        return param\r\n    }\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\r\n        if appId == 0{\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n\r\n        var roleValidatorId roleInvestorId string\r\n\r\n        roleValidatorId = getRoleId(\"role_validator\")\r\n        if !RoleAccess(roleValidatorId) {\r\n            warning LangRes(\"@1not_validator_can_not_run\", \"en\")\r\n        }\r\n\r\n        roleInvestorId = getRoleId(\"role_investor_with_voting_rights\")\r\n        $roleId = Int(DBFind(\"@1roles\").Where({id:roleInvestorId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0{\r\n            warning LangRes(\"@1investor_role_not_found_or_removed\", \"en\")\r\n        }\r\n\r\n        $limitInvestors = getParamInt(appId, \"investors_number\")\r\n    }\r\n\r\n    action {\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id}).Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"@1roles_participants\").Where({\"role->id\":$roleId, deleted:0}).Columns(\"member->member_id\")\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i = 0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        var assigned map mid string\r\n        i = 0\r\n        while i < Len(assignedIds) {\r\n            if notInArray(assignedIds[i], investorsIds){\r\n                mid = assignedIds[i]\r\n                assigned = DBFind(\"@1roles_participants\").Where({\"member->member_id\":mid, \"role->id\":$roleId}).Row()\r\n                if assigned {\r\n                    @1RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // add new investors\r\n        i = 0\r\n        while i < Len(investorsIds) {\r\n            if notInArray(investorsIds[i], assignedIds){\r\n                var id int\r\n                id = Int(investorsIds[i])\r\n                if DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:id}).Row(){\r\n                    @1RolesAssign(\"rid,member_id\", $roleId, id)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesInstall",
            "Conditions": "false",
            "Value": "contract RolesInstall {\r\n    data {}\r\n\r\n    func addRole(name string, withParticipant bool, managerId int) int{\r\n        var m param map paramName string id int\r\n        m[\"role_name\"] = name\r\n        m[\"role_type\"] = 3\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        id = Int(DBFind(\"@1roles\").Where(m).One(\"id\"))\r\n        if id == 0 {\r\n            m[\"default_page\"] = \"\"\r\n            m[\"deleted\"] = 0\r\n            m[\"creator->image_id\"] = 0\r\n            m[\"creator->member_name\"] = \"founder\"\r\n            m[\"creator->member_id\"] = Str($key_id)\r\n            m[\"date_created\"] = BlockTime()\r\n            if managerId > 0{\r\n                m[\"roles_access\"] = Sprintf(\"[%v]\", managerId)\r\n            }else{\r\n                m[\"roles_access\"] = \"[]\"\r\n            }\r\n            id = DBInsert(\"@1roles\", m)\r\n        }\r\n        paramName = \"role_\" + Replace(ToLower(name), \" \", \"_\")\r\n        param = Int(EcosysParam(paramName))\r\n        if param == 0{\r\n            @1NewParameter(\"Name,Value,Conditions\", paramName, id, \"ContractConditions(\\\"MainCondition\\\")\")\r\n        }\r\n\r\n        if withParticipant {\r\n            var participant map\r\n            participant[\"role->id\"] = id\r\n            participant[\"role->type\"] = m[\"role_type\"]\r\n            participant[\"role->name\"] = m[\"role_name\"]\r\n            participant[\"role->image_id\"] = 0\r\n            participant[\"member->member_id\"] = Str($key_id)\r\n            participant[\"member->member_name\"] = \"founder\"\r\n            participant[\"member->image_id\"] = 0\r\n            participant[\"ecosystem\"] = $ecosystem_id\r\n\r\n            if !DBFind(\"@1roles_participants\").Where(participant).One(\"id\"){\r\n                participant[\"date_created\"] = BlockTime()\r\n                DBInsert(\"@1roles_participants\", participant)\r\n            }\r\n        }\r\n        return id\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        var managerId int\r\n        managerId = addRole(\"Admin\", true, 0)\r\n        @1RolesAccessManager(\"Action,Rid,ManagerRid\", \"add\", managerId, managerId)\r\n        addRole(\"Developer\", true, managerId)\r\n\r\n        if $ecosystem_id == 1{\r\n            addRole(\"Apla Consensus asbl\", false, managerId)\r\n            addRole(\"Candidate for validators\", false, managerId)\r\n            addRole(\"Validator\", false, managerId)\r\n            addRole(\"Investor with voting rights\", false, managerId)\r\n            addRole(\"Delegate\", false, managerId)\r\n        }\r\n        var role_creates_roles string\r\n        role_creates_roles = EcosysParam(\"role_creates_roles\")\r\n        if !role_creates_roles {\r\n            @1NewParameter(\"Name,Value,Conditions\", \"role_creates_roles\", 0, \"ContractConditions(\\\"MainCondition\\\")\")\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequest {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1roles\").WhereId($rid).One(\"id\") {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\r\n            warning LangRes(\"@1role_you_added_already\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1roles_request_view\", \"page_params->rid\":$rid, \"sender->member_id\":$key_id, closed:0}).One(\"id\") {\r\n            warning LangRes(\"@1request_sent_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"rid\"] = $rid\r\n\r\n        var member_id int\r\n        member_id = EcosysParam(\"founder_account\")\r\n\r\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", member_id, 1, \"fa-bars\", LangRes(\"@1roles\", \"en\"), LangRes(\"@1new_request_received\", \"en\"), \"roles_request_view\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequestDecision",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequestDecision {\r\n    data {\r\n        decision int\r\n        notific_id int\r\n        rid int \"optional\"\r\n        member_id int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n    }\r\n\r\n    action {\r\n        if ($decision == 1){\r\n            @1RolesAssign(\"rid,member_id\", $rid, $member_id)\r\n        }\r\n\r\n        if ($notific_id > 0){\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRestore",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRestore {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1roles\", $rid, {deleted:0})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesDelete {\r\n    data {\r\n        rid int\r\n        ops string\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"id\")\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1RolesUnassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n        var m map\r\n        if $ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = BlockTime()\r\n        }\r\n        if $ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1roles\", $rid, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BlockMember",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract BlockMember {\r\n    data {\r\n        KeyId int\r\n        Value int\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\") \r\n    }\r\n\r\n    action {\r\n        @1TokensLockoutMember(\"KeyId,Value\", $KeyId, $Value)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensTransfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensTransfer {\r\n    data {\r\n        Amount money\r\n        SenderId int\r\n        RecipientId int\r\n        Comment string \"optional\"\r\n        Ecosystem int \"optional\"\r\n    }\r\n\r\n    func getEcosystem() {\r\n        $e_id = Int($Ecosystem)\r\n        if $e_id == 0 {\r\n            $e_id = $ecosystem_id\r\n        } else {\r\n            if !DBFind(\"@1ecosystems\").Where({id:$e_id}).One(\"id\") {\r\n                error Sprintf(LangRes(\"@1ecosystem_not_found\", \"en\"), $e_id)\r\n            }\r\n        }    \r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1PoaTokensSend\", \"@1TokensRefund\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            error LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkSender() {\r\n        var sender_map map\r\n        sender_map = DBFind(\"@1keys\").Where({ecosystem:$e_id, id:$SenderId}).Row()\r\n\r\n        if !sender_map {\r\n            error Sprintf(LangRes(\"@1sender_x_invalid\", \"en\"), $SenderId)\r\n        }\r\n        if Int(sender_map[\"blocked\"]) != 0 {\r\n            error LangRes(\"@1sender_blocked\", \"en\")\r\n        }\r\n        if Int(sender_map[\"deleted\"]) != 0 {\r\n            error LangRes(\"@1sender_deleted\", \"en\")\r\n        }\r\n        if Money(sender_map[\"amount\"]) < $Amount {\r\n            error LangRes(\"@1amount_less_than_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkRecipient() {\r\n        var recipient_map map\r\n        recipient_map = DBFind(\"@1keys\").Where({ecosystem:$e_id, id:$RecipientId}).Row()\r\n\r\n        if !recipient_map {\r\n            error Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $RecipientId)\r\n        }\r\n        if Int(recipient_map[\"blocked\"]) != 0 {\r\n            error LangRes(\"@1recipient_blocked\", \"en\")\r\n        }\r\n        if Int(recipient_map[\"deleted\"]) != 0 {\r\n            error LangRes(\"@1recipient_deleted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getEcosystem()    //getting an ecosystem number\r\n        getPermission()   //getting permission to run\r\n        checkSender()     //check the sender\r\n        checkRecipient()  //check the recipient\r\n        \r\n        //check amount\r\n        if $Amount == 0 {\r\n            error LangRes(\"@1amount_zero\", \"en\")\r\n        }\r\n        if $Amount < 0 {\r\n            error LangRes(\"@1amount_less_zero\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var table_name string\r\n        table_name = \"@\" + Str($e_id) + \"keys\"\r\n        DBUpdate(table_name, $SenderId, {\"-amount\": $Amount})\r\n        DBUpdate(table_name, $RecipientId, {\"+amount\": $Amount})\r\n\r\n        var m map\r\n        m[\"sender_id\"] = $SenderId\r\n        m[\"recipient_id\"] = $RecipientId\r\n        m[\"amount\"] = $Amount\r\n        m[\"comment\"] = $Comment\r\n        m[\"block_id\"] = $block\r\n        m[\"txhash\"] = $txhash\r\n        m[\"ecosystem\"] = $e_id\r\n        m[\"type\"] = 3\r\n        m[\"created_at\"] = $block_time\r\n        DBInsert(\"@1history\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefund {\r\n    data {\r\n        SenderId int\r\n        RecipientId int\r\n        Amount money\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1TokensRefundAccept\"{\r\n            error LangRes(\"@1contract_start_tokensrefundaccept_only\", \"en\")\r\n        }\r\n\r\n        $amount = Money($Amount)\r\n        if $amount <= 0 {\r\n            error LangRes(\"@1amount_less_equal_zero\", \"en\")\r\n        }\r\n        \r\n        $RecipientId = Int($RecipientId)\r\n        $SenderId = Int($SenderId)\r\n        var sender map\r\n        sender = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$SenderId}).Row()\r\n        if !sender{\r\n            error LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$RecipientId}).Row(){\r\n            error LangRes(\"@1recipient_invalid\", \"en\")\r\n        }\r\n        if sender[\"blocked\"] == 1 {\r\n            error LangRes(\"@1sender_blocked\", \"en\")\r\n        }\r\n        if sender[\"amount\"] < $amount {\r\n            error Sprintf(LangRes(\"@1sender_amount_not_enough\", \"en\"), sender[\"amount\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", $amount, $SenderId, $RecipientId, \"Refund tokens\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundReject {\r\n    data {\r\n        Id string\r\n    }\r\n    func closeNotes() {\r\n        var notes array\r\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            @1NotificationsClose(\"notific_id\", noteId)\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\"{\r\n            error LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n        \r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokens_refund\").Where({\"id\":$Id}).Row()\r\n        if !$tokenrefund{\r\n            error LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $victimId = Int($tokenrefund[\"victim_key_id\"])\r\n        $attackerId = Int($tokenrefund[\"attacker_key_id\"])\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n    }\r\n\r\n    action {\r\n        closeNotes()\r\n\r\n        // status - 0. Accounts blocked, 1. Discussion, 2. Vote, 3. Closed\r\n        // result - 0. Discussion and voting, 1. Cancelled, 2. Tokens returned\r\n        if $tokenrefund[\"result\"] == 1 || $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3 {\r\n            return\r\n        }\r\n        \r\n        TokensLockoutMember(\"KeyId,Value\", $victimId, 0)\r\n        TokensLockoutMember(\"KeyId,Value\", $attackerId, 0)\r\n\r\n        DBUpdate(\"tokens_refund\", $Id, {status:3, result:1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundAccept {\r\n    data {\r\n        Id string\r\n    }\r\n    func closeNotes() {\r\n        var notes array\r\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            @1NotificationsClose(\"notific_id\", noteId)\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\"{\r\n            error LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokens_refund\").Where({\"id\":$Id}).Row()\r\n        if !$tokenrefund {\r\n            error LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $victimId = Int($tokenrefund[\"victim_key_id\"])\r\n        $attackerId = Int($tokenrefund[\"attacker_key_id\"])\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n    }\r\n\r\n    action {\r\n        closeNotes()\r\n\r\n        // status - 0. Accounts blocked, 1. Discussion, 2. Vote, 3. Closed\r\n        // result - 0. Discussion and voting, 1. Cancelled, 2. Tokens returned\r\n        if $tokenrefund[\"result\"] == 1 || $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3 {\r\n            return\r\n        }\r\n\r\n        TokensLockoutMember(\"KeyId,Value\", $victimId, 0)\r\n        TokensLockoutMember(\"KeyId,Value\", $attackerId, 0)\r\n        \r\n        TokensRefund(\"SenderId,RecipientId,Amount\", $attackerId, $victimId, $amount)\r\n        DBUpdate(\"tokens_refund\", $Id, {status:3, result:2})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensSend {\r\n    data {\r\n        Amount money\r\n        Recipient string\r\n        Comment string \"optional\"\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1TsKeyApprove\", \"@1TsTransferSeller\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            error LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()\r\n\r\n        $recipient_id = AddressToId($Recipient)\r\n        if $recipient_id == 0 {\r\n            error Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $Recipient)\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", $Amount, $key_id, $recipient_id, $Comment, $ecosystem_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ValidatorResign {\r\n    data {}\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        var roleValidatorId int\r\n        roleValidatorId = getRoleId(\"role_validator\")\r\n        if !RoleAccess(roleValidatorId) {\r\n            warning LangRes(\"@1not_validator_can_not_run\", \"en\")\r\n        }\r\n        $assigned = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id, \"role->id\":roleValidatorId, deleted:0}).One(\"id\")\r\n    }\r\n\r\n    action {\r\n        @1RolesUnassign(\"row_id\", Int($assigned))\r\n        @1NodeRemoveByKey()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func runContract(cont, p string) {\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100) / total)\r\n        if percent > 100 {\r\n            percent = 100\r\n        }\r\n        return percent\r\n    }\r\n\r\n    func totalSummForTypeVotingVoters(votingId int) int {\r\n        var type_number_voters array\r\n        type_number_voters = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID})\r\n        var i int\r\n        i = 0\r\n        var summ int\r\n        while i < Len(type_number_voters) {\r\n            var type_number_voter map\r\n            type_number_voter = type_number_voters[i]\r\n            summ = summ + Int(type_number_voter[\"decision\"])\r\n            i = i + 1\r\n        }\r\n        return summ\r\n    }\r\n\r\n    func closeNotes() {\r\n        var notes array i int\r\n        notes = DBFind(\"@1notifications\").Where({closed:0, ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            @1NotificationsClose(\"notific_id\", Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id: $votingID }).Columns(\"voting->name,voting->count_type_voters,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\r\n        $voting_name = $voting[\"voting.name\"]\r\n        $voting_type = Int($voting[\"voting.type\"]) //system or custom\r\n        $type_decision = Int($voting[\"voting.type_decision\"])\r\n        $optional_role_id = Int($voting[\"optional.role_id\"])\r\n        $number_role_vacancies = Int($voting[\"optional.role_vacancies\"])\r\n        $number_voters = Int($voting[\"progress.number_voters\"]) // already voted\r\n        $contract_accept = $voting[\"optional.contract_accept\"]\r\n        $contract_reject = $voting[\"optional.contract_reject\"]\r\n        $param_accept = $voting[\"optional.contract_accept_params\"]\r\n        $param_reject = $voting[\"optional.contract_reject_params\"]\r\n        $flag_success = $voting[\"flags.success\"]\r\n        $quorum = Int($voting[\"voting.quorum\"])\r\n        $percent_voters = Int($voting[\"progress.percent_voters\"])\r\n        $status = Int($voting[\"status\"])\r\n\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingUpdate\"{\r\n            // if $percent_voters < $quorum && $quorum > 50 || $status != $FINISHED {\r\n            if $status != $FINISHED {\r\n                warning LangRes(\"@1voting_not_expired\", \"en\")\r\n            }\r\n        }\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        $ACCEPT = 1\r\n        $REJECT = -1\r\n    }\r\n\r\n    action {\r\n        var percent_voters flag_decision i int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $flag_success == $ACCEPT { //now enough participants to make a decision\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = $REJECT // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Order({number_accept:\"-1\"}).Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < $number_role_vacancies {\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                            if percent_voters >= $quorum {\r\n                                // added candidate to the role\r\n                                var buffer_id int\r\n                                var role map\r\n                                buffer_id = Int($optional_role_id)\r\n                                role = DBFind(\"@1roles\").Columns(\"id,role_type,role_name,image_id\").Where({ecosystem:$ecosystem_id, id: buffer_id}).Row()\r\n                                if role {\r\n                                    var member assignedMember map mid rid string\r\n                                    member[\"member_id\"] = subject[\"subject.member_id\"]\r\n                                    mid = member[\"member_id\"]\r\n                                    rid = role[\"id\"]\r\n                                    assignedMember = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"member->member_id\":mid, \"role->id\":rid, deleted:0}).Row()\r\n\r\n                                    if !assignedMember {\r\n                                        member[\"member_name\"] = subject[\"subject.member_name\"]\r\n                                        member[\"image_id\"] = subject[\"subject.image_id\"]\r\n\r\n                                        var rolePart appointed m map\r\n                                        rolePart[\"id\"] = role[\"id\"]\r\n                                        rolePart[\"type\"] = role[\"role_type\"]\r\n                                        rolePart[\"name\"] = role[\"role_name\"]\r\n                                        rolePart[\"image_id\"] = role[\"image_id\"]\r\n\r\n                                        appointed[\"voting_id\"] = $votingID\r\n                                        appointed[\"voting_name\"] = $voting_name\r\n\r\n                                        // add a candidate to the role\r\n                                        m[\"role\"] = rolePart\r\n                                        m[\"member\"] = member\r\n                                        m[\"appointed\"] = appointed\r\n                                        m[\"date_created\"] = BlockTime()\r\n                                        m[\"ecosystem\"] = $ecosystem_id\r\n                                        DBInsert(\"@1roles_participants\", m)\r\n\r\n                                        candidates_added_count = candidates_added_count + 1\r\n                                        // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                        flag_decision = $ACCEPT\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept\").Row()\r\n                if subject {\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Row()\r\n                if subject {\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n\r\n                            var column string\r\n                            column = Str(subject[\"subject.column\"])\r\n                            $colValue = Str(subject[\"subject.column_value\"])\r\n                            // type of voting - custom\r\n                            if $voting_type == 1 {\r\n                                // ALWAYS CHECK THE PERMISSION\r\n                                var colType string\r\n                                colType = GetColumnType(subject[\"subject.table\"], column)\r\n                                if colType == \"number\"{\r\n                                    $colValue = Int($colValue)\r\n                                }\r\n                                if colType == \"money\"{\r\n                                    $colValue = Money($colValue)\r\n                                }\r\n                                if colType == \"double\" {\r\n                                    $colValue = Float($colValue)\r\n                                }\r\n                                var m map\r\n                                m[column] = $colValue\r\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                            }\r\n\r\n                            // type of voting - system\r\n                            if $voting_type == 2 {\r\n                                if subject[\"subject.table\"] == \"@1ecosystems\"{\r\n                                    var m map\r\n                                    m[column] = $colValue\r\n                                    DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                                }else{\r\n                                    @1UpdateSysParam(\"Name,Value,VotingId\", column, $colValue, $votingID)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n\r\n                            var column string\r\n                            column = Str(subject[\"subject.column\"])\r\n                            $colValue = Str(subject[\"subject.column_value\"])\r\n                            // type of voting - custom\r\n                            if $voting_type == 1 {\r\n                                // ALWAYS CHECK THE PERMISSION\r\n                                var colType string\r\n                                colType = GetColumnType(subject[\"subject.table\"], column)\r\n                                if colType == \"number\"{\r\n                                    $colValue = Int($colValue)\r\n                                }\r\n                                if colType == \"money\"{\r\n                                    $colValue = Money($colValue)\r\n                                }\r\n                                if colType == \"double\" {\r\n                                    $colValue = Float($colValue)\r\n                                }\r\n                                var m map\r\n                                m[column] = $colValue\r\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                            }\r\n\r\n                            // type of voting - system\r\n                            if $voting_type == 2 {\r\n                                if subject[\"subject.table\"] == \"@1ecosystems\"{\r\n                                    var m map\r\n                                    m[column] = $colValue\r\n                                    DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                                }else{\r\n                                    @1UpdateSysParam(\"Name,Value,VotingId\", column, $colValue, $votingID)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 5 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\r\n                if subject {\r\n                    $contract_accept = subject[\"subject.contract_accept\"]\r\n                    $contract_reject = subject[\"subject.contract_reject\"]\r\n                    $param_accept = subject[\"subject.contract_accept_params\"]\r\n                    $param_reject = subject[\"subject.contract_reject_params\"]\r\n\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == $ACCEPT {\r\n                runContract($contract_accept, $param_accept)\r\n                closeNotes()\r\n            }\r\n            if flag_decision == $REJECT {\r\n                runContract($contract_reject, $param_reject)\r\n                closeNotes()\r\n            }\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {\"flags->decision\":flag_decision})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingInvite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingInvite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n\r\n    func addVotingKey(key map, votingId int) {\r\n        var m member map kid int name string\r\n        kid = Int(key[\"id\"])\r\n        name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).One(\"member_name\")\r\n\r\n        member[\"member_id\"] = kid\r\n        if name != \"\" {\r\n            member[\"member_name\"] = name\r\n        }else{\r\n            member[\"member_name\"] = IdToAddress(kid)\r\n        }\r\n        m[\"voting_id\"] = votingId\r\n        m[\"member\"] = member\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1votings_participants\", m)\r\n    }\r\n    \r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_add_participants\", \"en\")\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_add_participants\", \"en\")\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$var_id}).Row(){\r\n                warning LangRes(\"@1key_not_found\", \"en\")\r\n            }\r\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID,\"member->member_id\":$var_id}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1member_added_before\", \"en\")\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1voting_participants_added_before\", \"en\")\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n        if ($type_participants == 4 || $type_participants == 5) {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID,\"member->role_id\":$var_id}).One(\"id\")\r\n            if isAdded {\r\n                if ($type_participants == 4){\r\n                    warning LangRes(\"@1role_members_added_before\", \"en\")\r\n                }\r\n                if ($type_participants == 5){\r\n                    warning LangRes(\"@1role_added_before\", \"en\")\r\n                }\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var keys array\r\n            keys = DBFind(\"@1keys\").Where({id:{\"$neq\":$guest_key}, ecosystem:$ecosystem_id})\r\n            while i < Len(keys) {\r\n                addVotingKey(keys[i], $votingID)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var key map\r\n            key = DBFind(\"@1keys\").WhereId($var_id).Row()\r\n            addVotingKey(key, $votingID)\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 3 { // role\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0}).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                m[\"voting_id\"] = $votingID\r\n                m[\"member\"] = role[\"member\"]\r\n                m[\"ecosystem\"] = $ecosystem_id\r\n                DBInsert(\"@1votings_participants\", m)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 4 { // all participants in the selected roles vote\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0}).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role map\r\n                role = roles[i]\r\n                var cust map\r\n                cust = JSONToMap(role[\"member\"])\r\n                cust[\"role_id\"] = $var_id\r\n                DBInsert(\"@1votings_participants\", {ecosystem: $ecosystem_id, voting_id: $votingID, member: cust})\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 5 { // one participant of the selected roles votes\r\n            var role map\r\n            role[\"role_id\"] = $var_id\r\n            role[\"member_id\"] = \"0\"\r\n            var json string\r\n            json = JSONEncode(role)\r\n            $role_id_send = $var_id\r\n            DBInsert(\"@1votings_participants\", {ecosystem: $ecosystem_id, voting_id: $votingID, member: json})\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        var v map\r\n        v[\"progress->number_participants\"] = $number_participants\r\n        if $type_participants == 3 {\r\n            v[\"voting->role_id\"] = $var_id\r\n            DBUpdate(\"@1votings\", $votingID, v)\r\n        }else{\r\n            DBUpdate(\"@1votings\", $votingID, v)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingUpdate {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100) / total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:$STARTED}).Columns(\"flags,voting,progress,progress->number_voters,voting->count_type_voters\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1started_voting_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n\r\n        var flag_success percent_success percent_voters number_voters quorum volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        if(Int($voting[\"voting.count_type_voters\"]) == 0){\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(percent_voters, volume)\r\n        } else {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(number_voters, volume)\r\n        }\r\n\r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n\r\n        var m map\r\n        m[\"progress\"] = progress\r\n        m[\"flags->success\"] = flag_success\r\n\r\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->count_type_voters\").Where({ecosystem:$ecosystem_id, id:$votingID}).One(\"voting.count_type_voters\")\r\n        if $check_type == 0 {\r\n            if (percent_voters >= quorum && quorum > 50 && percent_voters >= volume) || percent_voters == 100 {\r\n                // if a quorum is more than 50% we can immediately make the decision\r\n                // OR\r\n                // if all participants have voted we can not wait until the end of the voting period\r\n                m[\"status\"] = $FINISHED\r\n                DBUpdate(\"@1votings\", $votingID, m)\r\n                @1VotingDecisionCheck(\"votingID\", $votingID)\r\n            }else{\r\n                DBUpdate(\"@1votings\", $votingID, m)\r\n            }\r\n        }\r\n        if $check_type == 1 {\r\n            $total_voters = Int($voting[\"progress.number_voters\"]) + 1\r\n            if ($total_voters >= volume) || percent_voters == 100 {\r\n                // if a quorum is more than 50% we can immediately make the decision\r\n                // OR\r\n                // if all participants have voted we can not wait until the end of the voting period\r\n                m[\"status\"] = $FINISHED\r\n                DBUpdate(\"@1votings\", $votingID, m)\r\n                @1VotingDecisionCheck(\"votingID\", $votingID)\r\n            }else{\r\n                DBUpdate(\"@1votings\", $votingID, m)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCandidateAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCandidateAccept {\r\n    data {\r\n        votingID int\r\n        CandidateID int\r\n        RoleId int\r\n    }\r\n    \r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"@1votings\").Columns(\"id,flags->decision,flags->notifics,status\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"subject->member_id\":$CandidateID}).Row()\r\n        if !$subject_map {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\r\n\r\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $participant_role_id {\r\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning LangRes(\"@1voting_not_participant\", \"en\")\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"@1votings_participants\", Int($rid[\"id\"]), {\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n        \r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            // write the result of the voting\r\n            var m map\r\n            m[\"decision_date\"] = bt\r\n            m[\"decision\"] = $CandidateID\r\n            DBUpdate(\"@1votings_participants\", Int($participant_id), m)\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"@1votings_subject\", Int($subject_map[\"id\"]), {\"+number_accept\":1})\r\n\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionAccept {\r\n    data {\r\n        votingID int\r\n        RoleId int\r\n    }\r\n    \r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"@1votings\").WhereId($votingID).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $RoleId{\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\r\n\r\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").WhereId($votingID).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"@1votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $participant_role_id {\r\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning LangRes(\"@1voting_not_participant\", \"en\")\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"@1votings_participants\", Int($rid[\"id\"]), {\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n        \r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"@1votings_participants\", Int($participant_id), {decision_date:bt, decision:1})\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), {\"+number_accept\":1})\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDelete {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 5\r\n        var voting map bt string\r\n        bt = BlockTime()\r\n        voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, \"creator->member_id\":$key_id, \"status\":$INVALID}).Columns(\"id\").Row()\r\n        if !voting {\r\n            warning LangRes(\"@1voting_delete_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1votings\", $votingID, {deleted:1})\r\n        var notes array\r\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map noteId int\r\n            note = notes[i]\r\n            noteId = Int(note[\"id\"])\r\n            @1NotificationsClose(\"notific_id\", noteId)\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCreate {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int\r\n        quorum int \"optional\"\r\n\r\n        count_type_voters string \"optional\"\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n    }\r\n    \r\n    func trimZeroTime(s string) string {\r\n        if Contains(s, \"T00:00:00Z\") {\r\n            s = s Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n    \r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5 {\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n    \r\n    func isCalledFromPage() bool {\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n    \r\n    func fixDatetimes() {\r\n        $date_started = dateAddTime($start_date, $start_time)\r\n        $date_ended = dateAddTime($end_date, $end_time)\r\n\r\n        if UnixDateTime($date_started) == 0 || UnixDateTime($date_ended) == 0 { // invalid datetimes\r\n            if isCalledFromPage(){\r\n                var errs array\r\n                if Size($start_date) < 10 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($start_time) < 5 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($end_date) < 10 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($end_time) < 5 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                error Sprintf(LangRes(\"@1voting_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\r\n            }else{\r\n                $date_started = $block_time\r\n                $interval = Int($interval)\r\n                if $interval == 0 {\r\n                    $interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $interval\r\n                $date_started = DateTime($date_started)\r\n                $date_ended = DateTime($date_ended)\r\n            }\r\n        }\r\n        if UnixDateTime($date_started) < $block_time{\r\n            error LangRes(\"@1starting_date_invalid\", \"en\")\r\n        }\r\n        if UnixDateTime($date_started) >= UnixDateTime($date_ended){\r\n            error LangRes(\"@1ending_date_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        if (($type_decision == 1 || $type_decision == 2) && $count_type_voters == 1){\r\n            info LangRes(\"@1voting_type_not_suitable\", \"en\")\r\n        }\r\n        if $count_type_voters == 0 {\r\n            if ($quorum < 5) || ($quorum > 100) {\r\n                warning Sprintf(LangRes(\"@1quorum_range_must_be\", \"en\"), $quorum)\r\n            }\r\n            if ($volume < 50) || ($volume > 100) {\r\n                warning Sprintf(LangRes(\"@1volume_range_must_be\", \"en\"), $volume)\r\n            }\r\n        }\r\n        if $count_type_voters == 1 {\r\n            if $volume <= 0 {\r\n                info LangRes(\"@1voters_number_less_one\", \"en\")\r\n            }\r\n            $quorum = 0\r\n        }\r\n        if $voting_type == 2 {\r\n            var specRules map\r\n            specRules[\"@1VotingTokensRefundCreate\"] = 1\r\n            specRules[\"@1VotingTemplateRun\"] = 1\r\n            specRules[\"@1VotingNodeAdd\"] = 1\r\n            specRules[\"@1VotingNodeRemove\"] = 1\r\n            specRules[\"@1VotingVesCreate\"] = 1\r\n            specRules[\"@1VotingValidatorCreate\"] = 1\r\n            specRules[\"@1VotingNodeAdd\"] = 1\r\n            specRules[\"@1VotingParamCreate\"] = 1\r\n            specRules[\"@1VotingNodeRemove\"] = 1\r\n            if specRules[$stack[0]] != 1 {\r\n                warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", \"en\"), $stack[0])\r\n            }\r\n        }\r\n\r\n\r\n        $key = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\r\n        if !$key {\r\n            warning LangRes(\"@1ecosystem_not_member\", \"en\")\r\n        }\r\n\r\n        fixDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $voting_name\r\n        voting[\"type\"] = $voting_type\r\n        voting[\"description\"] = $description\r\n        voting[\"type_participants\"] = $type_participants\r\n        voting[\"type_decision\"] = $type_decision\r\n        voting[\"volume\"] = $volume\r\n        voting[\"quorum\"] = $quorum\r\n        voting[\"count_type_voters\"] = $count_type_voters\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"member_id\"] = $key[\"id\"]\r\n        creator[\"member_name\"] = IdToAddress($key_id)\r\n        var m map\r\n        m[\"voting\"] = voting\r\n        m[\"progress\"] = progress\r\n        m[\"flags\"] = flags\r\n        m[\"creator\"] = creator\r\n        m[\"status\"] = 1\r\n        m[\"date_started\"] = $date_started\r\n        m[\"date_ended\"] = $date_ended\r\n        m[\"ecosystem\"] = $ecosystem_id,\r\n\r\n        votingId = DBInsert(\"@1votings\", m)\r\n\r\n        // if all members are voting participants\r\n        if $type_participants == 1 {\r\n            @1VotingInvite(\"votingID,var_id\", votingId, 0)\r\n        }\r\n        $result = votingId\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID}).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\r\n        if !$voting_map {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n\r\n        $type_decision = $voting_map[\"voting.type_decision\"]\r\n        if $type_decision < 1 || $type_decision > 5 {\r\n            warning LangRes(\"@1decision_type_invalid\", \"en\")\r\n        }\r\n\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Row()\r\n        if !$subject_map {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flags, subject map\r\n        flags = safeJsonToMap($voting_map[\"flags\"])\r\n        if $type_decision > 2 && $type_decision <= 5 {\r\n            subject = safeJsonToMap($subject_map[\"subject\"])\r\n        }\r\n\r\n        var fullData string\r\n\r\n        if $type_decision == 1 || $type_decision == 2 {\r\n            var optional map\r\n            optional = safeJsonToMap($voting_map[\"optional\"])\r\n\r\n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 3 {\r\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 4 {\r\n            if $voting_map[\"voting.type\"] == 1{ // personal\r\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n            if $voting_map[\"voting.type\"] == 2 { // system\r\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n        }\r\n\r\n        if $type_decision == 5 {\r\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if fullData == 1 {\r\n            DBUpdate(\"@1votings\", $votingID, {\"flags->full_data\":fullData})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectDocument",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectDocument {\r\n    data {\r\n        votingID int\r\n        text_document string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = $text_document\r\n        subject[\"hash\"] = Sha256($text_document)\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:subject})\r\n        }\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNotificationSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingNotificationSend {\r\n    data {\r\n        votingID int\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 {\r\n            res = JSONToMap(m)\r\n        }\r\n        return res\r\n    }\r\n    \r\n    conditions {\r\n        var bt string\r\n        bt = BlockTime()\r\n        $voting = DBFind(\"@1votings\").Columns(\"id,date_ended\").Where({ecosystem:$ecosystem_id, id:$votingID, date_ended:[{\"$gt\":bt}]}).One(\"id\")\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_notify\", \"en\")\r\n        }\r\n\r\n        $voting = DBFind(\"@1votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where({ecosystem:$ecosystem_id, id:$votingID, date_started:[{\"$gt\":bt}]}).Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1voting_not_creator\", \"en\")\r\n        }\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            warning LangRes(\"@1notifications_sent_already\", \"en\")\r\n        }\r\n\r\n        $voting_name = $voting[\"voting.name\"]\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, decision:0})\r\n        var i int\r\n        while i < Len(participants) {\r\n            var participant member params map\r\n            participant = participants[i]\r\n            member = safeJsonToMap(participant[\"member\"])\r\n            params[\"voting_id\"] = $votingID\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {\"flags->notifics\":1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectFormal",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectFormal {\r\n    data {\r\n        votingID int\r\n\r\n        description string \"optional\"\r\n        table_to_written string\r\n        row_id string\r\n        column_name string\r\n        written_value string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject = {description:$description, table:$table_to_written, table_id:$row_id, column:$column_name, column_value:$written_value}\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:subject})\r\n        }\r\n\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingStatusUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingStatusUpdate {\r\n    data {}\r\n    \r\n    func notificationSend(voting map) {\r\n        var title string id i lenVoters int voters array\r\n        var buffer_id int\r\n        buffer_id = Int(voting[\"id\"])\r\n        $type_p = DBFind(\"@1votings\").Columns(\"id,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: buffer_id}).Row()\r\n        if($type_p[\"voting.type_participants\"] == 5){\r\n            title = voting[\"voting.name\"]\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:id, decision:0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter roleId params map\r\n                voter = voters[i]\r\n                roleId = Int(voter[\"member.role_id\"])\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type\", roleId, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, \"@1voting_view\", params,1)\r\n                i = i + 1\r\n            }\r\n\r\n        } else {\r\n            title = voting[\"voting.name\"]\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->member_id\").Where({ecosystem:$ecosystem_id, voting_id:id, decision:0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter memberId params map\r\n                voter = voters[i]\r\n                memberId = Int(voter[\"member.member_id\"])\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", memberId, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, \"@1voting_view\", params)\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n    \r\n    func changeVotings(from, to map) {\r\n        var votings array i lenVotings int v map\r\n        from[\"deleted\"] = 0\r\n        votings = DBFind(\"@1votings\").Columns(\"id,date_started,date_ended,voting->name\").Where(from)\r\n\r\n        lenVotings = Len(votings)\r\n        while i < lenVotings{\r\n            v = votings[i]\r\n            if to[\"status\"] == $STARTED{\r\n                notificationSend(v)\r\n                to[\"flags->notifics\"] = 1\r\n            }\r\n            DBUpdate(\"@1votings\", Int(v[\"id\"]), to)\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n    }\r\n    \r\n    action {\r\n        var bt string\r\n        bt = BlockTime()\r\n        changeVotings({status:$WAITING, \"flags->full_data\":0}, {status:$INVALID})\r\n        changeVotings({status:$INVALID, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$WAITING, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$VALID, date_started:{\"$lte\":bt}}, {status:$STARTED})\r\n        changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}}, {status:$FINISHED})\r\n        //changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}, \"flags->decision\":1}, {status:$FINISHED})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCandidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCandidates {\r\n    data {\r\n        votingID int\r\n        memberID int\r\n    }\r\n    \r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").WhereId(kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status\").Row()\r\n        if $voting[\"status\"] == $STARTED {\r\n            warning LangRes(\"@1voting_started_can_not_add_candidates\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_finished_can_not_add_candidates\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $memberID == 0 {\r\n            $memberID = $key_id\r\n        }\r\n\r\n        if DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"subject->member_id\":$memberID}).One(\"id\") {\r\n            warning LangRes(\"@1candidate_added_before\", \"en\")\r\n        }\r\n\r\n        $member = getMemberInfo($memberID)\r\n        if !$member {\r\n            warning Sprintf(LangRes(\"@1key_not_found\", \"en\") + \" (%v)\", $memberID)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:$member})\r\n        var m map\r\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\r\n        DBUpdate(\"@1votings\", $votingID, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectSettings {\r\n    data {\r\n        votingID int\r\n\r\n        roleID int\r\n        vacancies int\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $vacancies < 1 {\r\n            warning LangRes(\"@1vacancies_number_less_one found\", \"en\")\r\n        }\r\n\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"optional,voting->type,flags->full_data\").Row()\r\n\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$roleID, deleted:0}).Row()\r\n        if !role {\r\n            warning LangRes(\"@1specified_role_not_found\", \"en\")\r\n        }\r\n\r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\r\n            warning LangRes(\"@1role_not_elective_or_removed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\r\n        optional[\"role_id\"] = $roleID\r\n        optional[\"role_vacancies\"] = $vacancies\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectContract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectContract {\r\n    data {\r\n        votingID int\r\n\r\n        contract_accept string\r\n        contract_accept_params string \"optional\"\r\n\r\n        contract_reject string\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    \r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var accept_params, reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = $contract_accept\r\n        subject[\"contract_accept_params\"] = accept_params\r\n        subject[\"contract_reject\"] = $contract_reject\r\n        subject[\"contract_reject_params\"] = reject_params\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem:$ecosystem_id, voting_id:$votingID, subject:subject})\r\n        }\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateRun",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateRun {\r\n    data {\r\n        TemplateId int\r\n        Duration int\r\n\r\n        KeyId int \"optional\"\r\n        TableWritten string \"optional\"\r\n        RowId string \"optional\"\r\n        ColumnName string \"optional\"\r\n        NewValue string \"optional\"\r\n        TextDocument string \"optional\"\r\n    }\r\n\r\n    func checkInput(value, name string) {\r\n        if Size(value) == 0 || value == \"NULL\" {\r\n            warning Sprintf(LangRes(\"@1x_not_found\", \"en\"), name)\r\n        }\r\n    }\r\n\r\n    func emptyOrValue(value string) string {\r\n        if value == \"NULL\" {\r\n            value = \"\"\r\n        }\r\n        return value\r\n    }\r\n\r\n    conditions {\r\n        $template = DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:$TemplateId}).Row()\r\n        if !$template{\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n        if $KeyId != 0{\r\n            $keyFind = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$KeyId}).Row()\r\n            if !$keyFind{\r\n                warning LangRes(\"@1key_not_found\", \"en\")\r\n            }\r\n        }\r\n        if $Duration <= 0{\r\n            $Duration = 3\r\n        }\r\n\r\n        $voters = $template[\"voters\"]\r\n        $candidates = $template[\"candidates\"]\r\n        $votingName = Sprintf(\"%v [\" + LangRes(\"@1template_id\", \"en\") + \": %v]\", $template[\"title\"], $TemplateId)\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $type_voting = Int($template[\"type_voting\"])\r\n        $participants = Int($template[\"type_participants\"])\r\n        $decision = Int($template[\"type_decision\"])\r\n        $vacancies = Int($template[\"vacancies\"])\r\n        $countTypeVoters = Int($template[\"count_type_voters\"])\r\n\r\n        $desc = Sprintf(LangRes(\"@1template\", \"en\") + \" #%v\", $TemplateId)\r\n        if $type_voting < 1 || $type_voting > 2 {\r\n            warning LangRes(\"@1voting_type_invalid\", \"en\")\r\n        }\r\n        if $type_voting == 2 {\r\n            var prev string systemAllowed map\r\n            systemAllowed[\"@1VotingVesCreate\"] = 1\r\n            systemAllowed[\"@1VotingValidatorCreate\"] = 1\r\n            systemAllowed[\"@1VotingNodeAdd\"] = 1\r\n            systemAllowed[\"@1VotingParamCreate\"] = 1\r\n            systemAllowed[\"@1VotingNodeRemove\"] = 1\r\n            prev = $stack[0]\r\n            if Len($stack) > 1 {\r\n                prev = $stack[Len($stack) - 2]\r\n            }\r\n            if systemAllowed[prev] != 1 {\r\n                warning LangRes(\"@1voting_type_invalid\", \"en\")\r\n            }\r\n        }\r\n        $contractAccept = emptyOrValue($template[\"contract_accept\"])\r\n        $acceptParams = emptyOrValue($template[\"accept_params\"])\r\n        $contractReject = emptyOrValue($template[\"contract_reject\"])\r\n        $rejectParams = emptyOrValue($template[\"reject_params\"])\r\n\r\n        if $decision == 1 || $decision == 2 {\r\n            // role-candidates\r\n            checkInput($candidates, \"Candidate role\")\r\n            var candidate map\r\n            candidate = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$candidates, deleted:0}).Row()\r\n            if !candidate {\r\n                warning Sprintf(LangRes(\"@1candidate_role_id_not_found\", \"en\"), $candidates)\r\n            }\r\n            $candidateId = Int(candidate[\"id\"])\r\n        }\r\n\r\n        if $decision == 3 {\r\n            // document approval\r\n            checkInput($TextDocument, \"TextDocument\")\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // formal decision\r\n            checkInput($ColumnName, \"ColumnName\")\r\n            checkInput($NewValue, \"NewValue\")\r\n            if $type_voting == 2{\r\n                if $TableWritten == \"@1ecosystems\"{\r\n                    $desc = Sprintf(\"%v: %v, %v: %v, %v: %v, %v: %v\", LangRes(\"@1table\", \"en\"), $TableWritten, LangRes(\"@1column\", \"en\"), $ColumnName, LangRes(\"@1id\", \"en\"), $RowId, LangRes(\"@1value\", \"en\"), $NewValue)\r\n                }else{\r\n                    $desc = Sprintf(LangRes(\"@1parameter\", \"en\") + \": %v, \" + LangRes(\"@1value\", \"en\") + \": %v\", $ColumnName, $NewValue)\r\n                }\r\n            }\r\n\r\n            if $type_voting == 1{\r\n                checkInput($TableWritten, \"TableWritten\")\r\n                checkInput($RowId, \"RowId\")\r\n                $desc = Sprintf(LangRes(\"@1table\", \"en\") + \": %v, \" + LangRes(\"@1column\", \"en\") + \": %v, \" + LangRes(\"@1id\", \"en\") + \": %v, \" + LangRes(\"@1value\", \"en\") + \": %v\", $TableWritten, $ColumnName, $RowId, $NewValue)\r\n            }\r\n            if $RowId == \"\" || $RowId == \"NULL\"{\r\n                $RowId = 0\r\n            }\r\n\r\n        }\r\n        // check duplicated\r\n        if DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, \"voting->name\":$votingName, \"flags->decision\":{\"$nin\":[\"1\", \"-1\"]}, deleted:0}).Row(){\r\n            error LangRes(\"@1same_voting_created\", \"en\")\r\n        }\r\n\r\n\r\n        if $participants == 3 {\r\n            // if the type of the participants \"in role\" - check the role\r\n            var role map\r\n            role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$voters, deleted:0}).Row()\r\n            if !role {\r\n                warning Sprintf(LangRes(\"@1voters_role_id_not_found\", \"en\"), $voters)\r\n            }\r\n            $roleId = Int(role[\"id\"])\r\n            if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":$roleId, \"member->member_id\":$key_id}).Row(){\r\n                warning LangRes(\"@1role_not_involved\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n\r\n        if initContract != \"\" && initContract != \"NULL\" {\r\n            var initParam map\r\n            if $decision == 4 && $type_voting == 2 {\r\n                // voting for new value of sysparam\r\n                initParam[\"Name\"] = $ColumnName\r\n                initParam[\"Value\"] = $NewValue\r\n            } else {\r\n                initParam[\"KeyId\"] = $KeyId\r\n            }\r\n            CallContract(initContract, initParam)\r\n        }\r\n\r\n        var votingId int\r\n        votingId = @1VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval,count_type_voters\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration, $countTypeVoters)\r\n\r\n        if votingId == 0 {\r\n            warning LangRes(\"@1voting_creation_error\", \"en\")\r\n        }\r\n        // the default argument for Contract\r\n        var defaultParams string\r\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\r\n\r\n        if Size($acceptParams) == 0{\r\n            $acceptParams = defaultParams\r\n        }\r\n        if Size($rejectParams) == 0{\r\n            $rejectParams = defaultParams\r\n        }\r\n\r\n        if $decision == 1 || $decision == 2{\r\n            // 1. Role candidates with the registration of participants on request\r\n            // 2. Role candidates with manual registration of the participants\r\n            @1VotingSubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\r\n            @1VotingSubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\r\n        }\r\n        if $decision == 3 {\r\n            // Document approval\r\n            @1VotingSubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n\r\n        if $decision == 4 {\r\n            // Formal decision\r\n            @1VotingSubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n\r\n        }\r\n\r\n        if $decision == 5 {\r\n            // Execution of the contract\r\n            @1VotingSubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\r\n        }\r\n        if $participants == 3 {\r\n            // participants: \"by role\"\r\n            @1VotingInvite(\"votingID,var_id\", votingId, $roleId)\r\n        }\r\n        if $participants == 1 {\r\n            // if the participants are \"all\", the invite has already occurred in \"@1VotingCreate\"\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeAdd",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingNodeAdd {\r\n    data {\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        Duration int\r\n    }\r\n    \r\n    func warn(name, detail string) {\r\n        warning Sprintf(LangRes(\"@1x_invalid\", \"en\") + \" (%v)\", name, detail)\r\n    }\r\n    \r\n    func checkApiAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1api_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n    \r\n    func checkTcpAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1tcp_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n    \r\n    func checkPub(pub string) {\r\n        if PubToID(pub) == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n    }\r\n    \r\n    func checkKeyId(keyid int) {\r\n        var existed map\r\n        existed = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:keyid}).Row()\r\n        if !existed {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n    }\r\n    \r\n    func getNodesJSON() string {\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n    \r\n    func appendFirstNode(nodes array) array {\r\n        var first string firstNode map\r\n        first = AppParam($appId,\"first_node\", 1)\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning LangRes(\"@1first_node_invalid\", \"en\")\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkKeyId(Int(firstNode[\"key_id\"]))\r\n        checkPub(firstNode[\"public_key\"])\r\n\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n    \r\n    conditions {\r\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\", 1))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n        checkKeyId($KeyId)\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action {\r\n        var nodes array node map\r\n        node[\"tcp_address\"] = $TcpAddress\r\n        node[\"api_address\"] = $ApiAddress\r\n        node[\"key_id\"] = Str($KeyId)\r\n        node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, node)\r\n        @1VotingTemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeRemove",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingNodeRemove{\r\n    data{\r\n        Index int\r\n        Duration int\r\n    }\r\n    conditions{\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam(appId,\"voting_sysparams_template_id\", 1))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n        var nodesJson string\r\n        nodesJson = SysParamString(\"full_nodes\")\r\n        if Size(nodesJson) < 100 {\r\n            warning LangRes(\"@1invalid_full_nodes\", \"en\")\r\n        }\r\n\r\n        $nodes = JSONDecode(nodesJson)\r\n        if Len($nodes) <= 3{ // minimal count nodes for work\r\n            warning LangRes(\"@1removing_node_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action{\r\n        var nodesNew array i int node map\r\n        while i < Len($nodes){\r\n            node = $nodes[i]\r\n            if i != $Index {\r\n                nodesNew = Append(nodesNew, node)\r\n            }\r\n            i = i + 1\r\n        }\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ColumnName,NewValue\", $templateId, $Duration, \"full_nodes\", JSONEncode(nodesNew))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSysparamInit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSysparamInit {\r\n    data {\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions {\r\n        if GetContractByName($Name) == 0 {\r\n            warning LangRes(\"@1system_parameter_not found\", \"en\")\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var params map\r\n        params[\"Value\"] = $Value\r\n        CallContract($Name, params)\r\n        // InvestorRefresh()    \r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateCreate {\r\n    data {\r\n        Title string\r\n        TypeParticipants int\r\n        TypeVoting int\r\n        TypeDecision int\r\n        Volume int\r\n        Quorum int\r\n        Subject string\r\n        Voters string \"optional\" // role of participant\r\n        Candidates string \"optional\" // role of candidate\r\n        InitContract string \"optional\" // Execute before the vote\r\n        Vacancies int \"optional\"\r\n        ContractAccept string \"optional\"\r\n        ParamsAccept string \"optional\"\r\n        ContractReject string \"optional\"\r\n        ParamsReject string \"optional\"\r\n        CountTypeVoters int\r\n    }\r\n\r\n    conditions {\r\n        if $TypeParticipants == 3 {\r\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\r\n                warning LangRes(\"@1voters_role_not_found\", \"en\")\r\n            }\r\n        }\r\n        if Size($Title) <3 {\r\n            warning LangRes(\"@1enter_title\", \"en\")\r\n        }\r\n        if $Volume <0 || $Volume > 100 {\r\n            warning LangRes(\"@1volume_range_wrong\", \"en\")\r\n        }\r\n        if $Quorum <0 || $Quorum > 100 {\r\n            warning LangRes(\"@1quorum_range_wrong\", \"en\")\r\n        }\r\n\r\n        if $TypeDecision == 1 || $TypeDecision == 2 {\r\n            if $Vacancies < 1 {\r\n                warning LangRes(\"@1vacancies_number_wrong\", \"en\")\r\n            }\r\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\r\n                warning LangRes(\"@1candidate_role_wrong\", \"en\")\r\n            }\r\n        }\r\n\r\n        if Size($InitContract) > 0{\r\n            if GetContractByName($InitContract) == 0 {\r\n                warning LangRes(\"@1init_contract_not_found\", \"en\")\r\n            }\r\n        }\r\n        if Size($ContractAccept) > 0{\r\n            if GetContractByName($ContractAccept) == 0 {\r\n                warning LangRes(\"@1accepted_contract_not_found\", \"en\")\r\n            }\r\n        }\r\n        if Size($ContractReject) > 0{\r\n            if GetContractByName($ContractReject) == 0{\r\n                warning LangRes(\"@1rejected_contract_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"title\"] = $Title\r\n        m[\"subject\"] = $Subject\r\n        m[\"voters\"] = $Voters\r\n        m[\"candidates\"] = $Candidates\r\n        m[\"init_contract\"] = $InitContract\r\n        m[\"volume\"] = $Volume\r\n        m[\"quorum\"] = $Quorum\r\n        m[\"type_voting\"] = $TypeVoting\r\n        m[\"type_participants\"] = $TypeParticipants\r\n        m[\"type_decision\"] = $TypeDecision\r\n        m[\"vacancies\"] = $Vacancies\r\n        m[\"contract_accept\"] = $ContractAccept\r\n        m[\"accept_params\"] = $ParamsAccept\r\n        m[\"contract_reject\"] = $ContractReject\r\n        m[\"reject_params\"] = $ParamsReject\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        m[\"count_type_voters\"] = $CountTypeVoters\r\n        $result = DBInsert(\"@1voting_templates\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingParamCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingParamCreate {\r\n    data {\r\n        NewValue string\r\n        ColumnName string\r\n\r\n    }\r\n\r\n    conditions {\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam(appId,\"voting_sysparams_template_id\", 1))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ColumnName,NewValue\", $templateId, 14, $ColumnName, $NewValue)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplatesInstall",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplatesInstall {\r\n    data {\r\n        fill_ids string \"optional\"\r\n    }\r\n\r\n    func applyTemplate(m map, param string) {\r\n        var templateId paramId int\r\n        templateId = DBInsert(\"@1voting_templates\", m)\r\n        if $fill_ids == \"yes\" {\r\n            paramId = Int(DBFind(\"@1app_params\").Where({name:param, ecosystem: $ecosystem_id}).One(\"id\"))\r\n            @1EditAppParam(\"Id,Value\", paramId, templateId)\r\n        }\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $consensusRoleId = getRoleId(\"role_apla_consensus_asbl\")\r\n        $validatorRoleId = getRoleId(\"role_validator\")\r\n    }\r\n\r\n    action {\r\n        var template map\r\n        // common\r\n        template[\"quorum\"] = 51\r\n        template[\"volume\"] = 70\r\n        template[\"accept_params\"] = \"\"\r\n        template[\"reject_params\"] = \"\"\r\n        template[\"type\"] = \"law\"\r\n        template[\"voters\"] = $consensusRoleId\r\n        template[\"type_participants\"] = 3 // by Role\r\n        template[\"type_voting\"] = 2\r\n        template[\"ecosystem\"] = $ecosystem_id\r\n\r\n        // validator\r\n        template[\"title\"] = \"Voting for Validator\"\r\n        template[\"init_contract\"] = \"VotingValidatorInit\"\r\n        template[\"contract_accept\"] = \"VotingValidatorAccept\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 1\r\n        template[\"candidates\"] = $validatorRoleId\r\n        template[\"type_decision\"] = 2\r\n        template[\"subject\"] = \"Validator\"\r\n        applyTemplate(template, \"voting_validators_template_id\")\r\n\r\n        // sysparam\r\n        template[\"title\"] = \"Voting for System param value\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 4\r\n        template[\"subject\"] = \"System param\"\r\n        applyTemplate(template, \"voting_sysparams_template_id\")\r\n\r\n        // valued ecosystem\r\n        template[\"title\"] = \"Voting for Valued Ecosystem\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"\"\r\n        template[\"contract_reject\"] = \"\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 4\r\n        template[\"subject\"] = \"Valued ecosystem\"\r\n        applyTemplate(template, \"voting_ves_template_id\")\r\n\r\n        // tokenrefund\r\n        template[\"title\"] = \"Token Refund\"\r\n        template[\"init_contract\"] = \"\"\r\n        template[\"contract_accept\"] = \"TokensRefundAccept\"\r\n        template[\"contract_reject\"] = \"TokensRefundReject\"\r\n        template[\"vacancies\"] = 0\r\n        template[\"candidates\"] = 0\r\n        template[\"type_decision\"] = 5\r\n        template[\"subject\"] = \"Token refund\"\r\n        applyTemplate(template, \"voting_tokenrefund_template_id\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTokensRefundCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTokensRefundCreate {\r\n    data {\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount money\r\n        Note string\r\n    }\r\n\r\n    conditions {\r\n        $victimId = AddressToId($VictimAccount)\r\n        $attackerId = AddressToId($SuspectAccount)\r\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$victimId}).Row(){\r\n            error LangRes(\"@1victim_key_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$attackerId}).Row(){\r\n            error LangRes(\"@1attacker_key_invalid\", \"en\")\r\n        }\r\n\r\n        if $Amount <= 0 {\r\n            error LangRes(\"@1amount_invalid\", \"en\")\r\n        }\r\n        if Size($Note) == 0 {\r\n            error LangRes(\"@1add_description\", \"en\")\r\n        }\r\n\r\n        var app_id template_id int\r\n        app_id = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\", 1))\r\n        if template_id <= 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n\r\n        $template = DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:template_id}).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = Int($template[\"type_participants\"])\r\n        $typeDecision = Int($template[\"type_decision\"])\r\n        $typeVoting = Int($template[\"type_voting\"])\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        $initContract = $template[\"init_contract\"]\r\n\r\n        if !RoleAccess($votersRoleId){\r\n            var roleName string\r\n            roleName = DBFind(\"@1roles\").Where({ecosystem:1, id:$votersRoleId}).One(\"role_name\")\r\n            warning Sprintf(LangRes(\"@1template_only_role_allowed\", \"en\"), roleName)\r\n        }\r\n        if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$votersRoleId, deleted:0}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1role_id_no_members\", \"en\"), $votersRoleId)\r\n        }\r\n\r\n        $desc = Sprintf(\"%v (\" + LangRes(\"@1tokens_refund_victim\", \"en\") + \": %v, \" + LangRes(\"@1tokens_refund_attacker\", \"en\") + \": %v, \" + LangRes(\"@1amount\", \"en\") + \": %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n    }\r\n\r\n    action {\r\n        if Size($initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract($initContract, m)\r\n        }\r\n\r\n        TokensLockoutMember(\"KeyId,Value\", $victimId, 1)\r\n        TokensLockoutMember(\"KeyId,Value\", $attackerId, 1)\r\n        \r\n        var votingId int params m map paramsJSON interval_days string\r\n        interval_days = \"3\"\r\n        votingId = @1VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\r\n\r\n        m[\"victim_key_id\"] = $victimId\r\n        m[\"attacker_key_id\"] = $attackerId\r\n        m[\"amount\"] = $Amount\r\n        m[\"note\"] = $Note\r\n        m[\"validator_key_id\"] = $key_id\r\n        m[\"blocked_at\"] = BlockTime()\r\n        m[\"voting_id\"] = votingId\r\n        m[\"status\"] = 1 // 0. Accounts blocked, 1. Discussion, 2. Vote, 3. Closed\r\n        m[\"result\"] = 0 // 0. Discussion and voting, 1. Cancelled, 2. Tokens returned\r\n        params[\"Id\"] = DBInsert(\"tokens_refund\", m) //no $ecosystem_id\r\n\r\n        paramsJSON = JSONEncode(params)\r\n        @1VotingSubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\r\n        @1VotingInvite(\"votingID,var_id\", votingId, $votersRoleId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionReject {\r\n    data {\r\n        votingID int\r\n        RoleId int\r\n    }\r\n    \r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    \r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id: $votingID}).Columns(\"voting->type_participants,voting->role_id,flags->decision,flags->notifics,status\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $RoleId{\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\r\n\r\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $participant_role_id {\r\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning LangRes(\"@1voting_not_participant\", \"en\")\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id: $key_id}).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"@1votings_participants\",Int($rid[\"id\"]),{\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            }\r\n        }\r\n        \r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"@1votings_participants\", Int($participant_id), {decision_date:bt, decision:\"-1\"})\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingValidatorAccept {\r\n    data {\r\n        VotingTemplateId string\r\n        KeyId string\r\n        VotingId string\r\n    }\r\n\r\n    func getRoleId(name string, warn bool) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0 && warn{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    func conditions {\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\"{\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        var appId templateId int params map\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        templateId = Int(AppParam(appId,\"voting_validators_template_id\", 1))\r\n        if !DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:templateId}).One(\"id\"){\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n        if $VotingTemplateId != templateId{\r\n            warning LangRes(\"@1template_incorrect\", \"en\")\r\n        }\r\n\r\n        var candidateId oldRoleId roleId int roleName string\r\n        oldRoleId = getRoleId(\"role_candidate_for_validators\", false)\r\n        roleId = getRoleId(\"role_validator\", true)\r\n\r\n        candidateId = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId}).One(\"candidate_key_id\") //no $ecosystem_id\r\n        if !candidateId {\r\n            warning LangRes(\"@1candidate_key_not_found\", \"en\")\r\n        }\r\n        $oldRoleRowId = Int(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":oldRoleId, \"member->member_id\":candidateId}).One(\"id\"))\r\n\r\n        $roleId = Int(DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:roleId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning LangRes(\"@1validator_role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    func action {\r\n        if $oldRoleRowId > 0 {\r\n            @1RolesUnassign(\"row_id\", $oldRoleRowId)\r\n        }\r\n        @1RolesAssign(\"rid,member_id\", $roleId, Int($KeyId))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorCreate {\r\n    data {\r\n        KeyId int\r\n    }\r\n\r\n    conditions {\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam(appId,\"voting_validators_template_id\", 1))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1VotingTemplateRun(\"TemplateId,Duration,KeyId\", $templateId, 14, $KeyId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorInit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingValidatorInit {\r\n    data {\r\n        KeyId int\r\n    }\r\n    func getRoleId(name string, warn bool) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0 && warn{\r\n            warning Sprintf(LangRes(\"@1role_not_set_eco_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"MainCondition\")\r\n\r\n        var roleId participant_id int\r\n        roleId = getRoleId(\"role_validator\", true)\r\n        participant_id = Int(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":roleId, \"member->member_id\":$KeyId}).One(\"id\"))\r\n        if (participant_id > 0){\r\n            warning LangRes(\"@1candidate_already_validator\", \"en\")  \r\n        }\r\n\r\n        $candidate = DBFind(\"@1sysparams_candidate\").Where({candidate_key_id:$KeyId, deleted:0}).Row() //no $ecosystem_id\r\n        if !$candidate{\r\n            warning LangRes(\"@1candidate_not_found\", \"en\")\r\n        }\r\n    }\r\n    \r\n    action {\r\n        @1DelegateRefresh()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingVesCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingVesCreate {\r\n    data {\r\n        RowId int\r\n    }\r\n\r\n    conditions {\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam(appId,\"voting_ves_template_id\", 1))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1VotingTemplateRun(\"TemplateId,Duration,TableWritten,RowId,ColumnName,NewValue\", $templateId, 3, \"@1ecosystems\", Str($RowId), \"is_valued\", \"1\")\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}