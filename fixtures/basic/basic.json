{
    "name": "Basic",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "basic_paginator",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(GetVar(per_page)){}.Else{\n    SetVar(per_page,25)\n}\nIf(GetVar(Search)!=\"\"){\n    SetVar(Search,)\n}\nIf(GetVar(Sort)!=\"\"){\n    SetVar(Sort,)\n}\nIf(And(GetVar(this_page),GetVar(table))){\n    If(GetVar(Where)!=\"\"){\n        DBFind(#table#).Where(#Where#).Count(table_count)\n    }.ElseIf(GetVar(where)!=\"\"){\n        DBFind(#table#).Where(#where#).Count(table_count)\n    }.Else{\n        DBFind(#table#).Count(table_count)\n    }\n    If(#table_count#>#per_page#){\n        If(#Page#>0){\n            SetVar(prev_page,Calculate(#Page#-1)\n        }.Else{\n            SetVar(Page,0).(prev_page,0)\n        }\n        SetVar(paginator_offset,Calculate(#Page#*#per_page#)).(last_page,Calculate(#table_count#/#per_page#)).(next_page,#last_page#)\n        If(#table_count#>Calculate(#paginator_offset#+#per_page#)){\n            SetVar(next_page,Calculate(#Page#+1)\n        }\n        Div(button-group){\n            If(#Page#>0){\n                Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"Page=0,Search=#Search#,Sort=#Sort#\")\n            }.Else{\n                Button(Body:\"1\", Class:btn btn-default disabled)\n            }\n            If(#Page#>1){\n                Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#prev_page#,Search=#Search#,Sort=#Sort#\")\n            }\n            If(And(#Page#>0,#Page#<#last_page#)){\n                Button(Body:Calculate(#Page#+1), Class:btn btn-default disabled)\n            }\n            If(#next_page#<#last_page#){\n                Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#next_page#,Search=#Search#,Sort=#Sort#\")\n            }\n            If(#Page#<#last_page#){\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"Page=#last_page#,Search=#Search#,Sort=#Sort#\")\n            }.ElseIf(#last_page#>0){\n                Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_roles",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem: 1, name:\"Basic\"}).Vars(application)\nSetVar(role_admin, AppParam(Ecosystem:1, App: #application_id#, Name: role_admin))\nSetTitle($@1role_notifics$)\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\n    DBFind(@1ecosystems).Count(ecos_count)\n    If(#ecos_count#>1){\n        AddToolButton(Title:$@1broadcast_send$, Page: @1notifications_broadcast, Icon: icon-plus)\n    }\n}\nAddToolButton(Title: $@1send$, Page: @1notifications_roles_send, Icon: icon-plus).Popup(Header: $@1create$, Width: \"50\")\nIf(GetVar(Search)){\n    SetVar(Where, {\"ecosystem\":#ecosystem_id#, \"notification->type\":2, \"recipient->role_name\":{\"$like\": #Search#}, \"recipient->role_id\":#role_id#})\n}.Else{\n    SetVar(Where, {\"ecosystem\":#ecosystem_id#, \"notification->type\":2, \"recipient->role_id\":#role_id#}).(Search,)\n}\n\nDBFind(@1notifications,src_notifications).Where(#Where#).Order([{closed: \"1\"},{id: \"-1\"}]).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\n    If(#closed# == 0){\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\n    }.Else{\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n    }\n    Span(Class: #style_text#, Body: #id#)\n}.Custom(_recipient){\n    LinkPage(Class: #style_link# t5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\n        If(#recipient.image_id#>0){\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n            #recipient.role_name#\n        }.Else{\n            Div(){\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                Span(#recipient.role_name#)\n            }.Style(display:flex; align-items:center;)\n        }\n    }\n}.Custom(custom_arrow){\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\n}.Custom(_sender){\n    If(#sender.type#==1){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\n    }\n    If(#sender.type#==2){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\n    }\n}.Custom(_icon){\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\n}.Custom(_page){\n    LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n        #page_name#\n    }\n}.Custom(_date){\n    Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n    Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\n}.Custom(_processing){\n    Div(Class: #style_text# t6){\n        If(#date_start_processing# == NULL){\n           $@1not_started$\n        }.Else{\n            Span(LangRes(@1started), mr-sm) #processing_info.member_name#\n            Span(LangRes(@1at), mr-sm)\n            DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\n        }\n    }\n}.Custom(_status){\n    If(#closed# == 0){\n        Span(Class: #style_text#){\n            If(#date_start_processing# == NULL){\n                LangRes(@1active)\n            }.Else{\n                LangRes(@1processing)\n            }\n        }\n    }.Else{\n        Span(Class: #style_text#, Body: LangRes(@1closed))\n    }\n}.Custom(_actions){\n    Div(text-right){\n        If(#closed# == 0){\n            If(#date_start_processing# == NULL){\n                Button(Class: btn btn-default fa fa-play, Contract: @1NotificationsProcess, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $@1want_start_processing_notification$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }.Else{\n                Button(Class: btn btn-default fa fa-trash, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $@1want_close_notification$, ConfirmButton:$@1yes$, CancelButton: $@1no$, Icon: question)\n            }\n        }\n    }\n}\n\nForm(panel panel-primary){\n    Div(panel-body){\n        Div(row){\n            Div(col-md-12){\n                Div(input-group){\n                    Div(input-group-addon){\n                        LangRes(@1recipient)\n                    }\n                    Input(Name: Search, Value: #Search#)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-default fa fa-search, Page: @1notifications_list, PageParams: \"Search=Val(Search),type=1\")\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-12){\n                Table(Source: src_notifications, Columns: \"$@1icon$=_icon,$@1page$=_page,$@1sender$=_sender,=custom_arrow,$@1recipient$=_recipient,$@1processing$=_processing,$@1sent$ / $@1closed$=_date,$@1status$=_status,=_actions\")\n            }\n        }\n        If(GetVar(Search)){\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    Div(text-center){\n                        Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1notifications_list, PageParams: \"type=1\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_single",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem: 1, name:\"Basic\"}).Vars(application)\nSetVar(role_admin, AppParam(Ecosystem:1, App: #application_id#, Name: role_admin))\nSetTitle($@1single_notifics$)\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\n    DBFind(@1ecosystems).Count(ecos_count)\n    If(#ecos_count#>1){\n        AddToolButton(Title: $@1broadcast_send$, Page: @1notifications_broadcast, Icon: icon-plus)\n    }\n}\n\nAddToolButton(Title:$@1send$, Page: @1notifications_single_send, Icon: icon-plus).Popup(Header: $@1create$, Width: \"50\")\nIf(GetVar(Search)){\n    SetVar(Where,{\"ecosystem\":#ecosystem_id#, \"notification->type\":1, \"recipient->member_name\":#Search#, \"recipient->member_id\":#key_id#})\n}.Else{\n    SetVar(Where,{\"ecosystem\":#ecosystem_id#, \"notification->type\":1, \"recipient->member_id\":#key_id#}).(Search,)\n}\n\nDBFind(@1notifications,src_notifications).Where(#Where#).Order([{closed:\"1\"}, {id:\"-1\"}]).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\n    If(#closed# == 0){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n    }.Else{\n        SetVar(Name: style_text, Value: \"text-muted\")\n        SetVar(Name: style_link, Value: \"text-muted\")\n    }\n    Span(Class: #style_text#, Body: #id#)\n}.Custom(custom_recipient){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\n        If(#recipient.image_id#>0){\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(#recipient.member_name#)\n        }.Else{\n            Div(){\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                Span(#recipient.member_name#)\n            }.Style(display:flex; align-items:center;)\n        }\n    }\n}.Custom(custom_arrow){\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\n}.Custom(custom_sender){\n    If(#sender.type#==1){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n            Span(Body: #sender.member_name#)\n        }\n    }\n    If(#sender.type#==2){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n            Span(Body: #sender.role_name#)\n        }\n    }\n}.Custom(custom_icon){\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\n}.Custom(custom_page){\n    LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n        Span(Body: #page_name#)\n    }\n}.Custom(custom_date){\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n}.Custom(custom_status){\n    If(#closed# == 0){\n        Span(Class: #style_text#, Body: LangRes(@1active))\n    }.Else{\n        Span(Class: #style_text#, Body: LangRes(@1closed))\n    }\n}.Custom(actions){\n    Div(pull-right){\n        If(#closed# == 0){\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list).Alert(Text: $@1want_close_notification$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        }\n    }\n}\n\nForm(panel panel-primary){\n    Div(panel-body){\n        Div(row){\n            Div(col-md-12){\n                Div(input-group){\n                    Div(input-group-addon){\n                        LangRes(@1recipient)\n                    }\n                    Input(Name: Search, Value: #Search#)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-default fa fa-search, Page: @1notifications_list, PageParams: \"Search=Val(Search)\")\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-12){\n                Table(Source: src_notifications, Columns: \"$@1icon$=custom_icon,$@1page$=custom_page,$@1sender$=custom_sender,=custom_arrow,$@1recipient$=custom_recipient,$@1sent$ / $@1closed$=custom_date,$@1status$=custom_status,=actions\")\n            }\n        }\n        If(GetVar(Search)){\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    Div(text-center){\n                        Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1notifications_list)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "If(#ecosystem_id#==1){\n    MenuItem(Title:$@1platform_parameters$, Page:@1sysparams_list, Icon:\"fa icon-settings\")\n}",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")\nMenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")\nMenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"fa icon-people\")\nMenuItem(Title:$@1ecosystems$, Page:@1ecosystems_list, Icon:\"fa fa-list-ul\")\nMenuGroup(Title:$@1admin$, Icon:\"icon-arrow-right\"){\n    MenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"fa fa-list-ul\")\n    MenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"fa fa-edit\")\n    If(#ecosystem_id#==1){\n        MenuItem(Title:$@1tokens_refund$, Page:@1tokenrefund_list, Icon:\"icon-list\")\n        MenuItem(Title:$@1sysparams_candidates$, Page:@1sysparams_candidates_list, Icon:\"icon-list\")\n    }\n}",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "power_of_attorney",
            "Columns": "[\n    {\n        \"conditions\":\"true\",\n\n        \"name\":\"delete\",\n\n        \"type\":\"character\"\n    },\n    {\n        \"conditions\":\"true\",\n\n        \"name\":\"params\",\n\n        \"type\":\"json\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"address\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"date_expiration\",\n        \"type\":\"datetime\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"rid\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"type\",\n        \"type\":\"number\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"date_last_transaction\",\n        \"type\":\"datetime\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"contract\",\n        \"type\":\"varchar\"\n    },\n    {\n        \"conditions\":\"true\",\n        \"name\":\"key_id_attorney\",\n        \"type\":\"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\n    {\n        \"name\": \"commission_address\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"comment\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"host_ip\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"description\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"commission_pub\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidate_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"victim_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"attacker_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"validator_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\",\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\",\\\"@1VotingTokensRefundCreate\\\")\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingTokensRefundCreate\\\")\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\n    {\n        \"name\": \"voters\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidates\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_participants\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"init_contract\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"title\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"quorum\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"subject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_voting\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"volume\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"vacancies\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_accept\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"accept_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_reject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"reject_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"ecosystem\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"count_type_voters\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"false\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[\n    {\n        \"name\": \"flags\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"creator\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"optional\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"progress\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_ended\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_started\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"@1VotingCreate\\\", \\\"@1VotingStatusUpdate\\\", \\\"@1VotingUpdate\\\")\"\n    },\n    {\n        \"name\": \"ecosystem\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[\n    {\n        \"name\": \"member\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"decision_date\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"ecosystem\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingInvite\\\")\", \"update\": \"ContractAccess(\\\"@1VotingDecisionReject\\\",\\\"@1VotingDecisionAccept\\\",\\\"@1VotingCandidateAccept\\\")\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[\n    {\n        \"name\": \"subject\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"number_accept\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"ecosystem\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1APL_not_required,@1APL_required",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1public_org,@1business,@1finance",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "notification_closure",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1single,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "notification_icon",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Type": "app_params"
        },
        {
            "Name": "notification_sender",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1notification_sender_member,@1notification_sender_role",
            "Type": "app_params"
        },
        {
            "Name": "notification_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1single,@1role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1assigned_role,@1elective_role,@1system_role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types_selection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1assigned_role,@1elective_role",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1tokenrefund_result1,@1tokenrefund_result2,@1tokenrefund_result3",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1discussion,@1voting,@1closed",
            "Type": "app_params"
        },
        {
            "Name": "type_voting",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1type_voting_custom,@1type_voting_system",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_decisions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1candidate_requests,@1candidate_manual,@1document,@1database_write,@1contract_run",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_participants",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1everybody,@1manual_add,@1roles_list1,@1roles_list2,@1roles_list3",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "@1waiting,@1valid,@1started,@1finished,@1invalid",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses_classes",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "text-warning,text-success,text-success,text-muted,text-danger",
            "Type": "app_params"
        },
        {
            "Name": "voting_sysparams_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_tokenrefund_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_validators_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_ves_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(appication)\n    DBFind(@1ecosystems,src_num)\n    AppParam(Ecosystem:1, App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\n    AppParam(Ecosystem:1, App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\n    Data(section1, \"name,type,res,req,src\"){\n        Ecosystem_number,select_validate,@1ecosystem,*,src_num\n        Ecosystem_name,input,@1catalog_ecosystems_name,*,\n        Ecosystem_type,select,@1catalog_ecosystems_type,*,src_type\n    }\n    Data(section2, \"name,type,res,req,src\"){\n        Flag_free,radio,@1catalog_ecosystems_freetype,*,src_freetype\n    }\n    Data(section3, \"name,type,res,req,src\"){\n        Description,textarea,@1catalog_ecosystems_description,*,\n        Conditions,textarea,@1catalog_ecosystems_conditions,*,\n    }\n    Data(section4, \"name,type,res,req,src\"){\n        Vde_page,input,@1vde_page,,\n        Vde_form_address,input,@1vde_form_desc,,\n    }\n    Data(section5, \"name,type,res,req,src\"){\n        Web_page,input,@1web_page,,\n        Web_form_address,input,@1web_form_desc,,\n    }\n    Data(section6, \"name,type,res,req,src\"){\n        Email,input,@1catalog_ecosystems_contact_email,,\n        Phone,input,@1catalog_ecosystems_contact_phone,,\n    }\n    Data(sections, \"section_name\"){\n        section1\n        section2\n        section3\n        section4\n        section5\n        section6\n    }\n\n    SetTitle($@1catalog_ecosystems_form$)\n    Div(breadcrumb){\n        LinkPage($@1catalog_ecosystems$, @1catalog_ecosystems_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $@1catalog_ecosystems_form$)\n    }\n\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    ForList(sections){\n                        Div(list-group-item){\n                            ForList(#section_name#){\n                                Div(row){\n                                    Div(col-md-5 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(#res#))\n                                            If(#req#==*){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-7 mb-sm text-left){\n                                        If(#type#==select_validate){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\n                                            InputErr(Name: #name#, required: need)\n                                        }\n                                        If(#type#==select){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                        If(#type#==image){\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\n                                        }\n                                        If(#type#==input){\n                                            Input(Name: #name#)\n                                        }\n                                        If(#type#==textarea){\n                                            Input(Name: #name#, Type:textarea)\n                                        }\n                                        If(#type#==radio){\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1catalog_ecosystems_list)\n                    Button(Contract: @1CatalogAddEcosystem, Class: btn btn-primary pull-right, Page: @1catalog_ecosystems_list, Body: $@1send$)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(appication)\n    SetTitle($@1catalog_ecosystems$)\n    AddToolButton(Title: $@1add$, Page: @1catalog_ecosystems_create, Icon: icon-plus)\n\n    SetVar(Where,{deleted:0})\n    If(#param_flag_free#==0){\n        SetVar(Where,{deleted:0})\n    }.ElseIf(#param_flag_free#==1){\n        SetVar(Where,{deleted:0, flag_free:1})\n    }.ElseIf(#param_flag_free#==2){\n        SetVar(Where,{deleted:0, flag_free:2})\n    }.Else{\n        SetVar(param_flag_free,0)\n    }\n\n    Div(row){\n        Div(col-md-12 text-left){\n            Div(btn-group){\n                If(#param_flag_free#==0){\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $@1all$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $@1all$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==1){\n                    Span(Button(Body: Em(Class: fa fa-user-o) $@1not_need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-user-o) $@1not_need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==2){\n                    Span(Button(Body: Em(Class: fa fa-money) $@1need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-money) $@1need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            DBFind(catalog_ecosystems,src_catalog).Where(#Where#).Order(\"ecosystem_number\").Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\n                LinkPage(Page: @1catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\n                }\n            }.Custom(custom_type){\n                Span(AppParam(Ecosystem:1, App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\n            }.Custom(custom_free){\n                Span(AppParam(Ecosystem:1, App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\n            }.Custom(custom_ecosystem){\n                Span(Class: h5, Body: #ecosystem_number#)\n            }\n\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_catalog, Columns:\"$@1id$=custom_ecosystem,$@1logo$=custom_logo,$@1name$=custom_name,$@1type$=custom_type,$@1freetype$=custom_free\")\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(app)\n    DBFind(catalog_ecosystems,src_catalog).WhereId(#v_id#).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Vars(prefix)\n\n    SetTitle($@1catalog_ecosystems_number$: #prefix_ecosystem_name#)\n    Div(breadcrumb){\n        LinkPage($@1catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\n    }\n\n    Div(row){\n        Div(col-md-10 col-md-offset-1){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#prefix_image_id# > 0){\n                                    DBFind(@1binaries).Where({ecosystem:#ecosystem_id#, id:#prefix_image_id#}).Columns(\"data\").Vars(img)\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\n                                }\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(@1type)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(Ecosystem:1, App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(@1catalog_ecosystems_description)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(@1catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(Ecosystem:1, App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(@1catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1vde_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1vde_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1web_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1web_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1catalog_ecosystems_contact_email))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(@1catalog_ecosystems_contact_phone))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_new",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($@1name$)\n        Span(Class: text-danger, Body:*)\n        Input(Placeholder: $@1ecosystem_name$, Name:Name)\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1ecosystems_list)\n            Button(Body: LangRes(@1create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: @1ecosystems_list)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_ves_template_id))\nDBFind(@1buffer_data).Where({ecosystem:#ecosystem_id#, member_id:#key_id#, key:\"metrics\"}).Vars(m)\nJsonToSource(src_metrics,#m_value#)\n\nDiv(content-wrapper){\n    SetTitle($@1ecosystems$)\n    AddToolButton(Title: $@1update_metrics$, Page: @1ecosystems_metrics_update, Icon: icon-refresh).Popup(Header: $@1update_metrics$, Width: \"30\")\n    AddToolButton(Title: $@1create$, Page: @1ecosystem_new, Icon: icon-plus).Popup(Header: $@1create$, Width: \"30\")\n    \n    If(GetVar(Search)){\n        SetVar(Where,{name:{\"$like\":#Search#}, id:{\"$neq\":1}})\n    }.Else{\n        SetVar(Where,{id:{\"$neq\":1}})\n        SetVar(Search,)\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(@1ecosystem_name)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: @1ecosystems_list, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n\n            DBFind(@1ecosystems, src_ecosystems).Where(\"#Where#\").Custom(_id){\n                Span(#id#)\n            }.Custom(_name){\n                Span(#name#)\n            }.Custom(_metrics){\n                If(#m_id#>0){\n                    SetVar(eco_id,#id#)\n                    ForList(src_metrics){\n                        If(#key#==#eco_id#){\n                            LinkPage(Body: `#value#`, Page: @1sysparams_metrics, PageParams:\"Id=#key#\")\n                        }\n                    }\n                }\n            }.Custom(_votings){\n                Div(text-right){\n                    If(#template_id#>0){\n                        If(#is_valued#==0){\n                            Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                            Input(Name: Duration, Type: hidden, Value: 3)\n                            Input(Name: RowId, Type: hidden, Value: #id#)\n                            Input(Name: NewValue, Type: hidden, Value: 1)\n                            Input(Name: TableWritten, Type: hidden, Value: \"@1ecosystems\")\n                            Input(Name: ColumnName, Type: hidden, Value: \"is_valued\")\n                            Button(Body: $@1start_voting_ves$, Class: btn btn-link, Page: @1ecosystems_list, Contract: @1VotingTemplateRun)\n                        }\n                    }\n                }\n            }.Custom(_valued){\n                If(#is_valued#==1){\n                    is valued\n                }\n            }.Custom(_actions){\n                SetVar(k_id,)\n                DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"sender->member_id\":#key_id#, \"page_params->ecosystem_id\":#id#, closed:0}).Count(notific_count)\n                DBFind(@1keys).Where({id:#key_id#, ecosystem:#id#}).Vars(\"k\")\n\n                If(And(#notific_count#==0,#k_id#==\"\")){\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: @1MembershipRequest, Page: @1ecosystems_list, Params: \"ecosystem_num=#id#\")\n                }\n            }\n\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_ecosystems, Columns: \"$@1ecosystem_name$=_name,$@1metrics$=_metrics,=_valued,=_votings,=_actions\")\n                }\n            }\n\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1ecosystems_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Data(aggregates, \"id,name\"){\n        max,$@1maximum$\n        min,$@1minimum$\n        avg,$@1average$\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Interval){\n                LangRes(@1interval)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: Interval, Type: number)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Aggregate){\n                LangRes(@1aggregate)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1ecosystems_list)\n            Button(Body: LangRes(@1update_metrics), Page: @1ecosystems_list, Class: btn pull-right btn-primary, Contract: @1MetricsUpdate)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($@1ecosystem_members$)\n\n    If(GetVar(Search)){\n        SetVar(Where,{ecosystem:#ecosystem_id#, id:#Search#})\n    }.Else{\n        SetVar(Where,{ecosystem:#ecosystem_id#, id:{\"$neq\":0}}).(Search,)\n    }\n\n    DBFind(@1keys,src_member).Columns(\"id\").Custom(custom_id){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n        Span(Class: h5, Body: #id#)\n        SetVar(m_id, 0)\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Vars(m)\n        If(Or(#m_id#>0,#m_id#<0)){\n            SetVar(image_id, #m_image_id#)\n            SetVar(member_name, #m_member_name#)\n        }.Else{\n            SetVar(image_id, 0)\n            SetVar(member_name, \"\")\n        }\n    }.Custom(custom_member_id){\n        Button(Body: Address(#id#), Class: btn btn-link, Page: @1tokens_transfer, PageParams: \"v_id=#id#\").Popup(Header: $@1tokens_transfer$, Width: \"30\")\n    }.Custom(custom_username){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Where(#Where#).Order(\"id\")\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(@1id)\n                        }\n                        Input(Name: Search, Type:number, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: @1members_list, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_member, Columns: \"$@1name$=custom_username,$@1id$=custom_id,$@1wallet_address$=custom_member_id\")\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1members_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1notifications).Where({id:#notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\n    DBFind(@1ecosystems).Where({id:#notific_page_params_ecosystem_id#}).Vars(ecosystem)\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: $@1membership_request$)\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#notific_sender_image_id#>0){\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x)\n                                }\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(@1ecosystem))\n                        Span(Class: h5 text-bold, Body: \"#ecosystem_name#\" (#ecosystem_id#))\n                    }\n                    If(#notific_closed# == 0){\n                        Div(row){\n                            Div(col-md-12 mt-lg text-center){\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,Accept=1\")\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,Accept=0\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\n    DBFind(@1ecosystems).Where({id: #notific_page_params_ecosystem_id#}).Vars(ecosystem)\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: $@1membership_request$)\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#notific_recipient_image_id#>0){\n                                    Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x)\n                                }\n                                Div(m0 h4 text-bold){#notific_recipient_member_name#}\n                            }\n                        }\n                    }\n                    If(#notific_page_params_status# == 1){\n                        Div(list-group-item text-center){\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\n                            Div(Class: m0 h5 text-bold, Body: $@1is_accepted$!)\n                        }\n                        If(#notific_closed# == 0){\n                            Div(row){\n                                Div(col-md-12 mt-lg text-center){\n                                    Button(Class: btn btn-success, Body: $@1add_ecosystem_to_list$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=@1default_page\")\n                                }\n                            }\n                        }\n                    }.Else{\n                        Div(list-group-item text-center){\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\n                            Div(Class: m0 h5 text-bold, Body: $@1is_rejected$!)\n                        }\n                        If(#notific_closed# == 0){\n                            Div(row){\n                                Div(col-md-12 mt-lg text-center){\n                                    Button(Class: btn btn-danger, Body: $@1close$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1notifications,notification_singles).Where({ecosystem:#ecosystem_id#, closed:0,\"notification->type\": 1, \"recipient->member_id\": #key_id#}).Columns(\"id,page_name,notification->icon,notification->header,notification->body\").Count(count_singles)\n\nDBFind(@1notifications,notification_roles).Where({ecosystem:#ecosystem_id#, closed:0, \"notification->type\": 2, \"recipient->role_id\":#role_id#, {\"$or\":[{date_start_processing: $isnull}, {\"processing_info->member_id\": #key_id#}]}}).Columns(\"id,page_name,notification->icon,notification->header,notification->body,recipient->role_id\").Count(count_current_role)\n\nSetVar(limit,10).(limit_count,#limit#)\nSetVar(remaining,Calculate(#count_singles#+#count_current_role#-#limit#))\n\nIf(And(#limit_count#>0,#count_singles#>0)){\n    ForList(notification_singles){\n        If(#limit_count#>0){\n            SetVar(limit_count,Calculate(#limit_count#-1))\n            Div(list-group-item){\n                LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n                    Div(media-box clearfix){\n                        Div(pull-left){\n                            Em(Class: fa #notification.icon# fa-1x text-primary)\n                        }\n                        Div(media-box-body){\n                            Div(Class: m0 text-normal, Body: #notification.header#)\n                            Div(Class: m0 text-muted h6, Body: #notification.body#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf(And(#limit_count#>0,#count_current_role#>0)){\n    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#role_id#}).Columns(\"role_name\").Vars(role)\n    Div(h6 mb-sm mt-lg ml-lg text-muted){\n        $@1role_notifics$ (#role_role_name#):\n    }\n    ForList(notification_roles){\n        If(#limit_count#>0){\n            SetVar(limit_count,Calculate(#limit_count#-1))\n            Div(list-group-item){\n                LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n                    Div(media-box clearfix){\n                        Div(pull-left){\n                            Em(Class: fa #notification.icon# fa-1x text-primary)\n                        }\n                        Div(media-box-body){\n                            Div(Class: m0 text-normal, Body: #notification.header#)\n                            Div(Class: m0 text-muted h6, Body: #notification.body#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf(#remaining#>0){\n    Button(Class: btn btn-block btn-default, Page: @1notifications_list){\n        $@1notifications_show_all$ (#remaining# $@1more$)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_broadcast",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nSetVar(role_admin, AppParam(Ecosystem:1, App: #application_id#, Name: role_admin))\nSetTitle($@1notifications_broadcast$)\nDBFind(@1ecosystems).Count(ecos_count)\nSetVar(left_col,\"col-sm-3 mt text-right\").(right_col,\"col-sm-9\")\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($@1notifications$, @1notifications_list)\n        Span(/,mh)\n        Span($@1broadcast_send$,text-muted)\n    }\n\n    Div(row){\n        Div(col-sm-6 col-sm-offset-3){\n            If(And(#role_id#==#role_admin#,#ecosystem_id#==1,#ecos_count#>1)){\n                DBFind(@1roles,src_roles).Where({role_type:3, ecosystem:2}).Columns(\"id,role_name\")\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(@1header)\n                            }\n                            Div(#right_col#){\n                                Input(Name: Header, Type: textarea)\n                            }\n                        }\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(@1body_text)\n                            }\n                            Div(#right_col#){\n                                Input(Name: Body, Type: textarea)\n                            }\n                        }\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(@1recipient)\n                            }\n                            Div(#right_col# mt){\n                                LangRes(@1ecosystems_administrators)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list)\n                        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Contract: @1NotificationsBroadcast, Params: \"RoleId=#role_id#\", Page: @1notifications_list)\n                    }\n                }\n            }.Else{\n                Div(col-sm-12 alert alert-warning text-center){\n                    If(#role_id#!=#role_admin#){\n                        LangRes(@1only_admin_action)\n                    }\n                    If(#ecosystem_id#!=1){\n                        LangRes(@1only_first_ecosystem_action)\n                    }\n                    If(#ecos_count#==1){\n                        LangRes(@1other_ecosystems_not_found)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#type#==0,#type#==1)){\n    }.Else{\n        SetVar(Name: type, Value: 0)\n    }\n    Div(row){\n        Div(col-md-12){\n            Div(btn-group){\n                If(#type#==0){\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $@1single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $@1single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#type#==1){\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(col-md-12){\n            If(#type#==0){\n                Include(@1notifications_single)\n            }\n            If(#type#==1){\n                Include(@1notifications_roles)\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_roles_send",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nForm(){\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                DBFind(@1roles,source_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\")\n                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1closure_type)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mc-sm text-left){\n                AppParam(Ecosystem: 1, App: #application_id#, Name: notification_closure, Source: src_closure_type)\n                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mc-sm text-left){\n                AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\n                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\n                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1body_text))\n                }\n            }\n            Div(col-md-9 mc-sm text-left){\n                Input(Name: text_body, Value: \"Body text\")\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\n                InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1params))\n                }\n            }\n            Div(col-md-9 mc-sm text-left){\n                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n            }\n        }\n\n    }\n    Div(row mt-lg){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\n            Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1notifications_list, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_show",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nSetTitle($@1notifications_view$)\n\nSetVar(type,0).(header,).(body,)\nDiv(content-wrapper){\n\n    If(#notific_id#>0){\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\n        SetVar(type,#note_sender_type#)\n        SetVar(header,#note_notification_header#)\n        SetVar(body,#note_notification_body#)\n\n\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading text-center){\n                        #header#\n                    }\n                    Div(panel-body){\n                        #body#\n                    }\n                    Div(panel-footer text-right){\n                        If(#type# == 1){\n                            If(#note_closed# == 0){\n                                Button(Body: LangRes(@1understand), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n                            }\n                        }.ElseIf(#type# == 2){\n                            If(#note_closed#==0){\n                                If(#note_date_start_processing#==\"\"){\n                                    Button(Body: LangRes(@1understand), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_show)\n                                }.Else{\n                                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            LangRes(@1attention)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_single_send",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nForm(){\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#}).Columns(\"id\").Custom(_name){\n                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n                    Address(#id#)\n                    If(Or(#m_id#>0,#m_id#<0)){\n                        \" (#m_member_name#)\"\n                    }\n                }\n                Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\n                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\n                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1body_text))\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: text_body, Value: \"Body text\")\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\n                InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1params))\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n            }\n        }\n\n    }\n    Div(row mt-lg){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list)\n            Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1notifications_list, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\n    SetTitle($@1test_page$)\n\n    If(#notific_id#>0){\n        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\n        SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(@1attention))\n        }\n        SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-default){\n                Div(panel-body){\n                    Div(list-group-item text-center){\n                        Span(Class: h3, Body: #notific_header#)\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1id))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_id#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#notification_type# > 0){\n                                    Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notification_type#)\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1sender))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#sender_type# > 0){\n                                    Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_sender, Index: #sender_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #sender_type#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1value_number))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_int#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1value_string))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_str#)\n                            }\n                        }\n                    }\n                }\n                If(#notification_type# == 1){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list).Alert(Text: $@1want_close_notification$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                        }\n                    }\n                }\n                If(#notification_type# == 2){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            If(#prefix_date_start_processing# == \"\"){\n                                Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $@1want_start_processing_notification$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $@1want_close_notification$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_avatar_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($@1avatar$)\n        Span(Class: text-danger, Body:*)\n        Input(Name: member_image, Type: file)\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Contract: @1ProfileEditAvatar, Page: @1profile_edit, PageParams:\"v_member_id=#v_member_id#,avatar_uploaded=1\")\n            Button(Body: LangRes(@1close), Class: btn btn-default, Page: @1profile_edit, PageParams:\"v_member_id=#v_member_id#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    SetTitle($@1editing_profile$)\n    Div(breadcrumb){\n        LinkPage($@1user_info$, @1profile_view)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $@1editing_profile$)\n    }\n\n    SetVar(prefix_image_id, 0)\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#v_member_id#}).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\n    }.Else{\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#key_id#}).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\n    }\n\n    DBFind(@1buffer_data).Columns(\"value->image_id\").Where({ecosystem:#ecosystem_id#, key:avatar, member_id:#key_id#}).Vars(avatar)\n    If(And(#avatar_value_image_id#>0,#avatar_uploaded#==1)){\n        SetVar(prefix_image_id, #avatar_value_image_id#)\n    }\n\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(@1editing_profile))\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-5 mt-lg text-center){\n                            Button(Class: btn btn-link, Page: @1profile_avatar_edit, PageParams: \"v_member_id=#key_id#\"){\n                                If(#prefix_image_id#>0){\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\n                                }\n                            }.Popup(Header: $@1editing_profile$, Width: 30)\n                        }\n                        Div(col-md-7 mc-sm text-left){\n                            Div(form-group){\n                                Label(){\n                                    Span(Body: LangRes(@1member_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\n                                }.Else{\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\n                                    InputErr(Name: member_name, minLength: $@1validate_member_name$, maxLength: $@1validate_member_name$)\n                                }\n                            }\n                            Div(form-group){\n                                If(GetVar(prefix_member_info_information)){\n                                    Label(){\n                                        Span(Body: LangRes(@1information))\n                                    }\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\n                                }.Else{\n                                    Label(){\n                                        Span(Body: LangRes(@1information))\n                                    }\n                                    Input(Name: information, Type: textarea)\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1profile_view, PageParams: \"v_member_id=#v_member_id#\")\n                    Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1profile_view, Params:\"image_id=#prefix_image_id#\", PageParams: \"v_member_id=#v_member_id#\", Contract: @1ProfileEdit).Alert(Text: $@1want_save_changes$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n        SetVar(v_member_id,#key_id#)\n    }\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#v_member_id#}).Columns(\"id,image_id,member_name,member_info->information\").Vars(prefix)\n    DBFind(@1keys).Where({ecosystem:#ecosystem_id#, id:#v_member_id#}).Vars(tokens)\n\n    If(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(prefix_member_name,)\n    }\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(text-center text-bold h4 m0){\n                        LangRes(@1user_info)\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    If(#prefix_id# == #key_id#){\n                                        Button(Class: btn btn-link, Page: @1profile_edit, PageParams: \"v_member_id=#key_id#\"){\n                                            If(#prefix_image_id#>0){\n                                                Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                            }.Else{\n                                                Span(Class: fa icon-user fa-5x text-primary)\n                                            }\n                                            Div(m0 h4 text-bold){\n                                                #prefix_member_name#\n                                                If(#role_id# > 0){\n                                                    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#role_id#}).Columns(\"role_name\").Vars(role)\n                                                    Span(Body: \" (#role_role_name#)\")\n                                                }\n                                            }\n                                        }\n                                    }.Else{\n                                        If(#prefix_image_id#>0){\n                                            Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                        }.Else{\n                                            Span(Class: fa icon-user fa-5x)\n                                        }\n                                        Div(m0 h4 text-bold){#prefix_member_name#}\n                                    }\n                                    Div(Class: h5 text-muted m0, Body: #prefix_member_info_information#)\n                                }.Else{\n                                    Div(text-muted m0 h5, Body: LangRes(@1wallet_address))\n                                    Div(Class: h5, Body: Address(#key_id#))\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\n                                        Div(Class: h5 m0, Body: LangRes(@1editing_profile))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center mb){\n                        Div(text-muted m0 h5, Body: LangRes(@1roles))\n                        DBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#v_member_id#, deleted:0}).Columns(\"id\").Vars(check)\n                        If(#check_id#>0){\n                            DBFind(@1roles_participants,src_roles).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#v_member_id#, deleted:0}).Columns(\"role->id,role->name\").Order(\"id\")\n                            ForList(src_roles){\n                                Span(){\n                                    LinkPage(Page: @1roles_view, PageParams: \"v_role_id=#role.id#\"){\n                                        Span(Class: h5, Body: \"#role.name#\")\n                                    }\n                                }.Style(margin-right: 6px; margin-left: 6px;)\n                            }\n                        }.Else{\n                            Span(LangRes(@1no))\n                        }\n                        If(#v_member_id# == #key_id#){\n                            SetVar(founder_account, EcosysParam(\"founder_account\"))\n                            If(#founder_account# != #key_id#){\n                                Div(){\n                                    Button(Class: btn btn-link, Page: @1roles_request, Body: LangRes(@1request)).Popup(Header: $@1request$, Width: \"30\")\n                                }\n                            }\n                        }\n                    }\n                    If(#prefix_id# == #key_id#){\n                        Div(list-group-item mb){\n                            P(Class: text-center text-bold h4 m0, Body: LangRes(@1tokens_transfer))\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-12 mt text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(@1balance))\n                                        Span(Class: h5 text-bold, Body: Money(#tokens_amount#) APL)\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-12 mt text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(@1wallet_address))\n                                        Span(Class: h5, Body: Address(#prefix_id#))\n                                    }\n                                }\n                            }\n                            Div(text-center){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(@1recipient))\n                                    }\n                                    Div(col-md-9 mb-sm text-left){\n                                        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(@1amount))\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: Amount, Type: Number)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-12){\n                                Button(Body: LangRes(@1send), Class: btn btn-default pull-right, Page: @1profile_view, Contract: @1TokensSend).Alert(Text: $@1want_send_tokens$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_assign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({name:\"Basic\", ecosystem:1}).Vars(application)\nIf(#v_role_id#>0){\n    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, id:#v_role_id#}).Columns(\"id,role_name,role_type,roles_access,creator->member_id\").Vars(prefix)\n\n    If(#prefix_creator_member_id#==#key_id#){\n        SetVar(manager_id,1)\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0)){\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_roles_access#}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\n    }.Else{\n        SetVar(manager_id,0)\n    }\n\n    Form(){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1role))\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Type: hidden, Name: rid, Value: #prefix_id#)\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type) Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                SetVar(Name: var_prefix_role_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\n                If(#manager_id#==0){\n                    P(Class: m0 text-danger h6, Body: LangRes(@1appointment_impossible))\n                }\n            }\n        }\n        If(#manager_id#>0){\n            SetVar(participants,0)\n            DBFind(@1roles_participants).Where({\"role->id\":#v_role_id#, deleted:0, ecosystem:#ecosystem_id#}).Columns(\"id,member->member_id\").Custom(_id){\n                SetVar(participants,\"#participants#,#member.member_id#\")\n            }\n            DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#participants#]}}).Columns(\"id\").Custom(_name){\n                SetVar(m_id, 0)\n                DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n                Address(#id#)\n                If(Or(#m_id#>0,#m_id#<0)){\n                    \" (#m_member_name#)\"\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1member)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-lg text-left){\n                    Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\")\n                If(#manager_id#>0){\n                    Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: @1RolesAssign, Params: \"member_id=Val(member_id)\").Alert(Text: $@1want_assign_member_to_role$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns([\"name\", \"id\"]).Where({ecosystem:1, \"name\": \"Basic\"}).Vars(application)\n\nDBFind(@1roles).Columns([\"role_name\", \"id\"]).Where({ecosystem:#ecosystem_id#, deleted:0, id:#role_id#}).Order(id).Vars(admin_role)\nSetVar(admin_role_name, #admin_role_role_name#)\n\nIf(GetVar(rid)){\n    DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#rid#}).Columns(\"roles_access,id,role_type,role_name\").Vars(role)\n    SetVar(title, $@1edit_role$)\n    SetVar(role_type, AppParam(Ecosystem:1, App:#application_id#, Name: roles_types_selection, Index: #role_role_type#))\n\n    If(And(#role_roles_access#!=\"NULL\",#role_roles_access#!=\"\",#role_roles_access#!=\"[]\")){\n        DBFind(@1roles,src_roles_access).Where({ecosystem:#ecosystem_id#, id:{\"$in\":#role_roles_access#}}).Columns(\"id,role_name\").Order(role_name)\n    }\n}.Else{\n    SetVar(rid, 0)\n    SetVar(title, $@1new_role$)\n    AppParam(Ecosystem:1, App: #application_id#, Name: roles_types_selection, Source: app_roles_types)\n\n    DBFind(@1buffer_data).Columns(value).Where({ecosystem:#ecosystem_id#, \"key\": \"roles_access\", \"member_id\": #key_id#}).Vars(buffer)\n    If(And(#buffer_value#!=\"NULL\",#buffer_value#!=\"\",#buffer_value#!=\"[]\",GetVar(buffer_value)!=\"\")){\n        DBFind(@1roles, src_roles_access).Columns(\"id,role_name\").Where({ecosystem:#ecosystem_id#, \"id\": {\"$in\": #buffer_value#}}).Order(role_name)\n    }\n}\nDBFind(@1roles, src_roles).Columns([\"id\", \"role_name\"]).Where({ecosystem:#ecosystem_id#, \"deleted\":0}).Order(id)\nIf(GetVar(back_page)){}.Else{\n    SetVar(back_page,\"@1roles_list\")\n}\nIf(GetVar(vID)){}.Else{\n    SetVar(vID,)\n}\n\nForm(){\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: name){\n                LangRes(@1name)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            If(#rid# > 0){\n                Div(text-muted mt-sm){\n                    #role_role_name#\n                }\n            }.Else{\n                Input(Name: role_name).Validate(minLength:3, maxLength:30)\n                InputErr(Name: role_name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: role_type){\n                LangRes(@1type)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            If(#rid# > 0){\n                Div(text-muted mt-sm){\n                    #role_type#\n                }\n            }.Else{\n                Select(Name: role_type, Source: app_roles_types, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: role_managers){\n                LangRes(@1roles_access)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            Div(input-group mb-sm){\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Class: btn btn-primary fa fa-plus, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: @1RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\n                }\n            }\n            ForList(src_roles_access){\n                SetVar(btn_class,\"btn-default\")\n                If(#id#==#role_id#){\n                    SetVar(btn_class,\"btn-info\")\n                }\n                Button(Class: btn #btn_class# mr-sm mb-sm, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: @1RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\n            }\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n            If(#rid#>0){}.Else{\n                Button(Body: LangRes(@1create), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1RolesCreate)\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle($@1roles$)\nAddToolButton(Page: @1roles_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_role$)\n\nDiv(content-wrapper){\n    DBFind(@1applications).Where({name:\"Basic\", ecosystem:1}).Columns(\"name,id\").Vars(application)\n\n    If(GetVar(search)){\n        SetVar(where,{role_name:{\"$like\":#search#}, ecosystem:#ecosystem_id#})\n    }.Else{\n        SetVar(where,{id:{\"$neq\":0}, ecosystem:#ecosystem_id#}).(search,)\n    }\n\n    DBFind(@1roles,src_roles).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Count(roles_count).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access\").Custom(_id){\n        If(#deleted# == 0){\n            SetVar(style_text,).(style_link,\"text-primary\")\n        }.Else{\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(_creator){\n        If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\n            LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n                #creator.member_name#\n            }\n        }\n    }.Custom(_name){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n                #role_name#\n            }.Else{\n                Div(){\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(_date){\n        Div(#style_text# small){\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\n        }\n    }.Custom(_type){\n        Span(Class: #style_text#, Body: AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #role_type#))\n    }.Custom(_status){\n        Span(Class:#style_text#){\n            If(#deleted# == 0){\n                LangRes(@1active)\n            }.Else{\n                LangRes(@1deleted)\n            }\n        }\n    }.Custom(_access){\n        If(#creator.member_id#==#key_id#){\n            SetVar(access,done)\n        }.Else{\n            SetVar(access,)\n        }\n\n        If(And(#roles_access#!=\"NULL\",#roles_access#!=\"\",#roles_access#!=\"[]\")){\n            DBFind(@1roles,src_roles_list).Where({id:{\"$in\":#roles_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\n            Div(#style_text# breaker){\n                ForList(src_roles_list){\n                    If(And(#role_id#==#id#)){\n                        SetVar(access,done)\n                    }\n\n                    If(#access_count#!=#src_roles_list_index#){\n                        Span(\"#role_name#,\",mr-sm)\n                    }.Else{\n                        #role_name#\n                    }\n                }\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right button-group text-nowrap){\n            If(#access#==\"done\"){\n                If(And(#deleted#==0,#role_type#!=3)){\n                    Button(Class: fa fa-trash btn btn-danger mh-sm, Contract: @1RolesDelete, Params: \"ops=D,rid=#id#\", Page: @1roles_list).Alert(Text: $@1sure_want_delete$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }.ElseIf(#deleted#==1){\n                    Button(Class: fa fa-recycle btn btn-info mh-sm, Contract: @1RolesDelete, Params: \"ops=R,rid=#id#\", Page: @1roles_list)\n                }\n                Button(Class: fa fa-edit btn btn-default mh-sm, PageParams: \"rid=#id#\", Page: @1roles_create).Popup(50, $@1edit_role$)\n            }\n        }\n    }\n    Form(panel panel-primary){\n        If(#roles_count#>0){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(input-group){\n                            Div(input-group-addon mt-sm){\n                                LangRes(@1role)\n                            }\n                            Input(Name: search, Value: #search#)\n                            Div(input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: @1roles_list, PageParams: \"search=Val(search)\")\n                            }\n                        }\n                    }\n                }\n                Div(table-responsive){\n                    Table(src_roles,\"$@1role$=_name,$@1type$=_type,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1roles_access$=_access,=_actions\")\n                }\n            }\n            If(GetVar(search)){\n                Div(row){\n                    Div(col-md-12 mt-lg text-center){\n                        Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1roles_list)\n                    }\n                }\n            }\n        }.Else{\n            Div(panel-body text-center h3){\n                Button(Body: $@1install_default_roles$, Class: btn btn-primary, Page: @1roles_list, Contract: @1RolesInstall)\n            }\n        }\n    }\n}.Style(\n    .inline {display:inline-block;}\n    .breaker {word-break: break-all;}\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:1, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\n        If(#roles_count#==0){\n            Div(Body: LangRes(@1send_not_possible))\n            Div(Body: LangRes(@1no_assigned_roles))\n        }.Else{\n            Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n        }\n    }\n    Div(form-group){\n        If(#roles_count#>0){\n            Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Contract: @1RolesRequest, Page: @1profile_view)\n        }\n        Button(Body: LangRes(@1close), Class: btn btn-default pull-right, Page: @1profile_view)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: $@1request_to_role$)\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#notific_sender_image_id#>0){\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x)\n                                }\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\n                    }\n                    Div(list-group-item text-center){\n                        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#notific_page_params_rid#}).Columns(\"role_name\").Vars(r)\n                        Div(text-muted m0 h5, Body: LangRes(@1role))\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\n                    }\n                    If(#notific_closed# == 0){\n                        Div(row){\n                            Div(col-md-12 mt-lg text-center){\n                                Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\n                                Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=0\")\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=1\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#v_role_id# > 0){\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#v_role_id#}).Columns(\"role_name,role_type,deleted,roles_access,creator->member_id\").Vars(prefix)\n        SetTitle($@1role$: #prefix_role_name#)\n        If(#prefix_creator_member_id#==#key_id#){\n            SetVar(manager_id,1)\n        }.ElseIf(And(#prefix_deleted#==0,#prefix_role_type#!=2)){\n            If(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0)){\n                DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_roles_access#}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\n            }\n        }\n        If(#manager_id#>0){\n            AddToolButton(Page: @1roles_assign, PageParams: \"v_role_id=#v_role_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\n        }\n        Div(breadcrumb){\n            LinkPage($@1roles$, @1roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n\n        DBFind(@1roles_participants,src_participants).Where({ecosystem:#ecosystem_id#, \"role->id\":#v_role_id#}).Order({deleted:\"1\", id:\"1\"}).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Class:#style_link# h5 text-bold, Page: @1voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#member.image_id#>0){\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(@1active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(@1deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1RolesUnassign, Params: \"row_id=#id#\", Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $@1sure_want_delete_member$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }\n            }\n        }\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(@1attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidate_validators_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n\n    SetTitle($@1sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage(Body: $@1sysparams_candidates$, Page: @1sysparams_candidates_list)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $@1sysparams_candidate_validators_form$)\n    }\n\n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(@1host_ip))\n                        Span(Class: text-danger, Body:*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: $@1ip_short$, maxLength: $@1ip_long$)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(@1commission_pub))\n                            Span(Class: text-danger, Body:*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: $@1public_key_invalid$)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(@1commission_address))\n                        Span(Class: text-danger, Body:*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: $@1address_invalid$, maxLength: $@1address_invalid$)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(@1description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(@1comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n                Div(panel-footer text-right){\n                    Div(pull-left){\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_candidates_list)\n                    }\n                    Button(Contract: @1CandidateValidatorRequest, Class: btn btn-primary, Page: @1sysparams_candidates_list, Body: $@1send_request$)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\n    SetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_validators_template_id))\n    SetTitle($@1sysparams_candidates$)\n\n    If(GetVar(search)){\n        SetVar(where,{host_ip:#search#,\"deleted\":0})\n    }.Else{\n        SetVar(where,{\"deleted\":0}).(search,)\n    }\n    \n    DBFind(@1sysparams_candidate,src_candidates).Where(#where#).Custom(_actions){\n        If(#template_id#>0){\n            Form(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n                Input(Name: Duration, Type: hidden, Value: 14)\n                Button(Contract: @1VotingTemplateRun, Page: @1voting_list, Class: btn btn-default fa fa-play)\n            }\n        }.Else{\n            Span($@1voting_template_not_found$,text-muted)\n        }\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }.Custom(_addr){\n        Address(#commission_address#)\n    }.Custom(custom_username){\n        DBFind(members).WhereId(#commission_address#).Vars(user)\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#user_id#\"){\n            If(#user_image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#user_member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#user_member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Count(count)\n\n    AddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1sysparams_candidate_validators_create).Popup(50, $@1create_request$)\n\n    Div(panel panel-primary){\n        Form(){\n            If(#count#>0){\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-12){\n                            Div(input-group){\n                                Div(input-group-addon mt-sm){\n                                    IP\n                                }\n                                Input(Name: search,Value: #search#)\n                                Div(input-group-btn){\n                                    Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: @1sysparams_candidates_list, PageParams: \"search=Val(search)\")\n                                }\n                            }\n                        }\n                    }\n                    Div(table-responsive){\n                        Table(Source: src_candidates, Columns: \"$@1host_ip$=host_ip,$@1name$=custom_username,$@1id$=commission_address,$@1commission_address$=_addr,$@1description_equipment$=description,$@1comment$=comment,$@1date_created$=_date,$@1voting$=_actions\")\n                    }\n                }\n                If(GetVar(search)){\n                    Div(row){\n                        Div(col-md-12 mt-lg text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1sysparams_candidates_list)\n                        }\n                    }.Style(padding-bottom:10px;)\n                }\n            }.Else{\n                Div(h3 text-muted text-center){\n                    $@1candidates_404$\n                }\n                If(GetVar(search)){\n                    Div(row){\n                        Div(col-md-12 mt-lg text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-primary, Page: @1sysparams_candidates_list)\n                        }\n                    }.Style(padding-bottom:10px;)\n                }\n            }\n        }\n    }\n}\n  ",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"id\").Vars(application)\nSetVar(role_validator, AppParam(Ecosystem:1, App:#application_id#, Name: role_validator))\nSetTitle($@1platform_parameters$)\nJsonToSource(nodes){\n    SysParam(full_nodes)\n}\nForList(nodes){\n    Div(#key_id#)\n}\nDBFind(@1system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\n    SetVar(sp_id,0)\n    DBFind(@1contracts).Where({ecosystem:1, name:#name#}).Columns(id).Vars(sp)\n    If(#sp_id#>0){\n        LinkPage(Class: fa fa-edit, Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\n    }.Else{\n        $@1contract_404$\n    }\n}.Custom(_val){\n    Div(){\n        #value#\n    }.Style(max-width: 500px;overflow: hidden;)\n}\nDiv(){\n    Div(breadcrumb){\n        Div(Class:text-muted, Body: $@1platform_params_desc$)\n    }\n    DBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\n    If(#validator_id#>0){\n        AddToolButton(Title: $@1sysparams_validator_resign$, Icon: icon-pin, Page: @1sysparams_validator_resign)\n    }\n    Div(table-responsive){\n        Table(src_sysparams,\"$@1name$=name,$@1value$=_val,=_actions\")\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n    }\n    tr > *:last-child {\n        padding-right:30px;\n        text-align:right;\n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n    table a {\n        font-size: 18px;\n    }\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: LangRes(@1ecosystems_list), Page: @1ecosystems_list)\n        Span(\"/\",mh-sm)\n        Span(LangRes(@1sysparams_metrics), text-muted)\n    }\n    SetVar(title,\"LangRes(@1sysparams_metrics)\")\n    SetTitle(#title#)\n    Div(container){\n        If(GetVar(Id)){\n            SetVar(title,\"LangRes(@1sysparams_metrics): LangRes(@1ecosystem) ##Id#\")\n            SetTitle(#title#)\n            Data(tables, \"Name,Metric\"){\n                pages,ecosystem_pages\n                members,ecosystem_members\n                tx,ecosystem_tx\n            }\n            ForList(tables){\n                DBFind(@1metrics,src_metric).Where({key:#Id#, metric:#Metric#}).Order(\"time\").Count(count)\n                If(#count#>0){\n                    Div(h3){LangRes(#Name#)}\n                    Table(src_metric,\"$@1timestam$=time,$@1value$=value\")\n                }\n            }\n        }.Else{\n            Div(alert alert-warning){\n                Ecosystem id not found\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_validator_resign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"id\").Vars(application)\nSetVar(role_validator, AppParam(Ecosystem:1, App:#application_id#, Name: role_validator))\nDBFind(@1roles_participants).Where({ecosystem:#ecosystem_id#, \"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\nSetTitle($@1sysparams_validator_resign$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body:$system_params$, Page: @1sysparams_list)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $@1sysparams_validator_resign$)\n    }\n    If(#validator_id#>0){\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Div(panel panel-primary text-center){\n                    Div(panel-heading){\n                        $@1validator_removing$\n                    }\n                    Div(panel-body text-center){\n                        $@1validator_removing_desc$\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: $@1back$, Class: btn btn-default, Page: @1sysparams_list)\n                        Button(Body: $@1resign$, Class: btn btn-danger pull-right, Page: @1sysparams_list, Contract: @1ValidatorResign).Alert(Text: $@1want_resign$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(text-danger text-center text-bold){\n            LangRes(@1attention_not_validator)\n        }\n    }\n\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(tid, AppParam(Ecosystem:1, App:#application_id#, Name: voting_sysparams_template_id))\nDBFind(@1voting_templates,temps).WhereId(#tid#).Vars(template)\nSetTitle($@1voting$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($@1system_params$, @1sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $@1voting$)\n    }\n\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\n        DBFind(@1system_parameters).Where({name:#param_name#}).Vars(param)\n        DBFind(@1voting_templates).WhereId(#template_id#).Columns(\"title,id\").Vars(template)\n        SetTitle(#template_title#)\n        If(#param_name#!=\"full_nodes\"){\n            Form(){\n                Div(form-group){\n                    Label(For: ColumnName){\n                        LangRes(@1name)\n                    }\n                    Input(Name: ColumnName, Value: #param_name#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: Duration){\n                        LangRes(@1duration)\n                    }\n                    Input(Name:Duration, Value:21, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: TemplateId){\n                        LangRes(@1template_id)\n                    }\n                    Input(Name: TemplateId, Value:#template_id#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: Value){\n                        LangRes(@1value)\n                    }\n                    Input(Name: Value, Value: #param_value#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(){\n                        LangRes(@1new_value)\n                    }\n                    Input(Name: NewValue, Type: textarea)\n                }\n                Div(text-left){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\n                    Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingTemplateRun, Page: @1voting_list)\n                }\n            }\n        }.Else{\n            SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(Ecosystem:1, App:#application_id#, Name: first_node)).(first_node_set,)\n            SetTitle(\"#param_name#: $@1add$ $@1new_value$\")\n            Form(){\n                If(`#full_nodes#`==\"\"){\n                    JsonToSource(src_first_node,#first_node#)\n                    ForList(src_first_node){\n                        If(#value#==\"\"){\n                            SetVar(first_node_set,error)\n                        }\n                    }\n                    If(#first_node_set#==error){\n                        Div(text-center){\n                            ForList(src_first_node){\n                                If(#value#==\"\"){\n                                    Div(){first node: '#key#' empty}\n                                }\n                            }\n                        }\n                        Div(text-center){\n                            DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, name:first_node}).Vars(first_node_param)\n                            Button(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=@1sysparams_list\"){\n                                Install the first node before adding the new\n                            }\n                        }\n                    }\n                }\n                If(#first_node_set#!=error){\n                    Div(form-group){\n                        Label(For: Duration){\n                            LangRes(@1duration)\n                        }\n                        Input(Name:Duration, Value:21, Disabled: true)\n                    }\n                    Div(form-group){\n                        Label(For: TcpAddress){\n                            LangRes(@1tcp_address)\n                        }\n                        Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\n                    }\n                    Div(form-group){\n                        Label(For: ApiAddress){\n                            LangRes(@1api_address)\n                        }\n                        Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\n                    }\n                    Div(form-group){\n                        Label(For: KeyId){\n                            LangRes(@1node_founder_key_id)\n                        }\n                        Input(Name: KeyId,Type: number, Value: #key_id#)\n                    }\n                    Div(form-group){\n                        Label(For: PubKey){\n                            LangRes(@1node_pub_key)\n                        }\n                        Input(Name: PubKey, Type: textarea)\n                    }\n\n                    Div(text-left mb-lg){\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\n                        Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingNodeAdd, Page: @1voting_list)\n                    }\n                }\n            }\n            AppParam(Ecosystem:1, App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\n            SetVar(node_owner,)\n            ForList(nodes_keys){\n                If(#name#==\"key_id\"){\n                    SetVar(node_owner, 1)\n                }\n            }\n\n            If(#node_owner#==1){\n                Form(text-center){\n                    Div(h3){$delete_node$}\n                    Div(){$delete_node_desc$}\n                    Div(text-right){\n                        Button(Body: LangRes(@1delete), Class: btn btn-danger, Page: @1sysparams_list, Contract: @1NodeRemoveByKey)\n                    }\n                }\n            }\n            If(`#full_nodes#`!=\"\"){\n                ArrayToSource(src_full_nodes,`#full_nodes#`)\n                Div(mt-lg form-group text-left text-muted){\n                    Label(){Nodes list}\n                    ForList(src_full_nodes){\n                        JsonToSource(src_node,`#value#`)\n                        Div(list-group-item){\n                            Label(){node #key#}\n                            ForList(src_node){\n                                Div(){\n                                    Strong(#key#:) #value#\n                                }\n                            }\n                        }\n                    }\n                }.Style(word-break: break-all;)\n            }\n        }\n    }.Else{\n        Div(text-danger text-center text-bold){\n            If(#param_index#>0){}.Else{\n                Div(){LangRes(@1attention)}\n            }\n            If(#tid#>0){\n                If(#template_id#>0){}.Else{\n                    Div(mb-sm){\n                        LangRes(@1voting_template_not_found)\n                    }\n                    LinkPage(Page: @1voting_templates_list, Class: btn btn-info){\n                        Set the template\n                    }\n                }\n            }.Else{\n                Div(mb-sm){\n                    LangRes(@1voting_template_id_not_found)\n                }\n                DBFind(@1app_params).Where({ecosystem:#ecosystem_id#, name:voting_sysparams_template_id}).Vars(template_param)\n                LinkPage(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"back_page=@1sysparams_list,id=#template_param_id#\"){\n                    Set the template ID\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_accept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, #notific_id#}).Columns(\"id,page_params->tokenrefund_id,closed\").Vars(note)\n    DBFind(@1tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\n\n    Data(inputs,\"Name,Type,Res,Value\"){\n        Amount,number,amount,#tr_amount#\n        VictimAccount,text,tokens_refund_victim,#tr_victim_key_id#\n        SuspectAccount,text,tokens_refund_attacker,#tr_attacker_key_id#\n        Note,textarea,description,#tr_note#\n    }\n    Div(content-wrapper){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading, Body: $@1tokens_refund$)\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-sm-4){LangRes(#Res#)}\n                                Div(col-sm-8){\n                                    If(#Type#==textarea){\n                                        #Value#\n                                    }.Else{\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        If(#note_closed# == 0){\n                            Button(Body: $@1approve$, Contract: @1TokensRefundAccept, Params: \"Id=#tr_id#\", Page: @1tokenrefund_list, Class: btn btn-primary)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $@1tokens_refund$)\n                Div(panel-body){\n                    Div(row form-group){\n                        Div(col-sm-3 mt-sm text-right){\n                            Label(){\n                                LangRes(@1amount)\n                                Span(Class: text-danger, Body:*)\n                            }\n                        }\n                        Div(col-sm-9){\n                            Input(Name: Amount, Type: number)\n                        }\n                    }\n                    Div(row form-group){\n                        Div(col-sm-3 mt-sm text-right){\n                            Label(){\n                                LangRes(@1tokens_refund_victim)\n                                Span(Class: text-danger, Body:*)\n                            }\n                        }\n                        Div(col-sm-9){\n                            Input(Name: VictimAccount, Placeholder: $@1key_id_or_wallet$)\n                        }\n                    }\n                    Div(row form-group){\n                        Div(col-sm-3 mt-sm text-right){\n                            Label(){\n                                LangRes(@1tokens_refund_attacker)\n                                Span(Class: text-danger, Body:*)\n                            }\n                        }\n                        Div(col-sm-9){\n                            Input(Name: SuspectAccount, Placeholder: $@1key_id_or_wallet$)\n                        }\n                    }\n                    Div(row form-group){\n                        Div(col-sm-3 mt-sm text-right){\n                            Label(){\n                                LangRes(@1description)\n                                Span(Class: text-danger, Body:*)\n                            }\n                        }\n                        Div(col-sm-9){\n                            Input(Name: Note, Type: textarea)\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1tokenrefund_list)\n                    Button(Body: $@1request_refund$, Contract: @1VotingTokensRefundCreate, Page: @1tokenrefund_list, Class: btn btn-primary pull-right)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(tid,AppParam(App:#application_id#, Name:voting_tokenrefund_template_id, Ecosystem:1))\nIf(#tid#>0){\n    DBFind(@1voting_templates).Where({ecosystem:#ecosystem_id#, id:#tid#}).Columns(\"voters\").Vars(template)\n    If(#template_voters#>0){\n        DBFind(@1roles).Where({ecosystem:1, id:#template_voters#}).Columns(\"id,role_name\").Vars(voters)\n    }\n}\nDBFind(@1tokenrefund,tokenrefunds).Order({id:\"-1\"}).Count(refund_count).Custom(_status){\n    If(#status#>0){\n        SetVar(sta,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_status, Index: #status#))\n        LangRes(#sta#)\n    }.Else{\n        $@1tokenrefund_status0$\n    }\n}.Custom(_result){\n    If(#result#>0){\n        SetVar(res,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_result, Index: #result#))\n        LangRes(#res#)\n    }.Else{\n        $@1tokenrefund_result0$\n    }\n}.Custom(_blocked){\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n}.Custom(_closed){\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n}.Custom(_accounts){\n    Div(){$@1tokens_refund_victim$: #victim_key_id#}\n    Div(){$@1tokens_refund_attacker$: #attacker_key_id#}\n}.Custom(_voting){\n    LinkPage(Page: @1voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\n}\n\nSetTitle($@1tokens_refunds_list$)\nDiv(content-wrapper){\n    Div(panel panel-primary){\n        If(And(#template_voters#>0,#template_voters#==#role_id#)){\n            AddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1tokenrefund_create)\n        }.Else{\n            Div(text-muted text-center){\n                If(#voters_id#>0){\n                    $@1tokens_refunds_list_allowed_role$ #voters_role_name#\n                }.Else{\n                    $@1template_id_not_found$\n                }\n            }\n        }\n        If(#refund_count#>0){\n            Div(table-responsive){\n                Table(tokenrefunds,\"$@1accounts$=_accounts,$@1amount$=amount,$@1description$=note,$@1validator_id$=validator_id,$@1blocked_at$=_blocked,$@1voting$=_voting,$@1result$=_result,$@1status$=_status,$@1closed$=_closed\")\n            }\n        }.Else{\n            Div(text-center h3 text-muted){\n                $@1tokens_refunds$ $@1not_founded$\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokens_transfer",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    If(Or(#v_id#>0,#v_id#<0)){\n        SetVar(Name: v_address, Value: Address(#v_id#))\n    }.Else{\n        SetVar(Name: v_address, Value: \"\")\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label($@1recipient$)\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label($@1amount$)\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: Amount, Type: Number)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1members_list)\n            Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1members_list, Contract: @1TokensSend).Alert(Text: $@1want_send_tokens$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_create",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(this_page,\"@1voting_create\")\n\nIf(GetVar(count_type_voters)==\"\"){\n    SetVar(count_type_voters,0)\n}\n\nForm(){\n    Div(list-group-item){\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1vote_count_type)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(GetVar(count_type_voters)==0){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary disabled mr-lg).Popup(50, $@1new_voting$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary).Popup(50, $@1new_voting$)                \n                    \n                }.ElseIf(GetVar(count_type_voters)==1){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn btn-primary mr-lg).Popup(50, $@1new_voting$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn btn-primary disabled).Popup(50, $@1new_voting$)\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:type_decision){\n                    LangRes(@1decision)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(GetVar(count_type_voters)==0){\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\n                    RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id)\n                }.ElseIf(GetVar(count_type_voters)==1){\n                    Data(numbers_type_decisions,\"value,name\"){\n                        3,$@1document$\n                        4,$@1database_write$\n                        5,$@1contract_run$\n                    }\n                    RadioGroup(Name: type_decision, Source: numbers_type_decisions, NameColumn: name, ValueColumn: value)\n                }.Else{\n                    Div(mt-sm text-warning){\n                        $@1please_select$ \"$@1vote_count_type$\"\n                    }\n                }\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: type_participants){\n                    LangRes(@1participants)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\n                Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:voting_name){\n                    LangRes(@1name)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: voting_name, Value: \"New voting\")\n            }\n        }\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: volume){\n                    LangRes(@1voting_volume)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: volume, Value: 75, Type: number)\n                Div(m0 h6 text-muted){\n                    If(GetVar(count_type_voters)==0){\n                        $@1voting_volume_desc$\n                    }.ElseIf(GetVar(count_type_voters)==1){\n                        $@1voting_volume_number_desc$\n                    }\n                }\n            }\n        }\n        SetVar(hide_quorum,)\n        If(GetVar(count_type_voters)==1){\n            SetVar(hide_quorum,\"hidden\")\n        }\n        Div(row mb-sm #hide_quorum#){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: quorum){\n                    LangRes(@1voting_quorum)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: quorum, Value: 51, Type: number)\n                Div(m0 h6 text-muted){\n                    $@1voting_quorum_desc$\n                }\n            }\n        }\n        Div(row mb-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: start_date){\n                    LangRes(@1date_start)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    Div(col-md-6){\n                        Input(Name: start_date, Type: date)\n                    }\n                    Div(col-md-6){\n                        Input(Name: start_time, Type: time)\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For: end_date){\n                    LangRes(@1date_end)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    Div(col-md-6){\n                        Input(Name: end_date, Type: date)\n                    }\n                    Div(col-md-6){\n                        Input(Name: end_time, Type: time)\n                    }\n                }\n            }\n        }\n    }    \n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(For:description){\n                    LangRes(@1description)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: description, Type: textarea)\n            }\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_list)\n            Input(Name: voting_type, Type: hidden, Value: 1)\n            Button(Body: LangRes(@1create), Class: btn btn-primary pull-right, Page: @1voting_list, Contract: @1VotingCreate, Params: \"count_type_voters=#count_type_voters#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_candidates",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#vID# > 0){\n    If(GetVar(back_page)){}.Else{\n        SetVar(back_page,@1voting_view)\n    }\n    DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\n    DBFind(@1votings_subject).Where({voting_id:#vID#, \"subject->member_id\":#key_id#}).Columns(\"id\").Vars(already_candidate)\n\n    If(#elective_roles_count#>0){\n        Form(){\n            SetVar(hidden,)\n            If(#already_candidate_id#>0){\n                SetVar(hidden,hidden)\n            }\n            Div(row mt-sm #hidden#){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1candidates))\n                        Span(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Div(input-group){\n                        Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\n                        Div(input-group-btn){\n                            Button(Body: LangRes(@1apply), Class: btn btn-primary, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\n                        }\n                    }\n                }\n            }\n            Div(row mt-sm){\n                Div(col-sm-9 col-sm-offset-3){\n                    DBFind(@1votings_subject,src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\n                        Address(#subject.member_id#)\n                    }.Custom(_member){\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                            Span(Body: #subject.member_name#)\n                        }\n                    }\n                    Table(src_voting_subject, \"$@1candidates$=_member,=_address\")\n                }\n            }\n            Div(form-group){\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1role))\n                            Span(Class: text-danger, Body:*)\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                    }\n                }\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1vacancies))\n                            Span(Class: text-danger, Body:*)\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\n                    }\n                }\n            }\n            Div(form-group){\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1contract_accept))\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                        InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                    }\n                }\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1params))\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\n                    }\n                }\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1contract_reject))\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                        InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                    }\n                }\n                Div(row mt-sm){\n                    Div(col-md-3 mt-sm text-right){\n                        Label(){\n                            Span(Body: LangRes(@1params))\n                        }\n                    }\n                    Div(col-md-9 text-left){\n                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\n                    }\n                }\n            }\n            Div(row mt){\n                Div(col-md-12){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                    Input(Name: memberID, Type: hidden, Value: 0)\n                    Input(Name: votingID, Type: hidden, Value: #vID#)\n                    Div(pull-right){\n                        Button(Body: LangRes(@1save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(row){\n            Div(col-md-12 text-center h3){\n                P(LangRes(@1elective_roles_not_found))\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\n                    Span(Class: h3, Body: LangRes(@1create_role))\n                }.Popup(50, $@1edit_role$)\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_contract",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#vID# > 0){\n    If(GetVar(back_page)){}.Else{\n        SetVar(back_page,@1voting_view)\n    }\n\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\n    DBFind(@1votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\n\n    If(#prefix_id#>0){\n    }.Else{\n        SetVar(prefix_subject_contract_accept,)\n        SetVar(prefix_subject_contract_accept_params,)\n        SetVar(prefix_subject_contract_reject,)\n        SetVar(prefix_subject_contract_reject_params,)\n    }\n\n    Form(){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1contract_accept)).(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(@1params))\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\n            }\n        }\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_reject)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                Input(Name: votingID, Type: hidden, Value: #vID#)\n                Div(pull-right){\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_document",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#vID# > 0){\n    If(GetVar(back_page)){}.Else{\n        SetVar(back_page,@1voting_view)\n    }\n\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n    DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text\").Vars(prefix)\n\n    If(#prefix_id#>0){\n    }.Else{\n        SetVar(Name: prefix_subject_text, Value: \"\")\n    }\n\n    Form(){\n        Div(form-group){\n            Div(row){\n                Div(col-md-12 mt-sm){\n                    Label(){\n                        Span(Body: LangRes(@1text_document))\n                        Span(Class: text-danger, Body:*)\n                    }\n                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\n                }\n            }\n        }\n        Div(form-group){\n            Div(row mb-sm){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_accept))\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row mb-sm){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n            Div(row mb-sm){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_reject))\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                Input(Name: votingID, Type: hidden, Value: #vID#)\n                Div(pull-right){\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_election",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#vID# > 0){\n    If(GetVar(back_page)){}.Else{\n        SetVar(back_page,@1voting_view)\n    }\n\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n\n    SetVar(candidates,0)\n    DBFind(@1votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\n        SetVar(candidates,\"#candidates#,#subject.member_id#\")\n        Address(#subject.member_id#)\n    }.Custom(_member){\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n            Span(Body: #subject.member_name#)\n        }\n    }\n    DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#candidates#]}}).Columns(\"id\").Custom(_name){\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n        Address(#id#)\n        If(Or(#m_id#>0,#m_id#<0)){\n            \" (#m_member_name#)\"\n        }\n    }\n\n    Form(){\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Div(input-group){\n                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                        Div(input-group-btn){\n                            Button(Body: LangRes(@1add), Class: btn btn-primary, Page: @1voting_decision_election, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-sm-9 col-sm-offset-3){\n                    Table(src_subject, \"$@1candidates$=_member,=_address\")\n                }\n            }\n        }\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(count_roles)\n                    If(#count_roles#>0){\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                    }.Else{\n                        elected role is not found\n                    }\n                }\n            }\n\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                }\n            }\n        }\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_accept))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_reject))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                Input(Name: votingID, Type: hidden, Value: #vID#)\n                Div(pull-right){\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_formal",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#vID# > 0){\n    If(GetVar(back_page)){}.Else{\n        SetVar(back_page,@1voting_view)\n    }\n\n    DBFind(@1votings,src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n    DBFind(@1votings_subject,src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Vars(prefix)\n\n    If(#prefix_id#>0){\n    }.Else{\n        SetVar(prefix_subject_description,)\n        SetVar(prefix_subject_table,)\n        SetVar(prefix_subject_table_id,)\n        SetVar(prefix_subject_column,)\n        SetVar(prefix_subject_column_value,)\n    }\n\n    Form(){\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1table_to_written))\n                        Span(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$@1table_to_written_desc$\")\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1row_id))\n                        Span(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$@1row_id_desc$\")\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1column_name))\n                        Span(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$@1column_name_desc$\")\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1written_value))\n                        Span(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$@1written_value_desc$\")\n                }\n            }\n        }\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-lg text-right){\n                    Label(){\n                        Span(Body: LangRes(@1description))\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\n                }\n            }\n        }\n        Div(form-group){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_accept))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1contract_reject))\n                    }\n                }\n                Div(col-md-9 mb-sm text-left){\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1params))\n                    }\n                }\n                Div(col-md-9 mc-sm text-left){\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                Input(Name: votingID, Type: hidden, Value: #vID#)\n                Div(pull-right){\n                    Button(Body: LangRes(@1save), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectFormal)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_invite",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#vID# > 0){\n    Form(){\n        If(GetVar(back_page)){}.Else{\n            SetVar(back_page,@1voting_view)\n        }\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\n        SetVar(participants,#guest_key#)\n        DBFind(@1votings_participants, src_participants).Where({voting_id:#vID#}).Columns(\"id,member->member_id,member->member_name,member->role_id,member->member->member_id,member->member->member_name\").Count(participants_count).Custom(_id){\n            SetVar(participants,\"#participants#,#member.member_id#\")\n            Address(#member.member_id#)\n        }.Custom(_name){\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#member.member_id#\", Body: #member.member_name#)\n        }.Custom(_sent){\n            Role added to vote\n        }.Custom(_member_roles){\n            DBFind(@1roles).Columns(\"id,role_name,image_id\").WhereId(#member.role_id#).Vars(rl)\n            LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\n                If(#rl_image_id#>0){\n                    Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n                    #rl_role_name#\n                }.Else{\n                    Div(){\n                        Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }\n        If(#participants_count#>0){\n            Div(list-group-item){\n                If(#instance_voting_type_participants# == 5){\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\n                }.ElseIf(#instance_voting_type_participants# == 4){\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\n                }.Else{\n                    Table(src_participants, \"$@1member$=_name,=_id\")\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                If(#instance_voting_type_participants# == 1){\n                }\n                If(#instance_voting_type_participants# == 2){\n                    Label(){\n                        LangRes(@1select_member)\n                        Span(*, text-danger)\n                    }\n                    DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#participants#]}}).Columns(\"id\").Count(keys_count).Custom(_name){\n                        SetVar(m_member_name,)\n                        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n                        Address(#id#)\n                        If(Or(#m_id#>0,#m_id#<0)){\n                            \" (#m_member_name#)\"\n                        }\n                    }\n                    If(#keys_count#>0){\n                        Select(Name: var_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                    }.Else{\n                        Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_keys_added$\")\n                    }\n                }\n                If(#instance_voting_type_participants# == 3){\n                    Label(){\n                        LangRes(@1select_role)\n                        Span(*, text-danger)\n                    }\n                    DBFind(@1roles, src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\")\n                    Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                }\n                If(Or(#instance_voting_type_participants# == 4,#instance_voting_type_participants# == 5)){\n                    Div(row){\n                        Div(col-md-12){\n                            Label(){\n                                Span(Body: LangRes(@1select_role))\n                                Span(Class: text-danger, Body:*)\n                            }\n                            DBFind(@1roles, src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\")\n                            Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                        }\n                    }\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n                Input(Name: votingID, Type: hidden, Value: #vID#)\n                If(#instance_voting_type_participants# == 2){\n                    If(#keys_count#>0){\n                        Button(Body: LangRes(@1add_member), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\n                    }\n                }.ElseIf(#instance_voting_type_participants# > 2){\n                    Button(Body: LangRes(@1add_role), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\n                }\n            }\n        }\n    }\n}.Else{\n    Div(alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n    Div(form-group text-left){\n        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_list)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetTitle($@1voting_list$)\n\nIf(GetVar(Search)){\n    SetVar(Where,{ecosystem:#ecosystem_id#, \"voting->name\":{\"$like\":#Search#}, deleted:0})\n}.Else{\n    SetVar(Where,{ecosystem:#ecosystem_id#, deleted:0}).(Search,)\n}\n\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\nSetVar(this_page,\"@1voting_list\")\n\nAddToolButton(Title: $@1templates_list$, Page: @1voting_templates_list, Icon: fa icon-pin)\nAddToolButton(Title: $@1create$, Page: @1voting_create, Icon: icon-plus).Popup(50, $@1new_voting$)\n\nDiv(content-wrapper){\n    If(EcosysParam(Name:founder_account)==#key_id#){\n        Button(Body: $@1update_votings_statuses$, Class: btn btn-default, Page: #this_page#, Contract: @1VotingStatusUpdate)\n    }\n    SetVar(table,\"@1votings\").(per_page,20)\n    Div(mt){\n        Include(@1basic_paginator)\n    }\n    DBFind(#table#,src_voting).Where(#Where#).Order({id:-1}).Offset(#paginator_offset#).Limit(#per_page#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status,voting->count_type_voters,voting->volume,progress->number_voters\").Count(count_votings).Custom(_id){\n        Span(Class: h5, Body: #id#)\n    }.Custom(_name){\n        LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold m0, Body: #voting.name#)\n        }\n    }.Custom(_subject){\n        SetVar(decision, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #decision#\n            }.Else{\n                If(#voting.type_decision# == 1){\n                    SetVar(link_page,\"@1voting_decision_candidates\")\n                }.ElseIf(#voting.type_decision# == 2){\n                    SetVar(link_page,\"@1voting_decision_election\")\n                }.ElseIf(#voting.type_decision# == 3){\n                    SetVar(link_page,\"@1voting_decision_document\")\n                }.ElseIf(#voting.type_decision# == 4){\n                    SetVar(link_page,\"@1voting_decision_formal\")\n                }.ElseIf(#voting.type_decision# == 5){\n                    SetVar(link_page,\"@1voting_decision_contract\")\n                }\n                Button(Body: #decision#, Class: btn btn-link, Page: #link_page#, PageParams: \"vID=#id#,back_page=#this_page#\").Popup(50, $@1subject_voting$)\n            }\n        }\n    }.Custom(_participants){\n        SetVar(participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #participants#\n            }.Else{\n                Button(Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\", Class: btn btn-link p0 text-bold, Body: #participants#).Popup(45, $@1participants_add$)\n            }\n        }\n    }.Custom(_creator){\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#creator.member_id#\", Body: #creator.member_name#)\n    }.Custom(_date){\n        SetVar(started_class,text-center text-bold h5 m0).(finished_class,text-center text-bold h5 m0)\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#)){\n            SetVar(started_class,text-center text-muted h5 m0)\n        }\n        If(#status#==#FINISHED#){\n            SetVar(finished_class,text-center text-muted h5 m0)\n        }\n        P(Class: #started_class#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        P(Class: #finished_class#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(_type){\n        Div(h6 m0 p0){\n            AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #voting.type#) /\n            If(#voting.count_type_voters#==1){\n                $@1number_votes$\n            }.Else{\n                $@1percent_votes$\n            }\n        }\n    }.Custom(_progress){\n        Div(text-center h5 text-bold){\n            If(#voting.count_type_voters#==1){\n                #progress.number_voters# / #progress.number_participants#\n            }.Else{\n                #progress.percent_success# %\n            }\n        }\n    }.Custom(_decision){\n        Div(text-center){\n            If(#flags.decision# == 0){\n                If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\n                    Button(Body: LangRes(@1decision), Class: btn btn-primary, Contract: @1VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\n                }.Else{\n                    Div(text-muted){LangRes(@1no)}\n                }\n            }.ElseIf(#flags.decision# == -2){\n                Div(text-muted){LangRes(@1not_enough_votes)}\n            }.ElseIf(#flags.decision# == 1){\n                Div(text-success){LangRes(@1accepted)}\n            }.ElseIf(#flags.decision# == -1){\n                Div(text-danger){LangRes(@1rejected)}\n            }\n        }\n    }.Custom(_status){\n        SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#status#))\n        Div(text-center #status_class#){\n            If(#status#==#STARTED#){\n                Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\n            }.Else{\n                AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses, Index:#status#)\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right){\n            If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\n                Button(Class: fa fa-trash btn btn-default, Contract: @1VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: $@1want_delete_voting$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(@1voting)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n                Div(col-md-12){\n                    If(#count_votings#>0){\n                        Div(table-responsive){\n                            Table(src_voting, \"$@1voting$=_name,$@1type$=_type,$@1subject_voting$=_subject,$@1participants$=_participants,$@1date_start$ / $@1date_end$=_date,$@1creator$=_creator,$@1progress$=_progress,$@1decision$=_decision,$@1status$=_status,=_actions\")\n                        }\n                    }.Else{\n                        Div(text-center h3 text-muted){\n                            $@1votings_not_found$\n                        }\n                    }\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $@1view_all$, Class: btn btn-default, Page: #this_page#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetVar(template_id, 0)\nSetVar(title,\"New voting\").(typevoting,0).(volume,50).(quorum,51).(subj,).(voters,).(candidates,).(vacancies,1).(contract_init,).(contract_accept,).(accept_params,).(contract_reject,).(reject_params,)\nIf(#TemplateId#>0){\n    DBFind(@1voting_templates).WhereId(#TemplateId#).Vars(template)\n    SetVar(title, #template_title#)\n    SetVar(typevoting, #template_type_voting#)\n    SetVar(volume, #template_volume#)\n    SetVar(subj, #template_subject#)\n    SetVar(quorum, #template_quorum#)\n    SetVar(voters, #template_voters#)\n    SetVar(candidates, #template_candidates#)\n    SetVar(vacancies, #template_vacancies#)\n    SetVar(contract_init, #template_init_contract#)\n    SetVar(contract_accept, #template_contract_accept#)\n    SetVar(accept_params, #template_accept_params#)\n    SetVar(contract_reject, #template_contract_reject#)\n    SetVar(reject_params, #template_reject_params#)\n    If(GetVar(CountTypeVoters)==\"\"){\n        SetVar(CountTypeVoters, #template_count_type_voters#)\n    }\n}\n\nIf(#TypeDecision#>0){\n    SetVar(typedec,#TypeDecision#)\n}.Else{\n    SetVar(typedec,0)\n}\nIf(#TypeParticipants#>0){\n    SetVar(typepart,#TypeParticipants#)\n}.Else{\n    SetVar(typepart,0)\n}\n\nSetVar(col_right,\"col-sm-8 mb-sm text-left\")\nSetVar(col_right_nob,\"col-sm-8 text-left\")\nSetVar(col_left,\"col-sm-4 mt-sm text-right\")\n\nSetVar(this_page,@1voting_template_create)\nIf(GetVar(CountTypeVoters)==\"\"){\n    SetVar(CountTypeVoters,0)\n}\n\nForm(){\n    If(#typedec#>0){\n        Div(list-group-item){\n            Div(row){\n                Div(#col_left#){\n                    Label(For: TypeParticipants){\n                        LangRes(@1vote_count_type)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right#){\n                    If(GetVar(CountTypeVoters)==0){\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\n                    }.ElseIf(GetVar(CountTypeVoters)==1){\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\n                    }\n                    Input(Name: CountTypeVoters, Type: hidden, Value: #CountTypeVoters#)\n                }\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: TypeDecision){\n                        LangRes(@1decision)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right_nob#){\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #typedec#))\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\n                    Input(Name: TypeDecision, Type: hidden, Value: #typedec#)\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(#col_left#){\n                    Label(For: TypeParticipants){\n                        LangRes(@1participants)\n                        Span(*,text-danger)\n                    }\n                }\n                If(#typepart#==3){\n                     SetVar(col_right_n1, #col_right#)\n                }.Else{\n                    SetVar(col_right_n1, #col_right_nob#)\n                }\n                Div(#col_right_n1#){\n                    SetVar(var_type_voting_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #typepart#))\n                    Input(Name: InputTypeVotingParticipants, Disabled: 1, Value: #var_type_voting_participants#)\n                    Input(Name: TypeParticipants, Type: hidden, Value: #typepart#)\n                }\n            }\n            If(#typepart#==3){\n                Div(row){\n                    Div(#col_left#){\n                        Label(For: Voters){\n                            LangRes(@1voters_role)\n                            Span(*,text-danger)\n                        }\n                    }\n                    Div(#col_right_nob#){\n                        DBFind(@1roles,src_roles1).Where({ecosystem:#ecosystem_id#, deleted:0}).Order(id).Custom(name){\n                            #role_name#\n                        }\n                        Select(Name: Voters, Source: src_roles1, NameColumn: name, ValueColumn: id, Value: #voters#)\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(#col_left#){\n                    Label(For: Title){\n                        LangRes(@1name)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right#){\n                    Input(Name: Title, Value: #title#)\n                }\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: TypeVoting){\n                        LangRes(@1voting_type)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right#){\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Source: src_typevoting)\n                    Select(Name: TypeVoting, Source: src_typevoting, NameColumn: name, ValueColumn: id, Value: #typevoting#)\n                }\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: Volume){\n                        LangRes(@1voting_volume)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right#){\n                    Input(Name: Volume, Type: number, Value: #volume#).Validate(minLength: 1)\n                    InputErr(Name: Volume, minLength: Please enter Volume)\n                    If(GetVar(CountTypeVoters)==0){\n                        P(Class: m0 h6 text-muted, Body: $@1voting_volume_desc$)\n                    }.ElseIf(GetVar(CountTypeVoters)==1){\n                        P(Class: m0 h6 text-muted, Body: $@1voting_volume_number_desc$)\n                    }\n                }\n            }\n            SetVar(hide_quorum,)\n            If(GetVar(CountTypeVoters)==1){\n                SetVar(hide_quorum,\"hidden\")\n            }\n            Div(row #hide_quorum#){\n                Div(#col_left#){\n                    Label(For: Quorum){\n                        LangRes(@1voting_quorum)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right#){\n                    Input(Name: Quorum, Type: number, Value: #quorum#).Validate(minLength: 1)\n                    InputErr(Name: Quorum, minLength: Please enter Quorum)\n                    P(Class: m0 h6 text-muted, Body: $@1voting_quorum_desc$)\n                }\n            }\n            If(Or(#typedec#==1,#typedec#==2)){\n                SetVar(col_right_n2, #col_right#)\n            }.Else{\n                SetVar(col_right_n2, #col_right_nob#)\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: Subject){\n                        LangRes(@1voting_subject)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(#col_right_n2#){\n                    Input(Name: Subject, Value: #subj#)\n                }\n            }\n            If(Or(#typedec#==1,#typedec#==2)){\n                Div(row){\n                    Div(#col_left#){\n                        Label(For: Vacancies){\n                            LangRes(@1vacancies)\n                            Span(*,text-danger)\n                        }\n                    }\n                    Div(#col_right#){\n                        Input(Name: Vacancies, Value: #vacancies#, Type: number)\n                    }\n                }\n                Div(row){\n                    Div(#col_left#){\n                        Label(For: Candidates){\n                            LangRes(@1candidates_role)\n                            Span(*,text-danger)\n                        }\n                    }\n                    Div(#col_right_nob#){\n                        DBFind(@1roles,src_roles2).Where({role_type:2, ecosystem:#ecosystem_id#, deleted:0}).Order(id).Custom(name){\n                            #role_name#\n                        }\n                        Select(Name: Candidates, Source: src_roles2, NameColumn: name, ValueColumn: id, Value: #candidates#)\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(row){\n                Div(#col_left#){\n                    Label(For: InitContract){\n                        LangRes(@1voting_init_contract)\n                    }\n                }\n                Div(#col_right#){\n                    Input(Name: InitContract, Value: #contract_init#)\n                    P(Class: m0 h6 text-muted, Body: $@1voting_init_contract_desc$)\n                }\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: ContractAccept){\n                        LangRes(@1voting_contract_accept)\n                    }\n                }\n                Div(#col_right#){\n                    Div(row){\n                        Div(col-md-6){\n                            Input(Name: ContractAccept, Placeholder: $@1contract$, Value: #contract_accept#)\n                        }\n                        Div(col-md-6){\n                            Input(Name: ParamsAccept, Placeholder: $@1arguments$, Value: #accept_params#)\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(#col_left#){\n                    Label(For: ContractReject){\n                        LangRes(@1voting_contract_reject)\n                    }\n                }\n                Div(#col_right_nob#){\n                    Div(row){\n                        Div(col-md-6){\n                            Input(Name: ContractReject, Placeholder: $@1contract$, Value: #contract_reject#)\n                        }\n                        Div(col-md-6){\n                            Input(Name: ParamsReject, Placeholder: $@1arguments$, Value: #reject_params#)\n                        }\n                    }\n                }\n            }\n        }\n        Div(row mt){\n            Div(col-md-12){\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#\").Popup(50, $@1voting_template_create$)\n                Button(Body: LangRes(@1create), Class: btn btn-primary pull-right, Page: @1voting_templates_list, Contract: @1VotingTemplateCreate)\n            }\n        }\n    }.Else{\n        Div(row){\n            Div(#col_left#){\n                Label(){\n                    LangRes(@1vote_count_type)\n                    Span(*,text-danger)\n                }\n            }\n            Div(#col_right#){\n                If(GetVar(CountTypeVoters)==0){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary disabled mr-lg).Popup(50, $@1voting_template_create$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary).Popup(50, $@1voting_template_create$)    \n                }.ElseIf(GetVar(CountTypeVoters)==1){\n                    Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary mr-lg).Popup(50, $@1voting_template_create$)\n                    Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#,TypeParticipants=Val(TypeParticipants)\", Class: btn btn-primary disabled).Popup(50, $@1voting_template_create$)\n                }\n            }\n        }\n        Div(row){\n            Div(col-sm-4 mt-lg mb-lg text-right){\n                Label(For: #name#){\n                    LangRes(@1decision)\n                    Span(*,text-danger)\n                }\n            }\n            Div(#col_right#){\n                If(GetVar(CountTypeVoters)==0){\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\n                    RadioGroup(Name: TypeDecision, Value: #template_type_decision#, Source: procent_type_decisions, ValueColumn: id, NameColumn: name)\n                }.ElseIf(GetVar(CountTypeVoters)==1){\n                    Data(numbers_type_decisions,\"value,name\"){\n                        3,$@1document$\n                        4,$@1database_write$\n                        5,$@1contract_run$\n                    }\n                    RadioGroup(Name: TypeDecision, Value: #template_type_decision#, Source: numbers_type_decisions, ValueColumn: value, NameColumn: name)\n                }.Else{\n                    Div(mt-lg mb-lg text-warning){\n                        $@1please_select$ \"$@1vote_count_type$\"\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(#col_left#){\n                Label(For: #name#){\n                    LangRes(@1participants)\n                    Span(*,text-danger)\n                }\n            }\n            Div(#col_right#){\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: src_typepart)\n                Select(Name: TypeParticipants, Source: src_typepart, NameColumn: name, ValueColumn: id, Value: #template_type_participants#)\n            }\n        }\n\n        Div(row mt){\n            Div(col-md-12){\n                If(#TemplateId#>0){\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\n                }.Else{\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_templates_list)\n                }\n                Button(Body: LangRes(@1next), Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants),CountTypeVoters=#CountTypeVoters#\").Popup(50, $@1voting_template_create$)\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_start",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetTitle($@1voting_start$)\n\nSetVar(col_left,\"col-md-4 text-right\")\nSetVar(col_left_for_input,\"col-md-4 mt-sm text-right\")\nSetVar(col_right,\"col-md-8 text-left\")\nSetVar(col_right_for_input,\"col-md-8 mb-sm text-left\")\n\nIf(#TemplateId#>0){\n    DBFind(@1voting_templates).WhereId(#TemplateId#).Vars(template)\n\n    SetVar(v_role,).(c_role,)\n    If(#template_voters#>0){\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#template_voters#}).Columns(\"role_name\").Vars(vid)\n        SetVar(v_role, \"#vid_role_name#\")\n    }\n    If(#template_candidates#>0){\n        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#template_candidates#}).Columns(\"role_name\").Vars(cid)\n        SetVar(c_role, \"#cid_role_name#\")\n    }\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $@1voting$, Page: @1voting_list)\n        Span(/, mh)\n        LinkPage(Body: $@1voting_templates$, Page: @1voting_templates_list)\n        Span(/,mh)\n        Span($@1voting_start$, text-muted)\n    }\n\n    If(#TemplateId#>0){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(@1voting_params)}\n                    Div(list-group-item){\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1template_id))\n                            }\n                            Div(#col_right#){\n                                #template_id#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1name))\n                            }\n                            Div(#col_right#){\n                                #template_title#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1vote_count_type))\n                            }\n                            Div(#col_right#){\n                                If(#template_count_type_voters#==0){\n                                    $@1percent_votes$\n                                }.ElseIf(#template_count_type_voters#==1){\n                                    $@1number_votes$\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1participants))\n                            }\n                            Div(#col_right#){\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_type))\n                            }\n                            Div(#col_right#){\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #template_type_voting#)\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1decision))\n                            }\n                            Div(#col_right#){\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_volume))\n                            }\n                            Div(#col_right#){\n                                #template_volume#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_quorum))\n                            }\n                            Div(#col_right#){\n                                #template_quorum#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_subject))\n                            }\n                            Div(#col_right#){\n                                #template_subject#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voters))\n                            }\n                            Div(#col_right#){\n                                #v_role#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1candidates))\n                            }\n                            Div(#col_right#){\n                                #c_role#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1vacancies))\n                            }\n                            Div(#col_right#){\n                                #template_vacancies#\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1init_contract))\n                            }\n                            Div(#col_right#){\n                                #template_init_contract#\n                            }\n                        }\n\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_contract_accept))\n                            }\n                            Div(#col_right#){\n                                #template_contract_accept#\n                                If(`#template_accept_params#`!=\"\"){\n                                    (#template_accept_params#)\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(#col_left#){\n                                Strong(LangRes(@1voting_contract_reject))\n                            }\n                            Div(#col_right#){\n                                #template_contract_reject#\n                                If(`#template_reject_params#`!=\"\"){\n                                    (#template_reject_params#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(#col_left_for_input#){\n                                Label(For: Duration){\n                                    LangRes(@1duration)\n                                }\n                            }\n                            Div(#col_right_for_input#){\n                                Input(Name: Duration, Type: number, Value: 3)\n                            }\n                        }\n                        If(#template_type_decision#==3){\n                            Div(row){\n                                Div(#col_left_for_input#){\n                                    Label(For: TextDocument){\n                                        LangRes(@1text_document)\n                                    }\n                                }\n                                Div(#col_right_for_input#){\n                                    Input(Name: TextDocument, Type: textarea)\n                                }\n                            }\n                        }.ElseIf(#template_type_decision#==4){\n                            If(#template_type_voting#==2){\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: ColumnName){\n                                            LangRes(@1system_param)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: ColumnName)\n                                    }\n                                }\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: NewValue){\n                                            LangRes(@1value)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: NewValue)\n                                    }\n                                }\n                            }.Else{\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: TableWritten){\n                                            LangRes(@1table_to_written)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: TableWritten)\n                                    }\n                                }\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: RowId){\n                                            LangRes(@1row_id)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: RowId, Type: number)\n                                    }\n                                }\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: ColumnName){\n                                            LangRes(@1column_name)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: ColumnName)\n                                    }\n                                }\n                                Div(row){\n                                    Div(#col_left_for_input#){\n                                        Label(For: NewValue){\n                                            LangRes(@1value)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right_for_input#){\n                                        Input(Name: NewValue)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_templates_list)\n                        Div(pull-right){\n                            Button(Class: fa fa-copy btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\").Popup(50, $@1voting_template_create$)\n                            Button(Body: LangRes(@1voting_start), Class: btn btn-primary, Page: @1voting_list, Contract: @1VotingTemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(@1attention)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_templates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").Vars(application)\nSetTitle($@1voting_templates$)\nDiv(breadcrumb){\n    LinkPage($@1votings$, @1voting_list)\n    Span(/, mh)\n    Span($@1voting_templates$, text-muted)\n}\n\nIf(GetVar(Search)){\n    SetVar(Where,{ecosystem:#ecosystem_id#, \"title\":{\"$like\":#Search#}})\n}.Else{\n    SetVar(Where,{ecosystem:#ecosystem_id#, \"id\":{\"$gt\":0}}).(Search,)\n}\nSetVar(this_page,\"@1voting_templates_list\")\n\nDBFind(@1voting_templates, src_templates).Where(#Where#).Order(id).Count(template_count).Custom(_participants){\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_participants, Index: #type_participants#)\n}.Custom(_decision){\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_decisions, Index: #type_decision#)\n}.Custom(_type){\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting, Index: #type_voting#)\n}.Custom(_actions){\n    Div(text-right){\n        Button(Class: btn btn-default fa fa-eye, Page: @1voting_template_start, PageParams: \"TemplateId=#id#\")\n    }\n}.Custom(_contracts){\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n        Div(){#init_contract#}\n    }\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n        Div(){#contract_accept#}\n    }\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n        Div(){#contract_reject#}\n    }\n}.Custom(_vq){\n    #volume#/#quorum#\n}.Custom(_vacancies){\n    If(#vacancies#>0){\n        #vacancies#\n    }\n}\n\nIf(Or(#template_count#>0,#ecosystem_id#>1)){\n    AddToolButton(Title: $@1create$, Page: @1voting_template_create, Icon: icon-plus).Popup(50, $@1voting_template_create$)\n}\n\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        If(#template_count#>0){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(input-group){\n                            Div(input-group-addon){\n                                LangRes(@1template)\n                            }\n                            Input(Name: Search, Value: #Search#)\n                            Div(input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\n                            }\n                        }\n                    }\n                    Div(col-md-12){\n                        Div(table-responsive){\n                            Table(Source: src_templates, Columns:\"$@1template$=title,$@1voting_subject$=subject,$@1volume$ / $@1quorum$=_vq,$@1voting_type$=_type,$@1participants$=_participants,$@1decision$=_decision,$@1vacancies$=_vacancies,$@1contracts$=_contracts,=_actions\")\n                        }\n                    }\n                }\n                If(GetVar(Search)){\n                    Div(row){\n                        Div(col-md-12 mt-lg){\n                            Div(text-center){\n                                Button(Body: $@1view_all$, Class: btn btn-default, Page: #this_page#)\n                            }\n                        }\n                    }\n                }\n            }\n        }.ElseIf(#ecosystem_id#==1){\n            Div(panel-body text-center){\n                Data(autofill, \"value,description\"){\n                    yes,$@1use_default_voting_templates$\n                    no,$@1select_default_templates_manually$\n                }\n                RadioGroup(Name: fill_ids, Source: autofill, NameColumn: description, ValueColumn: value)\n                Button(Body: $@1install_default_templates$, Class: btn btn-primary, Page: @1voting_templates_list, Contract: @1VotingTemplatesInstall)\n            }\n        }.Else{\n            Div(text-center h3 text-muted){\n                $@1voting_templates_not_found$\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nIf(#notific_id#>0){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->voting_id\").Vars(notific)\n    SetVar(vID,#notific_page_params_voting_id#)\n}\n\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\nSetVar(this_page,\"@1voting_view\")\n\nDiv(content-wrapper){\n    If(#vID# > 0){\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type_participants,voting->type,voting->count_type_voters,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status\").Vars(instance)\n        SetVar(type_decision,#instance_voting_type_decision#)\n        SetVar(type_participants,#instance_voting_type_participants#)\n\n        SetVar(isVotingAllowed,0)\n        SetVar(isStartProcessing,0)\n        If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3)){\n            DBFind(@1votings_participants).Where({voting_id:#vID#,\"member->member_id\":#key_id#, decision:0, ecosystem: #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\n                DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"recipient->member_id\":#key_id#, page_name:#this_page#, \"page_params->voting_id\": #vID#, closed:0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\n                If(#notificcc_id#>0){\n                    SetVar(isVotingAllowed,1)\n                    SetVar(notific_id,#notificcc_id#)\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\n                        SetVar(isStartProcessing,1)\n                    }\n                }\n            }\n        }\n        If(Or(#type_participants#==4,#type_participants#==5)){\n            DBFind(@1votings_participants).Where({voting_id:#vID#,\"member->role_id\":#role_id#, decision:0, ecosystem: #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\n                DBFind(@1notifications).Where({{\"$or\":[{\"date_start_processing\": \"$isnull\"}, {\"processing_info->member_id\": #key_id#}]}, \"ecosystem\":#ecosystem_id#, \"recipient->role_id\":#role_id#, \"page_name\":#this_page#, \"page_params->voting_id\": #vID#, \"closed\":0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\n                If(#notificcc_id#>0){\n                    SetVar(isVotingAllowed,1)\n                    SetVar(notific_id,#notificcc_id#)\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\n                        SetVar(isStartProcessing,1)\n                    }\n                }\n            }\n        }\n        \n        SetTitle($@1voting_view$: #instance_voting_name#)\n        Div(breadcrumb){\n            LinkPage(Body: $@1voting_list$, Page: @1voting_list)\n            Span(/,mh)\n            Span(Class: text-muted, Body: ##instance_id#)\n        }\n\n        Div(row mt-sm){\n            Div(col-lg-10 col-lg-offset-1){\n                Form(panel panel-primary){\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\n\n                    Div(list-group-item text-center){\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\n                        Div(row){\n                            Div(col-md-12){\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\n                            }\n                        }\n                        If(`#instance_voting_description#`!=\"\"){\n                            Div(row){\n                                Div(col-md-6 text-right){\n                                    Div(Class: t5 text-muted m0, Body: LangRes(@1description))\n                                }\n                                Div(col-md-6 text-left break){\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\n                                }\n                            }\n                        }\n                    }\n\n                    Div(list-group-item text-center){\n                        Div(row t5){\n                            Div(col-md-6 text-right){\n                                LangRes(@1type)\n                            }\n                            Div(col-md-6 text-left){\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\n                            }\n                        }\n                        Div(row t5){\n                            Div(col-md-6 text-right){\n                                LangRes(@1vote_count_type)\n                            }\n                            Div(col-md-6 text-left){\n                                If(#instance_voting_count_type_voters#==1){\n                                    $@1number_votes$\n                                }.Else{\n                                    $@1percent_votes$\n                                }\n                            }\n                        }\n                        If(Or(#type_decision#==1,#type_decision#==2,#type_decision#==3,#type_decision#==4)){\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1contract_accept)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#instance_optional_contract_accept# == \"\"){\n                                        Span(Class: text-muted, Body: LangRes(@1optional))\n                                    }.Else{\n                                        #instance_optional_contract_accept#\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1contract_reject)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#instance_optional_contract_reject# == \"\"){\n                                        Span(Class: text-muted, Body: LangRes(@1optional))\n                                    }.Else{\n                                        #instance_optional_contract_reject#\n                                    }\n                                }\n                            }\n                        }\n                        Div(row t5){\n                            Div(col-md-6 text-right){\n                                LangRes(@1filled)\n                            }\n                            Div(col-md-6 text-left){\n                                If(#instance_flags_full_data# == 1){\n                                    Span(Class: text-success, Body: LangRes(@1yes))\n                                }.Else{\n                                    Span(Class: text-danger, Body: LangRes(@1no))\n                                }\n                            }\n                        }\n                        If(Or(#type_decision#==1,#type_decision#==2)){\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1role)\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#instance_optional_role_id# > 0){\n                                        DBFind(@1roles).Where({ecosystem:#ecosystem_id#, id:#instance_optional_role_id#}).Columns(\"id,role_name\").Vars(prefix)\n                                        #prefix_role_name# (LangRes(@1id): #prefix_id#)\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1vacancies)\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#instance_optional_role_vacancies# > 0){\n                                        #instance_optional_role_vacancies#\n                                    }.Else{\n                                        Span(Class: text-danger, Body: #instance_optional_role_vacancies#)\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1candidates)\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#instance_optional_number_candidates# > 0){\n                                        #instance_optional_number_candidates#\n                                    }.Else{\n                                        Span(Class:text-danger, Body: #instance_optional_number_candidates#)\n                                    }\n                                }\n                            }\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\n                                Address(#subject.member_id#)\n                            }.Custom(_member){\n                                LinkPage(Class: text-primary t5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                    #subject.member_name#\n                                }\n                            }.Custom(_voting){\n                                If(#isVotingAllowed#==1){\n                                    Button(Body: LangRes(@1vote), Class: btn btn-success, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingCandidateAccept, Params: \"CandidateID=#subject.member_id#,RoleId=#role_id#\")\n                                }\n                            }\n                            Div(row t6){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\n                                }\n                            }\n                            Div(row mt-sm t5){\n                                Div(col-md-12){\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\n                                        If(#type_decision#==1){\n                                            Button(Class: btn btn-link, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\"){\n                                                Strong(LangRes(@1subject_voting_edit))\n                                            }.Popup(50, $@1subject_voting$)\n                                        }\n                                        If(#type_decision#==2){\n                                            Button(Class: btn btn-link, Page: @1voting_decision_election, PageParams: \"vID=#vID#\"){\n                                                Strong(LangRes(@1subject_voting_edit))\n                                            }.Popup(50, $@1subject_voting$)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#type_decision#==3){\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text,subject->hash\").Vars(subject)\n                            Div(row t5 mt-lg){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    Div(list-group-item){\n                                        If(#subject_id# > 0){\n                                            #subject_subject_text#\n                                        }.Else{\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\n                                        }\n                                    }\n                                    Div(list-group-item t6 text-muted){\n                                        If(#subject_id# > 0){\n                                            Hash: #subject_subject_hash#\n                                        }.Else{\n                                            Hash: LangRes(@1empty)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row mt-sm t5){\n                                Div(col-md-12){\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: @1voting_decision_document, PageParams: \"vID=#vID#\"){\n                                            Strong(LangRes(@1subject_voting_edit))\n                                        }.Popup(50, $@1subject_voting$)\n                                    }\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#isStartProcessing#==1){\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\n                                    }.Else{\n                                        If(#isVotingAllowed#==1){\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#type_decision#==4){\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Vars(subject)\n\n                            If(#instance_voting_type#==1){\n                                Div(row t5){\n                                    Div(col-md-6 text-right){\n                                        LangRes(@1table_to_written)\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                    Div(col-md-6 text-left){\n                                        If(#subject_id# > 0){\n                                            #subject_subject_table#\n                                        }.Else{\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\n                                        }\n                                    }\n                                }\n                                Div(row t5){\n                                    Div(col-md-6 text-right){\n                                        LangRes(@1row_id)\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                    Div(col-md-6 text-left){\n                                        If(#subject_id# > 0){\n                                            #subject_subject_table_id#\n                                        }.Else{\n                                            Span(Class:text-danger, Body: LangRes(@1empty))\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    If(#instance_voting_type#==1){\n                                        LangRes(@1column_name)\n                                    }.Else{\n                                        LangRes(@1parameter_name)\n                                    }\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#subject_id# > 0){\n                                        #subject_subject_column#\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    Span(Body: LangRes(@1written_value))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left break){\n                                    If(#subject_id# > 0){\n                                        #subject_subject_column_value#\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1description)\n                                }\n                                Div(col-md-6 text-left break){\n                                    If(#subject_id# > 0){\n                                        If(#subject_subject_description# == \"\"){\n                                            Span(Class:text-muted, Body: LangRes(@1optional))\n                                        }.Else{\n                                            #subject_subject_description#\n                                        }\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row mt-sm t5){\n                                Div(col-md-12){\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: @1voting_decision_formal, PageParams: \"vID=#vID#\"){\n                                            Strong(LangRes(@1subject_voting_edit))\n                                        }.Popup(50, $@1subject_voting$)\n                                    }\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#isStartProcessing#==1){\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\n                                    }.Else{\n                                        If(#isVotingAllowed#==1){\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        If(#type_decision#==5){\n                            DBFind(@1votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject\").Vars(subject)\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1contract_accept)\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#subject_id# > 0){\n                                        #subject_subject_contract_accept#\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row t5){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1contract_reject)\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                Div(col-md-6 text-left){\n                                    If(#subject_id# > 0){\n                                        #subject_subject_contract_reject#\n                                    }.Else{\n                                        Span(Class:text-danger, Body: LangRes(@1empty))\n                                    }\n                                }\n                            }\n                            Div(row mt-sm t5){\n                                Div(col-md-12){\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\n                                        Button(Class: btn btn-link, Page: @1voting_decision_contract, PageParams: \"vID=#vID#\"){\n                                            Strong(LangRes(@1subject_voting_edit))\n                                        }.Popup(50, $@1subject_voting$)\n                                    }\n                                }\n                            }\n                            Div(row mt-sm){\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                    If(#isStartProcessing#==1){\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\n                                    }.Else{\n                                        If(#isVotingAllowed#==1){\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    Div(list-group-item text-center t5){\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1status)\n                            }\n                            Div(col-md-6 text-left){\n                                SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\n                                Div(#status_class#){\n                                    AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses, Index:#instance_status#)\n                                }\n\n                                If(#instance_flags_full_data#==0){\n                                    Div(text-muted){LangRes(@1not_filled)}\n                                }\n                                If(#instance_progress_number_participants#==0){\n                                    Div(text-muted){LangRes(@1not_participants)}\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1decision)\n                            }\n                            Div(col-md-6 text-left){\n                                If(#instance_flags_decision#==-2){\n                                    LangRes(@1not_enough_votes)\n                                }\n                                If(#instance_flags_decision#==-1){\n                                    Span(Class:text-danger, Body: LangRes(@1rejected))\n                                }\n                                If(#instance_flags_decision#==0){\n                                    LangRes(@1no)\n                                }\n                                If(#instance_flags_decision#==1){\n                                    Span(Class:text-success, Body: LangRes(@1accepted))\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1date_start)\n                            }\n                            SetVar(date_started_class,)\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\n                                SetVar(date_started_class,\"text-muted\")\n                            }\n                            Div(col-md-6 text-left #date_started_class#){\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1date_end)\n                            }\n                            SetVar(date_started_class,)\n                            If(#instance_status#==#FINISHED#){\n                                SetVar(date_ended_class,\"text-muted\")\n                            }\n                            Div(col-md-6 text-left #date_ended_class#){\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1voting_volume)\n                            }\n                            Div(col-md-6 text-left){\n                                #instance_voting_volume#\n                            }\n                        }\n                        Div(row){\n                            If(#instance_voting_count_type_voters# != 1){\n                                Div(col-md-6 text-right){\n                                    LangRes(@1voting_quorum)\n                                }\n                                Div(col-md-6 text-left){\n                                    #instance_voting_quorum#\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 text-right){\n                                LangRes(@1participants)\n                                Span(Class: text-danger, Body:*)\n                            }\n                            Div(col-md-6 text-left){\n                                If(#instance_progress_number_participants# > 0){\n                                    #instance_progress_number_participants#\n                                }.Else{\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\n                                }\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\n                                DBFind(@1votings_participants, src_voting_participants).Where({voting_id:#vID#, ecosystem: #ecosystem_id#}).Order(\"id\").Columns(\"id,member->member_id,member->role_id,decision_date,decision,voting_id\").Custom(_address){\n                                    DBFind(@1votings).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\n                                    If(Or(#type_voting_type_participants# == 4,#type_voting_type_participants# == 5)){\n                                        DBFind(@1roles).Columns(\"id,role_name\").WhereId(#member.role_id#).Vars(rl)\n                                        LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\n                                            Span(Class: fa icon-eye mr-sm).(#rl_role_name#)\n                                        }.Style(display:flex; align-items:center;)\n                                    }.Else{\n                                        Div(Class: t6 m0, Body: Address(#member.member_id#))\n                                    }\n                                }.Custom(_voter){\n                                    DBFind(@1votings).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\n                                    If(#type_voting_type_participants# == 4){\n                                        Div(Class: t6 m0, Body: Address(#member.member_id#))\n                                    }\n                                    If(#type_voting_type_participants# == 5){\n                                        If(#decision#!=0){\n                                            Div(Class: t6 m0, Body: Address(#member.member_id#))\n                                        }\n                                    }\n                                }.Custom(_decision){\n                                    If(#decision#==0){\n                                        LangRes(@1did_not_vote)\n\n                                    }.ElseIf(Or(#type_decision#==1,#type_decision#==2)){\n                                        Div(Class: text-success text-center, Body: $@1vote_for_candidate$:)\n                                        Div(Class: text-success text-center, Body: Address(#decision#))\n                                        Div(Class: text-success text-center, Body: $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n\n                                    }.ElseIf(#type_decision#==3){\n                                        If(#decision#==1){\n                                            Span(Class: text-success, Body: $@1document_accept$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n                                        If(#decision#==-1){\n                                            Span(Class: text-danger, Body: $@1document_reject$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n\n                                    }.ElseIf(#type_decision#==4){\n                                        If(#decision#==1){\n                                            Span(Class: text-success, Body: $@1decision_accept$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n                                        If(#decision#==-1){\n                                            Span(Class: text-danger, Body: $@1decision_reject$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n\n                                    }.ElseIf(#type_decision#==5){\n                                        If(#decision#==1){\n                                            Span(Class: text-success, Body: $@1contract_accepted$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n                                        If(#decision#==-1){\n                                            Span(Class: text-danger, Body: $@1contract_rejected$ $@1at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\n                                        }\n                                    }\n                                }\n                                Table(src_voting_participants, \"=_address,=_voter,=_decision\")\n                            }\n                        }\n                        Div(row mt-sm t5){\n                            Div(col-md-12){\n                                If(#instance_voting_type#==1){\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\n                                        Button(Class: btn btn-link text-bold, Page: @1voting_invite, PageParams: \"vID=#vID#\"){\n                                            LangRes(@1participants_add)\n                                        }.Popup(50, $@1participants_add$)\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    Div(list-group-item text-center){\n                        Div(row t4){\n                            Div(col-md-5 col-md-offset-1){\n                                LangRes(@1voted)\n                            }\n                            Div(col-md-5){\n                                LangRes(@1progress)\n                            }\n                        }\n                        If(graph_work==\"good\"){\n                            Div(row text-muted t6 text-center){\n                                Div(col-md-5 col-md-offset-1){\n                                    LangRes(@1voting_graph_voted)\n                                }\n                                Div(col-md-5){\n                                    LangRes(@1voting_graph_progress)\n                                }\n                            }\n                        }\n                        Div(row text-center t3){\n                            If(#instance_voting_count_type_voters# == 1){\n                                Div(col-md-5 col-md-offset-1){\n                                    #instance_progress_number_voters# LangRes(@1voters) / #instance_voting_volume# LangRes(@1voters)\n                                }\n                                Div(col-md-5){\n                                    #instance_progress_percent_success#% LangRes(@1success) / 100% LangRes(@1total)\n                                }\n                            }.Else{\n                                Div(col-md-5 col-md-offset-1){\n                                    #instance_progress_number_voters# LangRes(@1voters) / #instance_progress_percent_voters#% LangRes(@1voters)\n                                }\n                                Div(col-md-5){\n                                    #instance_progress_percent_success#% LangRes(@1success) / 100% LangRes(@1total)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(@1attention))\n        }\n    }\n}.Style(\n    .t3 {font-size:24px;}\n    .t4 {font-size:18px;}\n    .t5 {font-size:14px;}\n    .t6 {font-size:12px;}\n    .break {word-break: break-all;}\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract BufferManager {\n    data {\n        Action string\n        Key string\n        Val string \"optional\"\n    }\n    \n    func decodeArray(s string) array {\n        var ar array\n        if HasPrefix($buf[\"value\"], \"[\") {\n            ar = JSONDecode($buf[\"value\"])\n        }\n        return ar\n    }\n    \n    action {\n        $emptyVal = JSONEncode(\"\")\n        $buf = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, key:$Key, member_id:$key_id}).Row()\n        if !$buf {\n            var buf map, id int\n            id = DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, key:$Key, value:$emptyVal, member_id:$key_id})\n            buf[\"id\"] = Str(id)\n            buf[\"value\"] = \"\"\n            buf[\"member_id\"] = Str($key_id)\n            buf[\"key\"] = Str($Key)\n            $buf = buf\n        }\n        var id int\n        id = Int($buf[\"id\"])\n        if $Action == \"clean\" {\n            DBUpdate(\"@1buffer_data\", id, {value:$emptyVal})\n        }\n        if $Action == \"set\" {\n            DBUpdate(\"@1buffer_data\", id, {value:$Val})\n        }\n        if $Action == \"array_add_value\" {\n            var ar array enc string\n            ar = decodeArray($buf[\"value\"])\n            ar = Append(ar, $Val)\n            enc = JSONEncode(ar)\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\n        }\n        if $Action == \"array_remove_value\" {\n            var ar arNew array i int enc string\n            ar = decodeArray($buf[\"value\"])\n            while i < Len(ar){\n                if ar[i] != $Val{\n                    arNew = Append(arNew, ar[i])\n                }\n                i = i + 1\n            }\n            enc = JSONEncode(arNew)\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\n        }\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessCheck {\n    data {\n        rid int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        var role map\n        role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$rid}).Columns(\"id,role_name,deleted,roles_access,role_type,creator->member_id\").Row()\n        if !role {\n            warning Sprintf(\"%v: \" + LangRes(\"@1role_not_found\", $Lang), $this_contract)\n        }\n\n        if role[\"creator.member_id\"] == $key_id {\n            return\n        }\n\n        var rids array, i int\n        rids = JSONDecode(role[\"roles_access\"])\n        if !RoleAccess(...rids){\n            warning Sprintf(LangRes(\"@1role_change_no_permission\", $Lang), role[\"role_name\"])\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesUnassign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesUnassign {\n    data {\n        row_id int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        var assigned map roleId int\n        assigned = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, id:$row_id, deleted:0 }).Columns(\"id,role->id\").Row()\n        if !assigned {\n            warning LangRes(\"@1role_participant_not_found\", $Lang)\n        }\n        var buffer_id int\n        buffer_id = Int(assigned[\"role.id\"])\n        roleId = Int(DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:buffer_id}).One(\"id\"))\n        if roleId == 0 {\n            warning LangRes(\"@1role_not_found_in_registry\", $Lang)\n        }\n\n        var specialRules map prev_contract string\n        prev_contract = $stack[0]\n        if Len($stack) > 2{\n            prev_contract = $stack[Len($stack) - 2]\n        }\n        specialRules[\"@1VotingValidatorAccept\"] = 1\n        specialRules[\"@1DelegateRefresh\"] = 1\n        specialRules[\"@1CandidateValidatorRequest\"] = 1\n        specialRules[\"@1InvestorRefresh\"] = 1\n        specialRules[\"@1VotingTokensRefundCreate\"] = 1\n        specialRules[\"@1sysparams_ValidatorResign\"] = 1\n\n        if specialRules[prev_contract] != 1 {\n            @1RolesAccessCheck(\"rid\", roleId)\n        }\n    }\n\n    action {\n        // delete the member\n        var m map\n        m[\"deleted\"] = 1\n        m[\"date_deleted\"] = BlockTime()\n        DBUpdate(\"@1roles_participants\", $row_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CatalogAddEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CatalogAddEcosystem {\n    data {\n        Ecosystem_name string\n        Ecosystem_number int\n        Ecosystem_type int\n        Description string\n        Conditions string\n        Flag_free int\n        Vde_form_address string \"optional\"\n        Vde_page string \"optional\"\n        Web_form_address string \"optional\"\n        Web_page string \"optional\"\n        Email string \"optional\"\n        Phone string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    conditions {\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\n        FOUNDER_ACCOUNT = \"founder_account\"\n        DELEGATE_ACCOUNT = \"delegate_account\"\n\n        if Size($Email) > 0 {\n            var emailParts int\n            emailParts = Split($Email, \"@\")\n            if Len(emailParts) != 2 {\n                warning LangRes(\"@1email_invalid\", $Lang)\n            }\n        }\n\n        var ecoExists map\n        ecoExists = DBFind(\"catalog_ecosystems\").Where({ecosystem_number:$Ecosystem_number, deleted:0}).Row()\n        if ecoExists {\n            info LangRes(\"@1ecosystem_number_exist\", $Lang)\n        }\n\n        var isFounder, isDelegate bool\n        var founder, delegate map\n        founder = DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:FOUNDER_ACCOUNT, ecosystem:$Ecosystem_number}).Row()\n        isFounder = founder[\"value\"] == $key_id\n\n        delegate = DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:DELEGATE_ACCOUNT, ecosystem:$Ecosystem_number}).Row()\n        if delegate {\n            isDelegate = delegate[\"value\"] == $key_id\n        }\n        if !(isFounder || isDelegate) {\n            warning LangRes(\"@1ecosystem_can_not_add\", $Lang)\n        }\n    }\n\n    action {\n        var ecosystem_info url_address m map\n        ecosystem_info[\"description\"] = $Description\n        ecosystem_info[\"conditions\"] = $Conditions\n        ecosystem_info[\"email\"] = $Email\n        ecosystem_info[\"phone\"] = $Phone\n\n        url_address[\"web_page\"] = $Web_page\n        url_address[\"web_form_address\"] = $Web_form_address\n        url_address[\"vde_page\"] = $Vde_page\n        url_address[\"vde_form_address\"] = $Vde_form_address\n\n        m[\"ecosystem_name\"] = $Ecosystem_name\n        m[\"ecosystem_number\"] = $Ecosystem_number\n        m[\"ecosystem_type\"] = $Ecosystem_type\n        m[\"image_id\"] = 0\n        m[\"ecosystem_info\"] = ecosystem_info\n        m[\"url_address\"] = url_address\n        m[\"flag_free\"] = $Flag_free\n        DBInsert(\"catalog_ecosystems\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAssign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAssign {\n    data {\n        rid int\n        member_id int\n        Lang string \"optional\"\n    }\n\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        $role = DBFind(\"@1roles\").Where({id:$rid}).Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Row()\n        if (Int($role[\"role_type\"]) == 2){\n            warning LangRes(\"@1elective_role_voting_only\", $Lang)\n        }\n        if !$role {\n            warning LangRes(\"@1role_not_found\", $Lang)\n        }\n\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$member_id}).Row() {\n            warning LangRes(\"@1key_not_found\", $Lang)\n        }\n\n        if $role[\"deleted\"] == 1 {\n            warning LangRes(\"@1role_deleted_request_impossible\", $Lang)\n        }\n\n        var specialRules map prev_contract string\n        prev_contract = $stack[0]\n        if Len($stack) > 2{\n            prev_contract = $stack[Len($stack) - 2]\n        }\n        specialRules[\"@1VotingValidatorAccept\"] = 1\n        specialRules[\"@1DelegateRefresh\"] = 1\n        specialRules[\"@1CandidateValidatorRequest\"] = 1\n        specialRules[\"@1VotingTemplateRun\"] = 1\n        specialRules[\"@1VotingTokensRefundCreate\"] = 1\n        if specialRules[prev_contract] != 1 {\n            @1RolesAccessCheck(\"rid\", $rid)\n        }\n    }\n\n    action {\n        if DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$rid, \"member->member_id\":$member_id, deleted:0}).One(\"id\") {\n            // do not re-assign and do not warning because this contract may be called for other\n            return\n        }\n        var role member appointer map\n        role[\"id\"] = $role[\"id\"]\n        role[\"type\"] = $role[\"role_type\"]\n        role[\"name\"] = $role[\"role_name\"]\n        role[\"image_id\"] = $role[\"image_id\"]\n\n        member = getMemberInfo($member_id)\n        appointer = getMemberInfo($key_id)\n        var m map\n        m[\"role\"] = role\n        m[\"member\"] = member\n        m[\"appointed\"] = appointer\n        m[\"date_created\"] = BlockTime()\n        m[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1roles_participants\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorRequest {\n    data {\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n        Lang string \"optional\"\n    }\n\n    func isNotValidIp(ip string) bool {\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n\n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i < lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i + 1\n        }\n\n        return false\n    }\n\n    conditions {\n        if $ecosystem_id != 1 {\n            warning LangRes(\"@1contract_first_ecosystem_only\", $Lang)\n        }\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$CommissionAddress}).Row(){\n            warning LangRes(\"@1address_invalid\", $Lang)\n        }\n\n        if isNotValidIp($HostIp){\n            warning LangRes(\"@1enter_valid_ip\", $Lang)\n        }\n    }\n\n    action {\n        var roleParam string roleId int\n        roleParam = \"role_candidate_for_validators\"\n        roleId = Int(AppParam($appId, roleParam, 1))\n\n        if !DBFind(\"@1roles\").Where({ecosystem:1, id:roleId, deleted:0}).One(\"id\"){\n            warning Sprintf(LangRes(\"@1role_app_param_not_found\", $Lang), roleParam)\n        }\n        \n        @1RolesAssign(\"rid,member_id\", roleId, $key_id)\n        //no $ecosystem_id\n        var m map\n        m[\"host_ip\"] = $HostIp\n        m[\"commission_pub\"] = \"\"\n        m[\"commission_address\"] = $CommissionAddress\n        m[\"description\"] = $Description\n        m[\"comment\"] = $Comment\n        m[\"candidate_key_id\"] = $key_id\n        m[\"date_created\"] = BlockTime()\n        m[\"deleted\"] = 0\n        DBInsert(\"@1sysparams_candidate\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsProcess",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsProcess {\n    data {\n        notific_id int\n        Lang string \"optional\"\n    }\n    \n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n    \n    conditions {\n        $notify = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\n        if !$notify {\n            warning LangRes(\"@1notification_not_found\", $Lang)\n        }\n\n        if $notify[\"sender.type\"] == 2{\n            if $notify[\"date_start_processing\"] != \"\" {\n                warning LangRes(\"@1notification_processing_started_already\", $Lang)\n            }\n            var rid string\n            rid = Int($notify[\"recipient.role_id\"])\n            if rid > 0{\n                if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\n                    warning LangRes(\"@1notification_not_part_of_role\", $Lang)\n                }\n            }\n        }else{\n            if $notify[\"sender.type\"] != 1 {\n                warning LangRes(\"@1notification_type_not_found\", $Lang)\n            }\n        }\n    }\n\n    action {\n        var model map\n        model[\"processing_info\"] = getMemberInfo($key_id)\n        model[\"date_start_processing\"] = BlockTime()\n        DBUpdate(\"@1notifications\", $notific_id, model)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsSend {\n    data {\n        member_id int \"optional\"\n        rid int \"optional\"\n        closure_type int \"optional\"\n\n        sender int\n        icon_name string \"optional\"\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_map string // json encoded expected\n        Lang string \"optional\"\n        current_role_id string \"optional\"\n    }\n    \n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            if DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Columns(\"id\").Row() {\n                res[\"member_id\"] = Str(kid)\n                res[\"member_name\"] = IdToAddress(kid)\n                res[\"image_id\"] = \"0\"\n            }\n        }\n        return res\n    }\n    \n    func sendNotify(recipient map) {\n        var notification map\n        notification[\"header\"] = $text_header\n        notification[\"type\"] = $notify_type\n        notification[\"icon\"] = $icon_name\n        notification[\"body\"] = $text_body\n        var sender map\n        if $sender == 1 && $senderMember {\n            // send from member\n            sender[\"type\"] = $sender\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\n        }else{\n            if $sender == 2 && $senderRole{\n                // send from role\n                sender[\"type\"] = $sender\n                sender[\"role_id\"] = $senderRole[\"id\"]\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\n            }\n        }\n        var model map\n        model[\"recipient\"] = recipient\n        model[\"sender\"] = sender\n        model[\"notification\"] = notification\n        model[\"page_name\"] = $page_name\n        model[\"page_params\"] = $params_map\n        model[\"date_created\"] = BlockTime()\n        model[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1notifications\", model)\n    }\n\n    func sendToRole(roleId int) {\n        var role recipient map\n        role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:roleId}).Row()\n        recipient[\"role_id\"] = role[\"id\"]\n        recipient[\"role_name\"] = role[\"role_name\"]\n        recipient[\"image_id\"] = role[\"image_id\"]\n        sendNotify(recipient)\n    }\n\n    conditions {\n        $member_id = Int($member_id)\n        $rid = Int($rid)\n        $current_role_id = Int($current_role_id)\n        if Size($icon_name) < 1{\n            $icon_name = \"icon-envelope\"\n        }\n        if $member_id != 0 {\n            if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$member_id}).Row(){\n                warning LangRes(\"@1key_not_found\", $Lang)\n            }\n            $notify_type = 1 // is \"member\"\n        }else{\n            if $rid > 0{\n                $notify_type = 2 // is \"role\"\n                if !DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$rid}).One(\"id\") {\n                    warning $this_contract + \": \" + LangRes(\"@1recipient_role_not_found\", $Lang)\n                }\n                if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$rid, deleted:0}).One(\"id\") {\n                    warning $this_contract + \": \" + LangRes(\"@1recipient_role_no_members\", $Lang)\n                }\n            } else{\n                warning $this_contract + \": \" + LangRes(\"@1notification_type_not_defined\", $Lang)\n            }\n        }\n        $senderMember = nil\n        $senderRole = nil\n        if $sender == 1 {\n            $senderMember = getMemberInfo($key_id)\n        }else{\n            if $sender == 2 {\n                $senderRole = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$current_role_id}).Row()\n                if !$senderRole {\n                    warning $this_contract + \": \" + LangRes(\"@1sender_role_not_found\", $Lang)\n                }\n            }else{\n                warning $this_contract + \": \" + LangRes(\"@1sender_invalid\", $Lang)\n            }\n        }\n    }\n    \n    action {\n        if $member_id != 0 {\n            sendNotify(getMemberInfo($member_id))\n        }else{\n            if $rid > 0 {\n                if $closure_type == 1 {\n                    // Single closure: one begins the process - the others do not see\n                    sendToRole($rid)\n                } else {\n                    // Multiple closure: to each his own notification\n                    $notify_type = 1\n                    var participants array\n                    participants = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$rid, deleted:0}).Columns(\"member->member_id\")\n                    var i int\n                    while i < Len(participants) {\n                        var p map\n                        p = participants[i]\n                        sendNotify(getMemberInfo(Int(p[\"member.member_id\"])))\n                        i = i + 1\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MetricsUpdate {\n    data {\n        Interval string\n        Aggregate string\n        Lang string \"optional\"\n    }\n    \n    func mapping(items array) map {\n        var mapout map, i int\n        while i < Len(items){\n            var k v string, item map\n            item = items[i]\n            k = item[\"key\"]\n            v = item[\"value\"]\n            mapout[k] = v\n            i = i + 1\n        }\n        return mapout\n    }\n    \n    conditions {\n        if $Interval <= 0 {\n            $Interval = 1\n        }\n        var current_year int\n        current_year = Int(Substr(BlockTime(), 0, 4))\n        if $Interval > (current_year - 1970) * 365 {\n            warning LangRes(\"@1interval_too_big\", $Lang)\n        }\n        $interval = Sprintf(LangRes(\"@1x_days\", $Lang), $Interval)\n    }\n\n    action {\n        var pages members txs array metrics map\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\n\n        var mPages mMembers mTxs map\n        mPages = mapping(pages)\n        mMembers = mapping(members)\n        mTxs = mapping(txs)\n\n        var i lenPages int\n        lenPages = Len(pages)\n        while i < lenPages{\n            var t map, k string\n            t = pages[i]\n            k = t[\"key\"]\n            metrics[k] = Sprintf(LangRes(\"@1pages\", $Lang) + \": %v, \" + LangRes(\"@1members\", $Lang) + \": %v, \" + LangRes(\"@1tx\", $Lang) + \": %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\n            i = i + 1\n        }\n\n        if lenPages > 0{\n            @1BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeRemoveByKey {\n    data {\n        Lang string \"optional\"\n    }\n    \n    func nodesRemove(keyId int) array {\n        var nodesJSON string nodes res array\n        nodesJSON = SysParamString(\"full_nodes\")\n        if !HasPrefix(nodesJSON, \"[\") {\n            // empty string nodes\n            return res\n        }\n        nodes = JSONDecode(nodesJSON)\n        var i int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            if node[\"key_id\"] != keyId {\n                res = Append(res, node)\n            }\n            i = i + 1\n        }\n        return res\n    }\n    \n    conditions {\n        if $original_contract != \"ValidatorResign\"{\n            warning LangRes(\"@1contract_unknown\", $Lang)\n        }\n    }\n\n    action {\n        var nodes array fullNodes string\n        nodes = nodesRemove($key_id)\n        fullNodes = JSONEncode(nodes)\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsBroadcast",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsBroadcast {\n    data {\n        RoleId int\n        Header string\n        Body string\n        Lang string \"optional\"\n    }\n    \n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            if DBFind(\"@1keys\").Columns(\"id\").Where({ecosystem:$ecosystem_id, id:kid}).Row() {\n                res[\"member_id\"] = Str(kid)\n                res[\"member_name\"] = IdToAddress(kid)\n                res[\"image_id\"] = \"0\"\n            }\n        }\n        return res\n    }\n    \n    conditions {\n        if $RoleId !=1 {\n            error LangRes(\"@1admin_only_action\", $Lang)\n        }\n        if $ecosystem_id != 1 {\n            error LangRes(\"@1first_ecosystem_admin_only_action\", $Lang)\n        }\n        $ecos = DBFind(\"@1ecosystems\").Columns(\"id\")\n        $lenEcos = Len($ecos)\n        if $lenEcos == 1{\n            error LangRes(\"@1other_ecosystems_not_found\", $Lang)\n        }\n        $appId = Int(DBFind(\"@1applications\").Columns(\"id\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\n    }\n    \n    action {\n        var i lenIds int eco map ids array bt string sender recipient params note map\n        bt = BlockTime()\n        sender = getMemberInfo($key_id)\n        sender[\"type\"] = \"1\"\n        note[\"header\"] = $Header\n        note[\"type\"] = \"1\"\n        note[\"icon\"] = \"icon-envelope\"\n        note[\"body\"] = $Body\n\n        while i < $lenEcos{\n            eco = $ecos[i]\n            var ecoId int\n            ecoId = Int(eco[\"id\"])\n            if ecoId != 1 {\n                var adminRoleId int\n                adminRoleId = Int(AppParam($appId, \"role_admin\", ecoId))\n                ids = DBFind(\"@1roles_participants\").Where({ecosystem:ecoId, \"role->id\":adminRoleId, \"role->type\":3}).Columns(\"member->member_id\")\n                lenIds = Len(ids)\n                var i_ids int\n                while i_ids < lenIds{\n                    recipient = ids[i_ids]\n                    recipient = getMemberInfo(Int(recipient[\"member.member_id\"]))\n                    var m map\n                    m[\"recipient\"] = recipient\n                    m[\"sender\"] = sender\n                    m[\"notification\"] = note\n                    m[\"page_name\"] = \"@1notifications_show\"\n                    m[\"page_params\"] = params\n                    m[\"date_created\"] = bt\n                    m[\"ecosystem\"] = ecoId\n                    DBInsert(\"@1notifications\", m)\n                    i_ids = i_ids + 1\n                }\n            }\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsClose",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsClose {\n    data {\n        notific_id int\n        Lang string \"optional\"\n    }\n\n    func getPermission() int {\n        var array_permissions array result i int prevContract string\n        array_permissions = [\"@1TokensRefundAccept\", \"@1VotingDecisionCheck\", \"@1VotingDelete\"]\n\n        prevContract = $stack[0]\n        if Len($stack) > 2 {\n            prevContract = $stack[Len($stack) - 2]\n        }\n        while i < Len(array_permissions) {\n            var contract_name string\n            contract_name = array_permissions[i]\n            if contract_name==prevContract {\n                result = 1\n            }\n            i = i + 1\n        }\n        return result\n    }\n\n\n    conditions {\n        $notify = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"id,date_start_processing,processing_info->member_id,closed,notification->type,recipient->member_id\").Row()\n        if !$notify {\n            warning LangRes(\"@1notification_not_found\", $Lang)\n        }\n\n        // checking the type of notification\n        if $notify[\"notification.type\"] != 1 && $notify[\"notification.type\"] != 2 {\n            warning LangRes(\"@1notification_type_not_found\", $Lang)\n        }\n\n        // getting permission\n        var flag_permission int\n        flag_permission = getPermission()\n\n        // checking single notification\n        if $notify[\"notification.type\"] == 1 && flag_permission == 0 {\n            if $notify[\"recipient.member_id\"] != $key_id {\n                warning LangRes(\"@1notification_another_member\", $Lang)\n            }\n        }\n\n        // checking role notification\n        if $notify[\"notification.type\"] == 2 && flag_permission == 0 {\n            if $notify[\"date_start_processing\"] == \"\" {\n                warning LangRes(\"@1notification_processing_not_started\", $Lang)\n            }\n\n            if $notify[\"processing_info.member_id\"] != $key_id {\n                warning LangRes(\"@1notice_processing_started_another_member\", $Lang)\n            }     \n        }\n    }\n\n    action {\n        if $notify[\"closed\"] > 0 {\n            return\n        }\n        if $notify[\"notification.type\"] == 1 {\n            @1NotificationsProcess(\"notific_id\", $notific_id)\n        }\n        var m map\n        m[\"date_closed\"] = BlockTime()\n        m[\"closed\"] = 1\n        DBUpdate(\"@1notifications\", $notific_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipDecide {\n    data {\n        notific_id int\n        Accept int\n        Lang string \"optional\"\n    }\n    \n    conditions {\n        $request = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$notific_id}).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Row()\n\n        if Int($request[\"closed\"]) == 1 {\n            warning LangRes(\"@1request_processed_already\", $Lang)\n        }\n\n        var founder_id ecoId int\n        ecoId = Int($request[\"page_params.ecosystem_id\"])\n        founder_id = DBFind(\"@1parameters\").Where({name:\"founder_account\", ecosystem:ecoId}).One(\"value\")\n\n        if founder_id != $key_id {\n            warning LangRes(\"@1ecosystem_not_founder\", $Lang)\n        }\n    }\n    \n    action {\n        var params map\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\n        if ($Accept == 0){\n            params[\"status\"] = 1\n\n            var pub string mid eco_id int\n            mid = Int($request[\"sender.member_id\"])\n            eco_id = Int($request[\"page_params.ecosystem_id\"])\n            pub = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:mid}).One(\"pub\") \n            DBInsert(\"@1keys\", {id:mid,pub:pub,ecosystem:eco_id})\n        }\n        else{\n            params[\"status\"] = 0\n        }\n\n        var icon header body page ecoName ecoId string\n        ecoId = $request[\"page_params.ecosystem_id\"]\n        ecoName = DBFind(\"@1ecosystems\").Where({id:ecoId}).One(\"name\")\n        icon = \"icon icon-user-follow\"\n        header = LangRes(\"@1request_accepted\", $Lang)\n        body = Sprintf(LangRes(\"@1ecosystem_request_accepted\", $Lang), ecoName, ecoId)\n        page = \"membership_user_view\"\n\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, icon, header, body, page, params)\n        @1NotificationsClose(\"notific_id\", $notific_id)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipRequest {\n    data {\n        ecosystem_num int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        if DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"page_params->ecosystem_id\":$ecosystem_num, \"sender->member_id\":$key_id, closed:0, page_name:\"membership_admin_view\"}).Row(){\n            warning LangRes(\"@1request_sent_already\", $Lang)\n        }\n    }\n\n    action {\n        var notific_params map founder_id int\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\n        founder_id = DBFind(\"@1parameters\").Where({name:\"founder_account\", ecosystem:$ecosystem_num}).One(\"value\")\n\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", LangRes(\"@1membership_request_new\", $Lang), LangRes(\"@1details_view\", $Lang), \"membership_admin_view\", notific_params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEdit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileEdit {\n    data {\n        member_name string\n        information string \"optional\"\n        image_id string \"optional\"\n        Lang string \"optional\"\n    }\n\n    conditions {\n        $member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\n        $app_id = DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\")\n        $image_id = Int($image_id)\n\n        if !$member {\n            // check member_name\n            if DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, member_name:$member_name}).One(\"id\") {\n                warning LangRes(\"@1member_name_taken\", $Lang)\n            }\n        }\n    }\n\n    action {\n        if $image_id > 0 {\n            $Data = DBFind(\"@1binaries\").Where({ecosystem:$ecosystem_id, id:$image_id}).One(\"data\")\n            $image_id = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $Data, Int($app_id))\n        }\n\n        var m map\n        m[\"member_info\"] = {information:$information}\n        m[\"image_id\"] = $image_id\n        \n        if $member{\n            DBUpdate(\"members\", $key_id, m)\n        } else {\n            m[\"id\"] = $key_id\n            m[\"member_name\"] = $member_name\n            m[\"ecosystem\"] = $ecosystem_id\n            DBInsert(\"members\", m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEditAvatar",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileEditAvatar {\n    data {\n        member_image bytes \"file\"\n        Lang string \"optional\"\n    }\n\n    conditions {\n        $app_id = DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\")\n        \n        if !$app_id {\n            warning LangRes(\"@1app_not_found\", $Lang)\n        }\n    }\n\n    action {\n        var m map\n        m[\"image_id\"] = @1UploadBinary(\"Name,Data,ApplicationId\", \"new_avatar\", $member_image, Int($app_id))\n        @1BufferManager(\"Action,Key,Val\", \"set\", \"avatar\", JSONEncode(m))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RoleConditions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\n    data {\n        role string\n        Lang string \"optional\"\n    }\n    \n    conditions {\n        if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->name\":$role, \"member->member_id\":$key_id, deleted:0}).Row() {\n            warning Sprintf(LangRes(\"@1x_role_only_action\", $Lang), $role)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorDelete {\n    data {\n        Id int\n        Lang string \"optional\"\n    }\n    \n    conditions {\n        var candidateId roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").Where({ecosystem:$ecosystem_id, id:$Id}).One(\"candidate_key_id\")\n\n        $role = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":roleId, \"member->member_id\":candidateId}).Row()\n        if !$role {\n            warning LangRes(\"@1candidate_role_not_found\", $Lang)\n        }\n    }\n    \n    action {\n        DBUpdate(\"sysparams_candidate\", $Id, {deleted:1})\n        @1RolesUnassign(\"row_id\", Int($role[\"id\"]))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessManager {\n    data {\n        Action string\n        Rid int\n        ManagerRid string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    func updateAccess(ra array) {\n        var roles_access string\n        roles_access = JSONEncode(ra)\n        DBUpdate(\"@1roles\", $Rid, {\"roles_access\": roles_access})\n    }\n    \n    func updateBufferAccess(ra array) {\n        var roles_access string\n        roles_access = JSONEncode(ra)\n        if !$buffer_id {\n            DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\", \"value\": roles_access})\n        } else {\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": roles_access})\n        }\n    }\n    \n    conditions {\n        $ManagerRid = Int($ManagerRid)\n        if $Rid > 0 {\n            @1RolesAccessCheck(\"rid\", $Rid)\n\n            $role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$Rid}).Columns(\"id,roles_access\").Row()\n            if !$role {\n                warning LangRes(\"@1role_not_found\", $Lang)\n            }\n            if $ManagerRid > 0 {\n                if !DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$ManagerRid}).One(\"id\") {\n                    warning LangRes(\"@1role_not_found\", $Lang)\n                }\n            }\n            var ids array, i int\n            $ids = ids\n            ids = JSONDecode($role[\"roles_access\"])\n            while i < Len(ids){\n                if ids[i] > 0 {\n                    $ids = Append($ids, ids[i])\n                }\n                i = i + 1\n            }\n        } else {\n            $buffer_managers = 0\n            $buffer_id = 0\n            $ids = []\n            var buffer map\n            buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\n            if buffer {\n                $buffer_managers = buffer[\"value\"]\n                $buffer_id = buffer[\"id\"]\n            }\n        }\n    }\n\n    action {\n        if $Rid == 0 {\n            if $buffer_managers {\n                $ids = JSONDecode($buffer_managers)\n            }\n        }\n        if $Action == \"clean\" {\n            updateAccess([])\n        }\n        if $ManagerRid > 0 {\n            var i int, idsNew array\n            if $Action == \"remove\" {\n                while i < Len($ids) {\n                    if $ids[i] != $ManagerRid{\n                        idsNew = Append(idsNew, $ids[i])\n                    }\n                    i = i + 1\n                }\n                if $Rid == 0 {\n                    updateBufferAccess(idsNew)\n                } else {\n                    updateAccess(idsNew)\n                }\n            }\n            if $Action == \"add\" {\n                var double bool\n                while i < Len($ids) {\n                    if $ids[i] == $ManagerRid{\n                        double = true\n                    }\n                    i = i + 1\n                }\n                if !double {\n                    $ids = Append($ids, $ManagerRid)\n                }\n                if $Rid == 0 {\n                    updateBufferAccess($ids)\n                } else {\n                    updateAccess($ids)\n                }\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelegateRefresh {\n    data {\n        Lang string \"optional\"\n    }\n    \n    func notInArray(val string, arr array) bool {\n        var i int\n        // info arr\n        while i < Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i = i + 1\n        }\n        return true\n    }\n    \n    func getAppRoleId(id int, name string) int {\n        var rid int\n        rid = Int(AppParam(id, name, 1))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", $Lang), name)\n        }\n        return rid\n    }\n    \n    conditions {\n        MainCondition()\n        var appId roleId int\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning LangRes(\"@1app_not_found\", $Lang)\n        }\n        roleId = getAppRoleId(appId, \"role_delegate\")\n\n        $role = DBFind(\"@1roles\").Where({id:roleId, deleted:0}).Row()\n        if !$role{\n            warning LangRes(\"@1role_not_found\", $Lang)\n        }\n    }\n\n    action {\n        // get delegates ids\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\n        ecosystems = DBFind(\"@1ecosystems\").Columns(\"id\")\n        while i < Len(ecosystems) {\n            var eco delegateParam map\n            eco = ecosystems[i]\n            ecoId = Int(eco[\"id\"])\n            delegateParam = DBFind(\"@1parameters\").Where({name:\"delegate_account\", ecosystem:ecoId}).Row()\n            if !delegateParam{\n                delegateParam = DBFind(\"@1parameters\").Where({name:\"founder_account\", ecosystem:ecoId}).Row()\n            }\n\n            if notInArray(delegateParam[\"value\"], delegateIds){\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\n            }\n            i = i + 1\n        }\n\n        // remove old role assigns\n        rid = Int($role[\"id\"])\n        currentDelegates = DBFind(\"@1roles_participants\").Where({\"role->id\":rid, deleted:0}).Columns(\"id,member->member_id\")\n        var delegate map id int\n        i = 0\n        while i < Len(currentDelegates){\n            delegate = currentDelegates[i]\n            if notInArray(delegate[\"member.member_id\"], delegateIds){\n                id = Int(delegate[\"id\"])\n                @1RolesUnassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n\n        // assign new roles\n        var key map delegateId int\n        i = 0\n        while i < Len(delegateIds) {\n            delegateId = Int(delegateIds[i])\n            key = DBFind(\"@1keys\").WhereId(delegateId).Row()\n            if key {\n                // check role dup\n                if !DBFind(\"@1roles_participants\").Where({\"member->member_id\":delegateId, \"role->id\":rid, deleted:0}).Row(){\n                    @1RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\n                }\n            }\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesCreate {\n    data {\n        role_name string\n        role_type int\n        Lang string \"optional\"\n    }\n    \n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        // system role\n        if $role_type == 3 {\n            warning LangRes(\"@1system_role_can_not_create\", $Lang)\n        }\n    }\n\n    action {\n        var roles_access_arr array, buffer map\n        buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\n        if buffer {\n            roles_access_arr = JSONDecode(buffer[\"value\"])\n            DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": \"[]\"})\n        }\n        roles_access_arr = Append(roles_access_arr, 1)\n\n        var m map\n        m[\"creator\"] = getMemberInfo($key_id)\n        m[\"role_name\"] = $role_name\n        m[\"role_type\"] = $role_type\n        m[\"date_created\"] = BlockTime()\n        m[\"roles_access\"] = JSONEncode(roles_access_arr)\n        m[\"ecosystem\"] = $ecosystem_id\n        $result = DBInsert(\"@1roles\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract InvestorRefresh {\n    data {\n        RoleId int\n        Lang string \"optional\"\n    }\n    \n    func notInArray(val string, arr array) bool {\n        var i lenArr int\n        lenArr = Len(arr)\n        while i < lenArr{\n            if val == Str(arr[i]){\n                return false\n            }\n            i = i + 1\n        }\n        return true\n    }\n    \n    func getParamInt(id int, name string) int {\n        var param int\n        param = Int(AppParam(id, name, 1))\n        if param == 0{\n            warning Sprintf(LangRes(\"@1application_parameter_not_set\", $Lang), name)\n        }\n        return param\n    }\n    \n    conditions {\n        var appId int\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning LangRes(\"@1app_not_found\", $Lang)\n        }\n\n        var roleValidatorId roleInvestorId string\n\n        roleValidatorId = getParamInt(appId, \"role_validator\")\n        if !RoleAccess(roleValidatorId) {\n            warning LangRes(\"@1not_validator_can_not_run\", $Lang)\n        }\n\n        roleInvestorId = getParamInt(appId, \"role_investor_with_voting_rights\")\n        $roleId = Int(DBFind(\"@1roles\").Where({id:roleInvestorId, deleted:0}).One(\"id\"))\n        if $roleId == 0{\n            warning LangRes(\"@1investor_role_not_found_or_removed\", $Lang)\n        }\n\n        $limitInvestors = getParamInt(appId, \"investors_number\")\n    }\n\n    action {\n        // get investors ids\n        var keysInvestors assignedInvestors investorsIds assignedIds array\n        keysInvestors = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id}).Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\n        assignedInvestors = DBFind(\"@1roles_participants\").Where({\"role->id\":$roleId, deleted:0}).Columns(\"member->member_id\")\n\n        // get ids\n        var i int\n        while i < Len(keysInvestors) {\n            var inv map\n            inv = keysInvestors[i]\n            investorsIds[i] = inv[\"id\"]\n            i = i + 1\n        }\n        i = 0\n        while i < Len(assignedInvestors) {\n            var inv map\n            inv = assignedInvestors[i]\n            assignedIds[i] = inv[\"member.member_id\"]\n            i = i + 1\n        }\n\n        // remove old investors\n        var assigned map mid string\n        i = 0\n        while i < Len(assignedIds) {\n            if notInArray(assignedIds[i], investorsIds){\n                mid = assignedIds[i]\n                assigned = DBFind(\"@1roles_participants\").Where({\"member->member_id\":mid, \"role->id\":$roleId}).Row()\n                if assigned {\n                    @1RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\n                }\n            }\n            i = i + 1\n        }\n        // add new investors\n        i = 0\n        while i < Len(investorsIds) {\n            if notInArray(investorsIds[i], assignedIds){\n                var id int\n                id = Int(investorsIds[i])\n                if DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:id}).Row(){\n                    @1RolesAssign(\"rid,member_id\", $roleId, id)\n                }\n            }\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesInstall",
            "Conditions": "false",
            "Value": "contract RolesInstall {\n    data {\n        Lang string \"optional\"\n    }\n    \n    func addRole(name string, withParticipant bool) {\n        var m param map paramName string id int\n        m[\"role_name\"] = name\n        m[\"role_type\"] = 3\n        m[\"ecosystem\"] = $ecosystem_id\n        id = Int(DBFind(\"@1roles\").Where(m).One(\"id\"))\n        if id == 0 {\n            m[\"default_page\"] = \"\"\n            m[\"deleted\"] = 0\n            m[\"creator->image_id\"] = 0\n            m[\"creator->member_name\"] = \"founder\"\n            m[\"creator->member_id\"] = Str($key_id)\n            m[\"date_created\"] = BlockTime()\n            m[\"roles_access\"] = \"[1]\"\n            id = DBInsert(\"@1roles\", m)\n        }\n        paramName = \"role_\" + Replace(ToLower(name), \" \", \"_\")\n        param = Int(AppParam($appId, paramName, $ecosystem_id))\n        if param == 0{\n            @1NewAppParam(\"ApplicationId,Name,Value,Conditions\", $appId, paramName, id, \"ContractConditions(\\\"MainCondition\\\")\")\n        }\n\n        if withParticipant {\n            var participant map\n            participant[\"role->id\"] = id\n            participant[\"role->type\"] = m[\"role_type\"]\n            participant[\"role->name\"] = m[\"role_name\"]\n            participant[\"role->image_id\"] = 0\n            participant[\"member->member_id\"] = Str($key_id)\n            participant[\"member->member_name\"] = \"founder\"\n            participant[\"member->image_id\"] = 0\n            participant[\"ecosystem\"] = $ecosystem_id\n\n            if !DBFind(\"@1roles_participants\").Where(participant).One(\"id\"){\n                participant[\"date_created\"] = BlockTime()\n                DBInsert(\"@1roles_participants\", participant)\n            }\n        }\n    }\n    \n    conditions {\n        MainCondition()\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\n        if $appId == 0{\n            warning LangRes(\"@1app_not_found\", $Lang)\n        }\n    }\n\n    action {\n        addRole(\"Admin\", true)\n        addRole(\"Developer\", true)\n\n        if $ecosystem_id == 1{\n            addRole(\"Apla Consensus asbl\", false)\n            addRole(\"Candidate for validators\", false)\n            addRole(\"Validator\", false)\n            addRole(\"Investor with voting rights\", false)\n            addRole(\"Delegate\", false)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequest {\n    data {\n        rid int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        if !DBFind(\"@1roles\").WhereId($rid).One(\"id\") {\n            warning LangRes(\"@1role_not_found\", $Lang)\n        }\n\n        if DBFind(\"@1roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\n            warning LangRes(\"@1role_you_added_already\", $Lang)\n        }\n\n        if DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1roles_request_view\", \"page_params->rid\":$rid, \"sender->member_id\":$key_id, closed:0}).One(\"id\") {\n            warning LangRes(\"@1request_sent_already\", $Lang)\n        }\n    }\n\n    action {\n        var params map\n        params[\"rid\"] = $rid\n\n        var member_id int\n        member_id = EcosysParam(\"founder_account\")\n\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", member_id, 1, \"fa-bars\", LangRes(\"@1roles\", $Lang), LangRes(\"@1new_request_received\", $Lang), \"roles_request_view\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequestDecision",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequestDecision {\n    data {\n        decision int\n        notific_id int\n        rid int \"optional\"\n        member_id int \"optional\"\n    }\n\n    conditions {\n    }\n\n    action {\n        if ($decision == 1){\n            @1RolesAssign(\"rid,member_id\", $rid, $member_id)\n        }\n\n        if ($notific_id > 0){\n            @1NotificationsClose(\"notific_id\", $notific_id)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRestore",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRestore {\n    data {\n        rid int\n    }\n\n    conditions {\n        @1RolesAccessCheck(\"rid\", $rid)\n    }\n\n    action {\n        DBUpdate(\"@1roles\", $rid, {deleted:0})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesDelete {\n    data {\n        rid int\n        ops string\n    }\n\n    conditions {\n        @1RolesAccessCheck(\"rid\", $rid)\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"@1roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"id\")\n\n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            @1RolesUnassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n        var m map\n        if $ops == \"D\" {\n            m[\"deleted\"] = 1\n            m[\"date_deleted\"] = BlockTime()\n        }\n        if $ops == \"R\" {\n            m[\"deleted\"] = 0\n        }\n        DBUpdate(\"@1roles\", $rid, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefund",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefund {\n    data {\n        SenderId string \"optional\"\n        RecipientId string\n        Amount string\n        Lang string \"optional\"\n    }\n\n    conditions {\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"VotingDecisionAccept\" || $original_contract == \"TokensRefundAccept\"))) {\n            error LangRes(\"@1sender_id_invalid\", $Lang)\n        }\n        var addressLen int\n        addressLen = 24\n\n        $amount = Money($Amount)\n        if $SenderId == \"\"{\n            $SenderId = Sprintf(\"%v\", $key_id)\n        }\n        if $amount <= 0 {\n            error LangRes(\"@1amount_less_equal_zero\", $Lang)\n        }\n\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\n            // is address. convert to key id\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\n        }\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\n            // is address. convert to key id\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\n        }\n\n        if Size($SenderId) > addressLen{\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\n        }\n        if Size($RecipientId) > addressLen{\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\n        }\n\n        $RecipientId = Int($RecipientId)\n        $SenderId = Int($SenderId)\n        var sender recipient map\n        sender = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$SenderId}).Row()\n        if !sender{\n            error LangRes(\"@1sender_invalid\", $Lang)\n        }\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$RecipientId}).Row(){\n            error LangRes(\"@1recipient_invalid\", $Lang)\n        }\n        if sender[\"blocked\"] == 1 {\n            error LangRes(\"@1sender_blocked\", $Lang)\n        }\n        if sender[\"amount\"] < $amount{\n            error Sprintf(LangRes(\"@1sender_amount_not_enough\", $Lang), sender[\"amount\"])\n        }\n    }\n\n    action {\n        DBUpdate(\"@1keys\", $SenderId, {\"-amount\":$amount})\n        DBUpdate(\"@1keys\", $RecipientId, {\"+amount\":$amount})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundAccept {\n    data {\n        Id string\n        Lang string \"optional\"\n    }\n    \n    func closeNotes() {\n        var notes array\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\n        var i int\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            var noteId int\n            noteId = Int(note[\"id\"])\n            @1NotificationsClose(\"notific_id\", noteId)\n            i = i + 1\n        }\n    }\n    \n    func refundAmount(victimId, attackerId, amount string) {\n        @1TokensRefund(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\n    }\n    \n    func unblockAccounts(victimId, attackerId string) {\n        if victimId == 0 {\n            error LangRes(\"@1victim_key_invalid\", $Lang)\n        }\n        if attackerId == 0{\n            error LangRes(\"@1attacker_key_invalid\", $Lang)\n        }\n        DBUpdate(\"@1keys\", Int(victimId), {blocked:0})\n        DBUpdate(\"@1keys\", Int(attackerId), {blocked:0})\n    }\n\n    conditions {\n        $Id = Int($Id)\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row() //no $ecosystem_id\n        if !$tokenrefund{\n            error LangRes(\"@1tokens_refund_not_found\", $Lang)\n        }\n        $votingID = $tokenrefund[\"voting_id\"]\n    }\n\n    action {\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        closeNotes()\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\n            return\n        }\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\n        // status 3: closed; result 2: the tokens returned\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:2})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundReject {\n    data {\n        Id string\n        Lang string \"optional\"\n    }\n\n    func unblockAccounts(victimId, attackerId string) {\n        if victimId == 0 {\n            error LangRes(\"@1victim_key_invalid\", $Lang)\n        }\n        if attackerId == 0{\n            error LangRes(\"@1attacker_key_invalid\", $Lang)\n        }\n        DBUpdate(\"@1keys\", Int(victimId), {blocked:0})\n        DBUpdate(\"@1keys\", Int(attackerId), {blocked:0})\n    }\n\n    conditions {\n        $Id = Int($Id)\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row() //no $ecosystem_id\n        if !$tokenrefund{\n            error LangRes(\"@1tokens_refund_not_found\", $Lang)\n        }\n    }\n\n    action {\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        // status 3: closed; 1: return cancelled\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:1})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensTransfer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensTransfer {\n    data {\n        Amount money\n        Sender_AccountId int\n        Recipient_AccountId int\n        Comment string \"optional\"\n        //Signature string \"optional hidden\"\n        Lang string \"optional\"\n    }\n\n    conditions {\n        //check amount\n        if $Amount == 0 {\n            error LangRes(\"@1amount_zero\", $Lang)\n        }\n        if $Amount < 0 {\n            error LangRes(\"@1amount_less_zero\", $Lang)\n        }\n\n        //check the sender\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$Sender_AccountId}).One(\"id\") {\n            error Sprintf(LangRes(\"@1sender_x_invalid\", $Lang), $Sender_AccountId)\n        }\n\n        //check balance\n        $sender_balance = Money(DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$Sender_AccountId}).One(\"amount\"))\n        if $Amount > $sender_balance {\n            error LangRes(\"@1amount_less_than_needed\", $Lang)\n        }\n\n        //check the recipient\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$Recipient_AccountId}).One(\"id\") {\n            error Sprintf(LangRes(\"@1recipient_x_invalid\", $Lang), $Recipient_AccountId)\n        }\n    }\n\n    action {\n        DBUpdate(\"@1keys\", $Sender_AccountId, {\"-amount\":$Amount})\n        DBUpdate(\"@1keys\", $Recipient_AccountId, {\"+amount\":$Amount})\n        var m map\n        m[\"sender_id\"] = $Sender_AccountId\n        m[\"recipient_id\"] = $Recipient_AccountId\n        m[\"amount\"] = $Amount\n        m[\"comment\"] = $Comment\n        m[\"block_id\"] = $block\n        m[\"txhash\"] = $txhash\n        m[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1history\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensSend {\n    data {\n        Amount money\n        Recipient_Account string\n        //Signature string \"signature:TokensTransfer\"\n        Lang string \"optional\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(LangRes(\"@1recipient_x_invalid\", $Lang), $Recipient_Account)\n        }\n    }\n\n    action {\n        //TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n        @1TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId\", $Amount, $key_id, $recipient)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ValidatorResign {\n    data {\n        Lang string \"optional\"\n    }\n    \n    func getParamInt(id int, name string) int {\n        var param int\n        param = Int(AppParam(id, name, 1))\n        if param == 0{\n            warning Sprintf(LangRes(\"@1application_parameter_not_set\", $Lang), name)\n        }\n        return param\n    }\n    \n    conditions {\n        var roleValidatorId appId int\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\n        roleValidatorId = getParamInt(appId, \"role_validator\")\n        if !RoleAccess(roleValidatorId) {\n            warning LangRes(\"@1not_validator_can_not_run\", $Lang)\n        }\n        $assigned = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id, \"role->id\":roleValidatorId, deleted:0}).One(\"id\")\n    }\n\n    action {\n        @1RolesUnassign(\"row_id\", Int($assigned))\n        @1NodeRemoveByKey()\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionCheck {\n    data {\n        votingID int\n        Lang string \"optional\"\n    }\n    \n    func runContract(cont, p string) {\n        if Size(cont) > 0 {\n            var params map\n            if Size(p) > 0 {\n                params = JSONToMap(p)\n            }\n            CallContract(cont, params)\n        }\n    }\n    \n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100) / total)\n        if percent > 100 {\n            percent = 100\n        }\n        return percent\n    }\n    \n    func totalSummForTypeVotingVoters(votingId int) int {\n        var type_number_voters array\n        type_number_voters = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID})\n        var i int\n        i = 0\n        var summ int\n        while i < Len(type_number_voters) {\n            var type_number_voter map\n            type_number_voter = type_number_voters[i]\n            summ = summ + Int(type_number_voter[\"decision\"])\n            i = i + 1\n        }\n        return summ\n    }\n    \n    func closeNotes() {\n        var notes array i int\n        notes = DBFind(\"@1notifications\").Where({closed:0, ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            @1NotificationsClose(\"notific_id\", Int(note[\"id\"]))\n            i = i + 1\n        }\n    }\n    \n    conditions {\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id: $votingID }).Columns(\"voting->name,voting->count_type_voters,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\n        $voting_name = $voting[\"voting.name\"]\n        $voting_type = Int($voting[\"voting.type\"]) //system or custom\n        $type_decision = Int($voting[\"voting.type_decision\"])\n        $optional_role_id = Int($voting[\"optional.role_id\"])\n        $number_role_vacancies = Int($voting[\"optional.role_vacancies\"])\n        $number_voters = Int($voting[\"progress.number_voters\"]) // already voted\n        $contract_accept = $voting[\"optional.contract_accept\"]\n        $contract_reject = $voting[\"optional.contract_reject\"]\n        $param_accept = $voting[\"optional.contract_accept_params\"]\n        $param_reject = $voting[\"optional.contract_reject_params\"]\n        $flag_success = $voting[\"flags.success\"]\n        $quorum = Int($voting[\"voting.quorum\"])\n        $percent_voters = Int($voting[\"progress.percent_voters\"])\n        $status = Int($voting[\"status\"])\n\n        var prevContract string\n        prevContract = $stack[0]\n        if Len($stack) > 2{\n            prevContract = $stack[Len($stack) - 2]\n        }\n        if prevContract != \"@1VotingUpdate\"{\n            // if $percent_voters < $quorum && $quorum > 50 || $status != $FINISHED {\n            if $status != $FINISHED {\n                warning LangRes(\"@1voting_not_expired\", $Lang)\n            }\n        }\n\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\n        if !$subject_id {\n            warning LangRes(\"@1voting_subject_not_found\", $Lang)\n        }\n\n        $ACCEPT = 1\n        $REJECT = -1\n    }\n\n    action {\n        var percent_voters flag_decision i int\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\n        if $flag_success == $ACCEPT { //now enough participants to make a decision\n            if $type_decision == 1 || $type_decision == 2 {\n                var candidates_added_count int\n                candidates_added_count = 0 // candidates who have already been added\n                flag_decision = $REJECT // none of the candidates has been added yet\n\n                var subjects array\n                subjects = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Order({number_accept:\"-1\"}).Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\")\n                i = 0\n                while i < Len(subjects) {\n                    var subject map\n                    subject = subjects[i]\n\n                    // if there are still vacancies\n                    if candidates_added_count < $number_role_vacancies {\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                        if (Int($voting[\"voting.count_type_voters\"]) == 0){\n                            if percent_voters >= $quorum {\n                                // added candidate to the role\n                                var buffer_id int\n                                var role map\n                                buffer_id = Int($optional_role_id)\n                                role = DBFind(\"@1roles\").Columns(\"id,role_type,role_name,image_id\").Where({ecosystem:$ecosystem_id, id: buffer_id}).Row()\n                                if role {\n                                    var member assignedMember map mid rid string\n                                    member[\"member_id\"] = subject[\"subject.member_id\"]\n                                    mid = member[\"member_id\"]\n                                    rid = role[\"id\"]\n                                    assignedMember = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"member->member_id\":mid, \"role->id\":rid, deleted:0}).Row()\n\n                                    if !assignedMember {\n                                        member[\"member_name\"] = subject[\"subject.member_name\"]\n                                        member[\"image_id\"] = subject[\"subject.image_id\"]\n\n                                        var rolePart appointed m map\n                                        rolePart[\"id\"] = role[\"id\"]\n                                        rolePart[\"type\"] = role[\"role_type\"]\n                                        rolePart[\"name\"] = role[\"role_name\"]\n                                        rolePart[\"image_id\"] = role[\"image_id\"]\n\n                                        appointed[\"voting_id\"] = $votingID\n                                        appointed[\"voting_name\"] = $voting_name\n\n                                        // add a candidate to the role\n                                        m[\"role\"] = rolePart\n                                        m[\"member\"] = member\n                                        m[\"appointed\"] = appointed\n                                        m[\"date_created\"] = BlockTime()\n                                        m[\"ecosystem\"] = $ecosystem_id\n                                        DBInsert(\"@1roles_participants\", m)\n\n                                        candidates_added_count = candidates_added_count + 1\n                                        // if at least one of the candidates was added to the role, then the voting decision is considered successful\n                                        flag_decision = $ACCEPT\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    i = i + 1\n                }\n            }\n\n            if $type_decision == 3 {\n                var subject map\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept\").Row()\n                if subject {\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                        if percent_voters >= $quorum {\n                            flag_decision = $ACCEPT\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    } else {\n                        var total_summ_type_voter int\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\n                        if total_summ_type_voter >= 1 {\n                            flag_decision = $ACCEPT\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    }\n                }\n            }\n\n            if $type_decision == 4 {\n                var subject map\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Row()\n                if subject {\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                        if percent_voters >= $quorum {\n                            flag_decision = $ACCEPT\n\n                            var column string\n                            column = Str(subject[\"subject.column\"])\n                            $colValue = Str(subject[\"subject.column_value\"])\n                            // type of voting - custom\n                            if $voting_type == 1 {\n                                // ALWAYS CHECK THE PERMISSION\n                                var colType string\n                                colType = GetColumnType(subject[\"subject.table\"], column)\n                                if colType == \"number\"{\n                                    $colValue = Int($colValue)\n                                }\n                                if colType == \"money\"{\n                                    $colValue = Money($colValue)\n                                }\n                                if colType == \"double\" {\n                                    $colValue = Float($colValue)\n                                }\n                                var m map\n                                m[column] = $colValue\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\n                            }\n\n                            // type of voting - system\n                            if $voting_type == 2 {\n                                @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\n                            }\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    } else {\n                        var total_summ_type_voter int\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\n                        if total_summ_type_voter >= 1 {\n                            flag_decision = $ACCEPT\n\n                            var column string\n                            column = Str(subject[\"subject.column\"])\n                            $colValue = Str(subject[\"subject.column_value\"])\n                            // type of voting - custom\n                            if $voting_type == 1 {\n                                // ALWAYS CHECK THE PERMISSION\n                                var colType string\n                                colType = GetColumnType(subject[\"subject.table\"], column)\n                                if colType == \"number\"{\n                                    $colValue = Int($colValue)\n                                }\n                                if colType == \"money\"{\n                                    $colValue = Money($colValue)\n                                }\n                                if colType == \"double\" {\n                                    $colValue = Float($colValue)\n                                }\n                                var m map\n                                m[column] = $colValue\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\n                            }\n\n                            // type of voting - system\n                            if $voting_type == 2 {\n                                @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\n                            }\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    }\n                }\n            }\n\n            if $type_decision == 5 {\n                var subject map\n                subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\n                if subject {\n                    $contract_accept = subject[\"subject.contract_accept\"]\n                    $contract_reject = subject[\"subject.contract_reject\"]\n                    $param_accept = subject[\"subject.contract_accept_params\"]\n                    $param_reject = subject[\"subject.contract_reject_params\"]\n\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\n                        if percent_voters >= $quorum {\n                            flag_decision = $ACCEPT\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    } else {\n                        var total_summ_type_voter int\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\n                        if total_summ_type_voter >= 1 {\n                            flag_decision = $ACCEPT\n                        } else {\n                            flag_decision = $REJECT\n                        }\n                    }\n                }\n            }\n\n            if flag_decision == $ACCEPT {\n                runContract($contract_accept, $param_accept)\n                closeNotes()\n            }\n            if flag_decision == $REJECT {\n                runContract($contract_reject, $param_reject)\n                closeNotes()\n            }\n        }\n\n        DBUpdate(\"@1votings\", $votingID, {\"flags->decision\":flag_decision})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingInvite",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingInvite {\n    data {\n        votingID int\n        var_id int //0, member_id, role_id\n        Lang string \"optional\"\n    }\n\n    func addVotingKey(key map, votingId int) {\n        var m member map kid int name string\n        kid = Int(key[\"id\"])\n        name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).One(\"member_name\")\n\n        member[\"member_id\"] = kid\n        if name != \"\" {\n            member[\"member_name\"] = name\n        }else{\n            member[\"member_name\"] = IdToAddress(kid)\n        }\n        m[\"voting_id\"] = votingId\n        m[\"member\"] = member\n        m[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1votings_participants\", m)\n    }\n    \n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_expired_can_not_add_participants\", $Lang)\n        }\n\n        $type_participants = $voting[\"voting.type_participants\"]\n        $type_voting = $voting[\"voting.type\"]\n        $number_participants = Int($voting[\"progress.number_participants\"])\n\n        if $number_participants > 1 && $type_voting == 2 {\n            warning LangRes(\"@1system_voting_can_not_add_participants\", $Lang)\n        }\n        var isAdded string\n        if $type_participants == 2 {\n            if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$var_id}).Row(){\n                warning LangRes(\"@1key_not_found\", $Lang)\n            }\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID,\"member->member_id\":$var_id}).One(\"id\")\n            if isAdded {\n                warning LangRes(\"@1member_added_before\", $Lang)\n            }\n        }\n\n        if $type_participants == 3 {\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\n            if isAdded {\n                warning LangRes(\"@1voting_participants_added_before\", $Lang)\n            }\n            if Len(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0})) == 0 {\n                warning LangRes(\"@1roles_participants_not_found\", $Lang)\n            }\n        }\n        if ($type_participants == 4 || $type_participants == 5) {\n            isAdded = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID,\"member->role_id\":$var_id}).One(\"id\")\n            if isAdded {\n                if ($type_participants == 4){\n                    warning LangRes(\"@1role_members_added_before\", $Lang)\n                }\n                if ($type_participants == 5){\n                    warning LangRes(\"@1role_added_before\", $Lang)\n                }\n            }\n            if Len(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0})) == 0 {\n                warning LangRes(\"@1roles_participants_not_found\", $Lang)\n            }\n        }\n    }\n\n    action {\n        var i int\n        if $type_participants == 1 { // everybody\n            var keys array\n            keys = DBFind(\"@1keys\").Where({id:{\"$neq\":$guest_key}, ecosystem:$ecosystem_id})\n            while i < Len(keys) {\n                addVotingKey(keys[i], $votingID)\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        if $type_participants == 2 { // manual\n            var key map\n            key = DBFind(\"@1keys\").WhereId($var_id).Row()\n            addVotingKey(key, $votingID)\n            $number_participants = $number_participants + 1\n        }\n        if $type_participants == 3 { // role\n            var roles array\n            roles = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0}).Order(\"id\")\n            while i < Len(roles) {\n                var role m map\n                role = roles[i]\n                m[\"voting_id\"] = $votingID\n                m[\"member\"] = role[\"member\"]\n                m[\"ecosystem\"] = $ecosystem_id\n                DBInsert(\"@1votings_participants\", m)\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        if $type_participants == 4 { // all participants in the selected roles vote\n            var roles array\n            roles = DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$var_id, deleted:0}).Order(\"id\")\n            while i < Len(roles) {\n                var role map\n                role = roles[i]\n                var cust map\n                cust = JSONToMap(role[\"member\"])\n                cust[\"role_id\"] = $var_id\n                DBInsert(\"@1votings_participants\", {ecosystem: $ecosystem_id, voting_id: $votingID, member: cust})\n                $number_participants = $number_participants + 1\n                i = i + 1\n            }\n        }\n        if $type_participants == 5 { // one participant of the selected roles votes\n            var role map\n            role[\"role_id\"] = $var_id\n            role[\"member_id\"] = \"0\"\n            var json string\n            json = JSONEncode(role)\n            $role_id_send = $var_id\n            DBInsert(\"@1votings_participants\", {ecosystem: $ecosystem_id, voting_id: $votingID, member: json})\n            $number_participants = $number_participants + 1\n        }\n        var v map\n        v[\"progress->number_participants\"] = $number_participants\n        if $type_participants == 3 {\n            v[\"voting->role_id\"] = $var_id\n            DBUpdate(\"@1votings\", $votingID, v)\n        }else{\n            DBUpdate(\"@1votings\", $votingID, v)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingUpdate {\n    data {\n        votingID int\n        Lang string \"optional\"\n    }\n\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    func percentPartOfTotal(part, total int) int {\n        if total == 0{ total = 1 }\n        var percent int\n        percent = Int((part * 100) / total)\n        if percent > 100 { percent = 100 }\n        return percent\n    }\n\n    conditions {\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:$STARTED}).Columns(\"flags,voting,progress,progress->number_voters,voting->count_type_voters\").Row()\n        if !$voting {\n            warning LangRes(\"@1started_voting_not_found\", $Lang)\n        }\n    }\n\n    action {\n        var progress voting map\n        progress = safeJsonToMap($voting[\"progress\"])\n        voting = safeJsonToMap($voting[\"voting\"])\n\n        var flag_success percent_success percent_voters number_voters quorum volume int\n        // increment count of voters\n        quorum = Int(voting[\"quorum\"])\n        volume = Int(voting[\"volume\"])\n        number_voters = Int(progress[\"number_voters\"]) + 1\n        if(Int($voting[\"voting.count_type_voters\"]) == 0){\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\n            percent_success = percentPartOfTotal(percent_voters, volume)\n        } else {\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\n            percent_success = percentPartOfTotal(number_voters, volume)\n        }\n\n        // update the flag of success\n        if percent_success == 100 {\n            flag_success = 1\n        }\n        progress[\"percent_voters\"] = percent_voters\n        progress[\"percent_success\"] = percent_success\n        progress[\"number_voters\"] = number_voters\n\n        var m map\n        m[\"progress\"] = progress\n        m[\"flags->success\"] = flag_success\n\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->count_type_voters\").Where({ecosystem:$ecosystem_id, id:$votingID}).One(\"voting.count_type_voters\")\n        if $check_type == 0 {\n            if (percent_voters >= quorum && quorum > 50 && percent_voters >= volume) || percent_voters == 100 {\n                // if a quorum is more than 50% we can immediately make the decision\n                // OR\n                // if all participants have voted we can not wait until the end of the voting period\n                m[\"status\"] = $FINISHED\n                DBUpdate(\"@1votings\", $votingID, m)\n                @1VotingDecisionCheck(\"votingID\", $votingID)\n            }else{\n                DBUpdate(\"@1votings\", $votingID, m)\n            }\n        }\n        if $check_type == 1 {\n            $total_voters = Int($voting[\"progress.number_voters\"]) + 1\n            if ($total_voters >= volume) || percent_voters == 100 {\n                // if a quorum is more than 50% we can immediately make the decision\n                // OR\n                // if all participants have voted we can not wait until the end of the voting period\n                m[\"status\"] = $FINISHED\n                DBUpdate(\"@1votings\", $votingID, m)\n                @1VotingDecisionCheck(\"votingID\", $votingID)\n            }else{\n                DBUpdate(\"@1votings\", $votingID, m)\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCandidateAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCandidateAccept {\n    data {\n        votingID int\n        CandidateID int\n        Lang string \"optional\"\n        RoleId int\n    }\n    \n    func closeNotification() {\n        var role_id_search int\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n        if role_id_search > 0 {\n            @1NotificationsClose(\"notific_id\", role_id_search)\n        } else {\n            var id int\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n            if id > 0 {\n                @1NotificationsClose(\"notific_id\", id)\n            }\n        }\n    }\n    \n    conditions {\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n        $voting = DBFind(\"@1votings\").Columns(\"id,flags->decision,flags->notifics,status\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\n        if !$voting {\n            warning LangRes(\"@1voting_not_found\", $Lang)\n        }\n        if $voting[\"status\"] == $FINISHED {\n            warning LangRes(\"@1voting_expired_can_not_vote\", $Lang)\n        }\n        if $voting[\"status\"] != $STARTED {\n            warning LangRes(\"@1voting_not_started\", $Lang)\n        }\n        $subject_map = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"subject->member_id\":$candidateID}).Row()\n        if !$subject_map {\n            warning LangRes(\"@1voting_subject_not_found\", $Lang)\n        }\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\n\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\n            $participant_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\n            if !$participant_id {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n    }\n\n    action {\n        if $participant_role_id {\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\n            if $rid {\n                var mem_role int\n                mem_role = Int($rid[\"member.role_id\"])\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\n                if !$participant_id{\n                    warning LangRes(\"@1voting_not_participant\", $Lang)\n                } else {\n                    var solo_role_vot map\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\n                    solo_role_vot[\"member_id\"] = $key_id\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\n                    var json string\n                    json = JSONEncode(solo_role_vot)\n                    DBUpdate(\"@1votings_participants\", Int($rid[\"id\"]), {\"member\":json})\n                    $participant_id = Int($rid[\"id\"])\n                }\n            } else {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n        \n        if $voting[\"flags.notifics\"] == 1 {\n            closeNotification()\n        }\n\n        if $voting[\"flags.decision\"] != 1 {\n            var bt string\n            bt = BlockTime()\n\n            // write the result of the voting\n            var m map\n            m[\"decision_date\"] = bt\n            m[\"decision\"] = $candidateID\n            DBUpdate(\"@1votings_participants\", Int($participant_id), m)\n\n            // increment count of accept\n            DBUpdate(\"@1votings_subject\", Int($subject_map[\"id\"]), {\"+number_accept\":1})\n\n            @1VotingUpdate(\"votingID\", $votingID)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionAccept {\n    data {\n        votingID int\n        Lang string \"optional\"\n        RoleId int\n    }\n    \n    func closeNotification() {\n        var role_id_search int\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n        if role_id_search > 0 {\n            @1NotificationsClose(\"notific_id\", role_id_search)\n        } else {\n            var id int\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n            if id > 0 {\n                @1NotificationsClose(\"notific_id\", id)\n            }\n        }\n    }\n    \n    conditions {\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n        $voting = DBFind(\"@1votings\").WhereId($votingID).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_not_found\", $Lang)\n        }\n        if $voting[\"voting.type_participants\"] == 3{\n            if $voting[\"voting.role_id\"] != $RoleId{\n                warning LangRes(\"@1voting_role_incorrect\", $Lang)\n            }\n        }\n        if $voting[\"status\"] == $FINISHED {\n            warning LangRes(\"@1voting_expired_can_not_vote\", $Lang)\n        }\n        if $voting[\"status\"] != $STARTED {\n            warning LangRes(\"@1voting_not_started\", $Lang)\n        }\n        $subject = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Row()\n        if !$subject {\n            warning LangRes(\"@1voting_subject_not_found\", $Lang)\n        }\n\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\n\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").WhereId($votingID).Row()\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\n            $participant_id = DBFind(\"@1votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\n            if !$participant_id {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n    }\n\n    action {\n        if $participant_role_id {\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\n            if $rid {\n                var mem_role int\n                mem_role = Int($rid[\"member.role_id\"])\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\n                if !$participant_id{\n                    warning LangRes(\"@1voting_not_participant\", $Lang)\n                } else {\n                    var solo_role_vot map\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\n                    solo_role_vot[\"member_id\"] = $key_id\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\n                    var json string\n                    json = JSONEncode(solo_role_vot)\n                    DBUpdate(\"@1votings_participants\", Int($rid[\"id\"]), {\"member\":json})\n                    $participant_id = Int($rid[\"id\"])\n                }\n            } else {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n        \n        if $voting[\"flags.notifics\"] == 1 {\n            closeNotification()\n        }\n        if $voting[\"flags.decision\"] != 1 {\n            var bt string\n            bt = BlockTime()\n\n            DBUpdate(\"@1votings_participants\", Int($participant_id), {decision_date:bt, decision:1})\n\n            // increment count of accept\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), {\"+number_accept\":1})\n            @1VotingUpdate(\"votingID\", $votingID)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDelete {\n    data {\n        votingID int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        $INVALID = 5\n        var voting map bt string\n        bt = BlockTime()\n        voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, \"creator->member_id\":$key_id, \"status\":$INVALID}).Columns(\"id\").Row()\n        if !voting {\n            warning LangRes(\"@1voting_delete_impossible\", $Lang)\n        }\n    }\n\n    action {\n        DBUpdate(\"@1votings\", $votingID, {deleted:1})\n        var notes array\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID})\n        var i int\n        while i < Len(notes){\n            var note map noteId int\n            note = notes[i]\n            noteId = Int(note[\"id\"])\n            @1NotificationsClose(\"notific_id\", noteId)\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCreate {\n    data {\n        voting_name string\n        voting_type int\n        type_participants int\n        type_decision int\n\n        volume int\n        quorum int \"optional\"\n\n        count_type_voters string \"optional\"\n        description string \"optional\"\n        interval string \"optional\"\n        start_date string \"optional\"\n        start_time string \"optional\"\n        end_date string \"optional\"\n        end_time string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = s Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n    \n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n    \n    func isCalledFromPage() bool {\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\n    }\n    \n    func fixDatetimes() {\n        $date_started = dateAddTime($start_date, $start_time)\n        $date_ended = dateAddTime($end_date, $end_time)\n\n        if UnixDateTime($date_started) == 0 || UnixDateTime($date_ended) == 0 { // invalid datetimes\n            if isCalledFromPage(){\n                var errs array\n                if Size($start_date) < 10 {\n                    errs = Append(errs, \"starting date\")\n                }\n                if Size($start_time) < 5 {\n                    errs = Append(errs, \"starting time\")\n                }\n                if Size($end_date) < 10 {\n                    errs = Append(errs, \"ending date\")\n                }\n                if Size($end_time) < 5 {\n                    errs = Append(errs, \"ending time\")\n                }\n                error Sprintf(LangRes(\"@1voting_creation_error_x_unspecified\", $Lang), Join(errs, \", \"))\n            }else{\n                $date_started = $block_time\n                $interval = Int($interval)\n                if $interval == 0 {\n                    $interval = 3\n                }\n                $date_ended = $date_started + 3600 * 24 * $interval\n                $date_started = DateTime($date_started)\n                $date_ended = DateTime($date_ended)\n            }\n        }\n        if UnixDateTime($date_started) < $block_time{\n            error LangRes(\"@1starting_date_invalid\", $Lang)\n        }\n        if UnixDateTime($date_started) >= UnixDateTime($date_ended){\n            error LangRes(\"@1ending_date_invalid\", $Lang)\n        }\n    }\n\n    conditions {\n        if (($type_decision == 1 || $type_decision == 2) && $count_type_voters == 1){\n            info LangRes(\"@1voting_type_not_suitable\", $Lang)\n        }\n        if $count_type_voters == 0 {\n            if ($quorum < 5) || ($quorum > 100) {\n                warning Sprintf(LangRes(\"@1quorum_range_should_be\", $Lang), $quorum)\n            }\n            if ($volume < 50) || ($volume > 100) {\n                warning Sprintf(LangRes(\"@1volume_range_should_be\", $Lang), $volume)\n            }\n        }\n        if $count_type_voters == 1 {\n            if $volume <= 0 {\n                info LangRes(\"@1volume_less_one\", $Lang)\n            }\n            $quorum = 0\n        }\n        if $voting_type == 2 {\n            var specRules map\n            specRules[\"VotingTokensRefundCreate\"] = 1\n            specRules[\"VotingTemplateRun\"] = 1\n            specRules[\"VotingNodeAdd\"] = 1\n            if specRules[$original_contract] != 1 {\n                warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", $Lang), $original_contract)\n            }\n        }\n\n\n        $key = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row()\n        if !$key {\n            warning LangRes(\"@1ecosystem_not_member\", $Lang)\n        }\n\n        fixDatetimes()\n    }\n\n    action {\n        var voting progress flags creator map votingId int\n        voting[\"name\"] = $voting_name\n        voting[\"type\"] = $voting_type\n        voting[\"description\"] = $description\n        voting[\"type_participants\"] = $type_participants\n        voting[\"type_decision\"] = $type_decision\n        voting[\"volume\"] = $volume\n        voting[\"quorum\"] = $quorum\n        voting[\"count_type_voters\"] = $count_type_voters\n\n        progress[\"number_participants\"] = \"0\"\n        progress[\"number_voters\"] = \"0\"\n        progress[\"percent_success\"] = \"0\"\n        progress[\"percent_voters\"] = \"0\"\n\n        flags[\"success\"] = \"0\"\n        flags[\"decision\"] = \"0\"\n        flags[\"full_data\"] = \"0\"\n        flags[\"notifics\"] = \"0\"\n\n        creator[\"member_id\"] = $key[\"id\"]\n        creator[\"member_name\"] = IdToAddress($key_id)\n        var m map\n        m[\"voting\"] = voting\n        m[\"progress\"] = progress\n        m[\"flags\"] = flags\n        m[\"creator\"] = creator\n        m[\"status\"] = 1\n        m[\"date_started\"] = $date_started\n        m[\"date_ended\"] = $date_ended\n        m[\"ecosystem\"] = $ecosystem_id,\n\n        votingId = DBInsert(\"@1votings\", m)\n\n        // if all members are voting participants\n        if $type_participants == 1 {\n            @1VotingInvite(\"votingID,var_id\", votingId, 0)\n        }\n        $result = votingId\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCheck {\n    data {\n        votingID int\n        Lang string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $voting_map = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID}).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\n        if !$voting_map {\n            warning LangRes(\"@1voting_not_found\", $Lang)\n        }\n\n        $type_decision = $voting_map[\"voting.type_decision\"]\n        if $type_decision < 1 || $type_decision > 5 {\n            warning LangRes(\"@1decision_type_invalid\", $Lang)\n        }\n\n        $subject_map = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).Row()\n        if !$subject_map {\n            warning LangRes(\"@1voting_subject_not_found\", $Lang)\n        }\n    }\n\n    action {\n        var flags, subject map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        if $type_decision > 2 && $type_decision <= 5 {\n            subject = safeJsonToMap($subject_map[\"subject\"])\n        }\n\n        var fullData string\n\n        if $type_decision == 1 || $type_decision == 2 {\n            var optional map\n            optional = safeJsonToMap($voting_map[\"optional\"])\n\n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\n                fullData = 1\n            }\n        }\n\n        if $type_decision == 3 {\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\n                fullData = 1\n            }\n        }\n\n        if $type_decision == 4 {\n            if $voting_map[\"voting.type\"] == 1{ // personal\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n            if $voting_map[\"voting.type\"] == 2 { // system\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n        }\n\n        if $type_decision == 5 {\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\n                fullData = 1\n            }\n        }\n\n        if fullData == 1 {\n            DBUpdate(\"@1votings\", $votingID, {\"flags->full_data\":fullData})\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNotificationSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNotificationSend {\n    data {\n        votingID int\n        Lang string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 {\n            res = JSONToMap(m)\n        }\n        return res\n    }\n    \n    conditions {\n        var bt string\n        bt = BlockTime()\n        $voting = DBFind(\"@1votings\").Columns(\"id,date_ended\").Where({ecosystem:$ecosystem_id, id:$votingID, date_ended:[{\"$gt\":bt}]}).One(\"id\")\n        if !$voting {\n            warning LangRes(\"@1voting_expired_can_not_notify\", $Lang)\n        }\n\n        $voting = DBFind(\"@1votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where({ecosystem:$ecosystem_id, id:$votingID, date_started:[{\"$gt\":bt}]}).Row()\n        if !$voting {\n            warning LangRes(\"@1voting_not_started\", $Lang)\n        }\n        if $voting[\"creator.member_id\"] != $key_id {\n            warning LangRes(\"@1voting_not_creator\", $Lang)\n        }\n        if $voting[\"flags.notifics\"] == 1 {\n            warning LangRes(\"@1notifications_sent_already\", $Lang)\n        }\n\n        $voting_name = $voting[\"voting.name\"]\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, decision:0})\n        var i int\n        while i < Len(participants) {\n            var participant member params map\n            participant = participants[i]\n            member = safeJsonToMap(participant[\"member\"])\n            params[\"voting_id\"] = $votingID\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", LangRes(\"@1voting\", $Lang), $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\n\n            i = i + 1\n        }\n\n        DBUpdate(\"@1votings\", $votingID, {\"flags->notifics\":1})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingStatusUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingStatusUpdate {\n    data {\n        Lang string \"optional\"\n    }\n    \n    func notificationSend(voting map) {\n        var title string id i lenVoters int voters array\n        var buffer_id int\n        buffer_id = Int(voting[\"id\"])\n        $type_p = DBFind(\"@1votings\").Columns(\"id,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: buffer_id}).Row()\n        if($type_p[\"voting.type_participants\"] == 5){\n            title = voting[\"voting.name\"]\n            id = Int(voting[\"id\"])\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:id, decision:0})\n            lenVoters = Len(voters)\n            while i < lenVoters {\n                var voter roleId params map\n                voter = voters[i]\n                roleId = Int(voter[\"member.role_id\"])\n                params[\"voting_id\"] = id\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type\", roleId, 1, \"fa-check\", LangRes(\"@1voting\", $Lang), title, \"@1voting_view\", params,1)\n                i = i + 1\n            }\n\n        } else {\n            title = voting[\"voting.name\"]\n            id = Int(voting[\"id\"])\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->member_id\").Where({ecosystem:$ecosystem_id, voting_id:id, decision:0})\n            lenVoters = Len(voters)\n            while i < lenVoters {\n                var voter memberId params map\n                voter = voters[i]\n                memberId = Int(voter[\"member.member_id\"])\n                params[\"voting_id\"] = id\n                @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", memberId, 1, \"fa-check\", LangRes(\"@1voting\", $Lang), title, \"@1voting_view\", params)\n                i = i + 1\n            }\n        }\n    }\n    \n    func changeVotings(from, to map) {\n        var votings array i lenVotings int v map\n        from[\"deleted\"] = 0\n        votings = DBFind(\"@1votings\").Columns(\"id,date_started,date_ended,voting->name\").Where(from)\n\n        lenVotings = Len(votings)\n        while i < lenVotings{\n            v = votings[i]\n            if to[\"status\"] == $STARTED{\n                notificationSend(v)\n                to[\"flags->notifics\"] = 1\n            }\n            DBUpdate(\"@1votings\", Int(v[\"id\"]), to)\n            i = i + 1\n        }\n    }\n\n    conditions {\n        MainCondition()\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n    }\n    \n    action {\n        var bt string\n        bt = BlockTime()\n        changeVotings({status:$WAITING, \"flags->full_data\":0}, {status:$INVALID})\n        changeVotings({status:$INVALID, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\n        changeVotings({status:$WAITING, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\n        changeVotings({status:$VALID, date_started:{\"$lte\":bt}}, {status:$STARTED})\n        changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}}, {status:$FINISHED})\n        //changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}, \"flags->decision\":1}, {status:$FINISHED})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCandidates",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCandidates {\n    data {\n        votingID int\n        memberID int\n        Lang string \"optional\"\n    }\n    \n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status\").Row()\n        if $voting[\"status\"] == $STARTED {\n            warning LangRes(\"@1voting_started_can_not_add_candidates\", $Lang)\n        }\n        if $voting[\"status\"] == $FINISHED {\n            warning LangRes(\"@1voting_finished_can_not_add_candidates\", $Lang)\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning LangRes(\"@1system_voting_can_not_edit\", $Lang)\n        }\n\n        if $memberID == 0 {\n            $memberID = $key_id\n        }\n\n        if DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"subject->member_id\":$memberID}).One(\"id\") {\n            warning LangRes(\"@1candidate_added_before\", $Lang)\n        }\n\n        $member = getMemberInfo($memberID)\n        if !$member {\n            warning Sprintf(LangRes(\"@1key_not_found\", $Lang) + \" (%v)\", $memberID)\n        }\n    }\n\n    action {\n        DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:$member})\n        var m map\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\n        DBUpdate(\"@1votings\", $votingID, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectSettings",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectSettings {\n    data {\n        votingID int\n\n        roleID int\n        vacancies int\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        if $vacancies < 1 {\n            warning LangRes(\"@1vacancies_number_less_one found\", $Lang)\n        }\n\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"optional,voting->type,flags->full_data\").Row()\n\n        if !$voting {\n            warning LangRes(\"@1voting_started_can_not_edit\", $Lang)\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning LangRes(\"@1system_voting_can_not_edit\", $Lang)\n        }\n        var role map\n        role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$roleID, deleted:0}).Row()\n        if !role {\n            warning LangRes(\"@1specified_role_not_found\", $Lang)\n        }\n\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\n            warning LangRes(\"@1role_not_elective_or_removed\", $Lang)\n        }\n    }\n\n    action {\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\n        optional[\"role_id\"] = $roleID\n        optional[\"role_vacancies\"] = $vacancies\n\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\n\n        @1VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectContract {\n    data {\n        votingID int\n\n        contract_accept string\n        contract_accept_params string \"optional\"\n\n        contract_reject string\n        contract_reject_params string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_started_can_not_edit\", $Lang)\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning LangRes(\"@1system_voting_can_not_edit\", $Lang)\n        }\n    }\n\n    action {\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var subject map\n        subject[\"contract_accept\"] = $contract_accept\n        subject[\"contract_accept_params\"] = accept_params\n        subject[\"contract_reject\"] = $contract_reject\n        subject[\"contract_reject_params\"] = reject_params\n\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\n        if $subject_id {\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\n        } else {\n            DBInsert(\"@1votings_subject\", {ecosystem:$ecosystem_id, voting_id:$votingID, subject:subject})\n        }\n\n        @1VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectDocument",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectDocument {\n    data {\n        votingID int\n        text_document string\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n        Lang string \"optional\"\n    }\n\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_started_can_not_edit\", $Lang)\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning LangRes(\"@1system_voting_can_not_edit\", $Lang)\n        }\n    }\n\n    action {\n        var subject map\n        subject[\"text\"] = $text_document\n        subject[\"hash\"] = Sha256($text_document)\n\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\n        if $subject_id {\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\n        } else {\n            DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:subject})\n        }\n        var accept_params reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\n\n        @1VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectFormal",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectFormal {\n    data {\n        votingID int\n\n        description string \"optional\"\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n        Lang string \"optional\"\n    }\n\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_started_can_not_edit\", $Lang)\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning LangRes(\"@1system_voting_can_not_edit\", $Lang)\n        }\n    }\n\n    action {\n        var subject map\n        subject = {description:$description, table:$table_to_written, table_id:$row_id, column:$column_name, column_value:$written_value}\n\n        $subject_id = DBFind(\"@1votings_subject\").Where({ecosystem:$ecosystem_id, voting_id:$votingID}).One(\"id\")\n        if $subject_id {\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\n        } else {\n            DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:subject})\n        }\n\n        var accept_params reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\n\n        @1VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateRun",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplateRun {\n    data {\n        TemplateId int\n        Duration int\n\n        KeyId int \"optional\"\n        TableWritten string \"optional\"\n        RowId string \"optional\"\n        ColumnName string \"optional\"\n        NewValue string \"optional\"\n        TextDocument string \"optional\"\n        Lang string \"optional\"\n    }\n    \n    func checkInput(value, name string) {\n        if Size(value) == 0 || value == \"NULL\" {\n            warning Sprintf(LangRes(\"@1x_not_found\", $Lang), name)\n        }\n    }\n    \n    func emptyOrValue(value string) string {\n        if value == \"NULL\" {\n            value = \"\"\n        }\n        return value\n    }\n\n    conditions {\n        $template = DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:$TemplateId}).Row()\n        if !$template{\n            warning LangRes(\"@1voting_template_not_found\", $Lang)\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$KeyId}).Row()\n            if !$keyFind{\n                warning LangRes(\"@1key_not_found\", $Lang)\n            }\n        }\n        if $Duration <= 0{\n            $Duration = 3\n        }\n\n        $voters = $template[\"voters\"]\n        $candidates = $template[\"candidates\"]\n        $votingName = Sprintf(\"%v [\" + LangRes(\"@1template_id\", $Lang) + \": %v]\", $template[\"title\"], $TemplateId)\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $type_voting = Int($template[\"type_voting\"])\n        $participants = Int($template[\"type_participants\"])\n        $decision = Int($template[\"type_decision\"])\n        $vacancies = Int($template[\"vacancies\"])\n        $countTypeVoters = Int($template[\"count_type_voters\"])\n\n        $desc = Sprintf(LangRes(\"@1template\", $Lang) + \" #%v\", $TemplateId)\n        if $type_voting < 1 || $type_voting > 2 {\n            warning LangRes(\"@1voting_type_invalid\", $Lang)\n        }\n        $contractAccept = emptyOrValue($template[\"contract_accept\"])\n        $acceptParams = emptyOrValue($template[\"accept_params\"])\n        $contractReject = emptyOrValue($template[\"contract_reject\"])\n        $rejectParams = emptyOrValue($template[\"reject_params\"])\n\n        if $decision == 1 || $decision == 2 {\n            // role-candidates\n            checkInput($candidates, \"Candidate role\")\n            var candidate map\n            candidate = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$candidates, deleted:0}).Row()\n            if !candidate {\n                warning Sprintf(LangRes(\"@1candidate_role_id_not_found\", $Lang), $candidates)\n            }\n            $candidateId = Int(candidate[\"id\"])\n        }\n\n        if $decision == 3 {\n            // document approval\n            checkInput($TextDocument, \"TextDocument\")\n        }\n\n        if $decision == 4 {\n            // formal decision\n            // in the system vote need only a field and a value\n            checkInput($ColumnName, \"ColumnName\")\n            checkInput($NewValue, \"NewValue\")\n            if $type_voting == 2{\n                $desc = Sprintf(LangRes(\"@1parameter\", $Lang) + \": %v, \" + LangRes(\"@1value\", $Lang) + \": %v\", $ColumnName, $NewValue)\n            }\n\n            if $type_voting == 1{\n                checkInput($TableWritten, \"TableWritten\")\n                checkInput($RowId, \"RowId\")\n                $desc = Sprintf(LangRes(\"@1table\", $Lang) + \": %v, \" + LangRes(\"@1column\", $Lang) + \": %v, \" + LangRes(\"@1id\", $Lang) + \": %v, \" + LangRes(\"@1value\", $Lang) + \": %v\", $TableWritten, $ColumnName, $RowId, $NewValue)\n            }\n            if $RowId == \"\" || $RowId == \"NULL\"{\n                $RowId = 0\n            }\n\n        }\n        // check duplicated\n        if DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, \"voting->name\":$votingName, \"flags->decision\":{\"$nin\":[\"1\", \"-1\"]}, deleted:0}).Row(){\n            error LangRes(\"@1same_voting_created\", $Lang)\n        }\n\n\n        if $participants == 3 {\n            // if the type of the participants \"in role\" - check the role\n            var role map\n            role = DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$voters, deleted:0}).Row()\n            if !role {\n                warning Sprintf(LangRes(\"@1voters_role_id_not_found\", $Lang), $voters)\n            }\n            $roleId = Int(role[\"id\"])\n        }\n    }\n\n    action {\n        var initContract string\n        initContract = $template[\"init_contract\"]\n        \n        if initContract != \"\" && initContract != \"NULL\" {\n            var initParam map\n            if $decision == 4 && $type_voting == 2 {\n                // voting for new value of sysparam\n                initParam[\"Name\"] = $ColumnName\n                initParam[\"Value\"] = $NewValue\n            } else {\n                initParam[\"KeyId\"] = $KeyId\n            }\n            CallContract(initContract, initParam)\n        }\n        \n        var votingId int\n        votingId = @1VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval,count_type_voters\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration, $countTypeVoters)\n\n        if votingId == 0 {\n            warning LangRes(\"@1voting_creation_error\", $Lang)\n        }\n        // the default argument for Contract\n        var defaultParams string\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\n\n        if Size($acceptParams) == 0{\n            $acceptParams = defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = defaultParams\n        }\n\n        if $decision == 1 || $decision == 2{\n            // 1. Role candidates with the registration of participants on request\n            // 2. Role candidates with manual registration of the participants\n            @1VotingSubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\n            @1VotingSubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        }\n        if $decision == 3 {\n            // Document approval\n            @1VotingSubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n\n        if $decision == 4 {\n            // Formal decision\n            @1VotingSubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n\n        }\n\n        if $decision == 5 {\n            // Execution of the contract\n            @1VotingSubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n        if $participants == 3 {\n            // participants: \"by role\"\n            @1VotingInvite(\"votingID,var_id\", votingId, $roleId)\n        }\n        if $participants == 1 {\n            // if the participants are \"all\", the invite has already occurred in \"@1VotingCreate\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSysparamInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSysparamInit {\n    data {\n        Name string\n        Value string\n        Lang string \"optional\"\n    }\n\n    conditions {\n        if GetContractByName($Name) == 0 {\n            warning LangRes(\"@1system_parameter_not found\", $Lang)\n        }\n    }\n    \n    action {\n        var params map\n        params[\"Value\"] = $Value\n        CallContract($Name, params)\n        // InvestorRefresh()    \n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplateCreate {\n    data {\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string \"optional\" // role of participant\n        Candidates string \"optional\" // role of candidate\n        InitContract string \"optional\" // Execute before the vote\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n        CountTypeVoters int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        if $TypeParticipants == 3 {\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\n                warning LangRes(\"@1voters_role_not_found\", $Lang)\n            }\n        }\n        if Size($Title) <3 {\n            warning LangRes(\"@1enter_title\", $Lang)\n        }\n        if $Volume <0 || $Volume > 100 {\n            warning LangRes(\"@1volume_range_wrong\", $Lang)\n        }\n        if $Quorum <0 || $Quorum > 100 {\n            warning LangRes(\"@1quorum_range_wrong\", $Lang)\n        }\n\n        if $TypeDecision == 1 || $TypeDecision == 2 {\n            if $Vacancies < 1 {\n                warning LangRes(\"@1vacancies_number_wrong\", $Lang)\n            }\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\n                warning LangRes(\"@1candidate_role_wrong\", $Lang)\n            }\n        }\n\n        if Size($InitContract) > 0{\n            if GetContractByName($InitContract) == 0 {\n                warning LangRes(\"@1init_contract_not_found\", $Lang)\n            }\n        }\n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning LangRes(\"@1accepted_contract_not_found\", $Lang)\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning LangRes(\"@1rejected_contract_not_found\", $Lang)\n            }\n        }\n    }\n\n    action {\n        var m map\n        m[\"title\"] = $Title\n        m[\"subject\"] = $Subject\n        m[\"voters\"] = $Voters\n        m[\"candidates\"] = $Candidates\n        m[\"init_contract\"] = $InitContract\n        m[\"volume\"] = $Volume\n        m[\"quorum\"] = $Quorum\n        m[\"type_voting\"] = $TypeVoting\n        m[\"type_participants\"] = $TypeParticipants\n        m[\"type_decision\"] = $TypeDecision\n        m[\"vacancies\"] = $Vacancies\n        m[\"contract_accept\"] = $ContractAccept\n        m[\"accept_params\"] = $ParamsAccept\n        m[\"contract_reject\"] = $ContractReject\n        m[\"reject_params\"] = $ParamsReject\n        m[\"ecosystem\"] = $ecosystem_id\n        m[\"count_type_voters\"] = $CountTypeVoters\n        $result = DBInsert(\"@1voting_templates\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeAdd",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNodeAdd {\n    data {\n        TcpAddress string\n        ApiAddress string\n        KeyId int\n        PubKey string\n        Duration int\n        Lang string \"optional\"\n    }\n    \n    func warn(name, detail string) {\n        warning Sprintf(LangRes(\"@1x_invalid\", $Lang) + \" (%v)\", name, detail)\n    }\n    \n    func checkApiAddress(addr string) {\n        var name string\n        name = LangRes(\"@1api_address\", $Lang)\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\n            warn(name, \"protocol\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        addr = Replace(addr, \"http://\", \"\")\n        addr = Replace(addr, \"https://\", \"\")\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n    }\n    \n    func checkTcpAddress(addr string) {\n        var name string\n        name = LangRes(\"@1tcp_address\", $Lang)\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n        }\n    }\n    \n    func checkPub(pub string) {\n        if PubToID(pub) == 0 {\n            warning LangRes(\"@1public_key_invalid\", $Lang)\n        }\n    }\n    \n    func checkKeyId(keyid int) {\n        var existed map\n        existed = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:keyid}).Row()\n        if !existed {\n            warning LangRes(\"@1key_not_found\", $Lang)\n        }\n    }\n    \n    func getNodesJSON() string {\n        var nodes string\n        nodes = SysParamString(\"full_nodes\")\n        if Size(nodes) < 100 {\n            nodes = \"[]\"\n        }\n        return nodes\n    }\n    \n    func appendFirstNode(nodes array) array {\n        var first string firstNode map\n        first = AppParam($appId,\"first_node\", 1)\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\n            warning LangRes(\"@1first_node_invalid\", $Lang)\n        }\n        firstNode = JSONDecode(first)\n        checkTcpAddress(firstNode[\"tcp_address\"])\n        checkApiAddress(firstNode[\"api_address\"])\n        checkKeyId(Int(firstNode[\"key_id\"]))\n        checkPub(firstNode[\"public_key\"])\n\n        nodes = Append(nodes, firstNode)\n        return nodes\n    }\n    \n    conditions {\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\", 1))\n        if $templateId == 0 {\n            warning LangRes(\"@1template_id_not_found\", $Lang)\n        }\n        checkKeyId($KeyId)\n        checkPub($PubKey)\n        checkApiAddress($ApiAddress)\n        checkTcpAddress($TcpAddress)\n    }\n\n    action {\n        var nodes array node map\n        node[\"tcp_address\"] = $TcpAddress\n        node[\"api_address\"] = $ApiAddress\n        node[\"key_id\"] = Str($KeyId)\n        node[\"public_key\"] = $PubKey\n        nodes = JSONDecode(getNodesJSON())\n        if Len(nodes) == 0 {\n            nodes = appendFirstNode(nodes)\n        }\n        nodes = Append(nodes, node)\n        @1VotingTemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplatesInstall",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplatesInstall {\n    data {\n        fill_ids string \"optional\"\n        Lang string \"optional\"\n    }\n\n    func applyTemplate(m map) {\n        DBInsert(\"@1voting_templates\", m)\n    }\n\n    func getAppRoleId(id int, name string) int {\n        var rid int\n        rid = Int(AppParam(id, name, $ecosystem_id))\n        if rid == 0{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", $Lang), name)\n        }\n        return rid\n    }\n\n    conditions {\n        var appId int\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning LangRes(\"@1app_not_found\", $Lang)\n        }\n        $consensusRoleId = getAppRoleId(appId, \"role_apla_consensus_asbl\")\n        $validatorRoleId = getAppRoleId(appId, \"role_validator\")\n    }\n\n    action {\n        var template map\n        // common\n        template[\"quorum\"] = 51\n        template[\"volume\"] = 70\n        template[\"accept_params\"] = \"\"\n        template[\"reject_params\"] = \"\"\n        template[\"type\"] = \"law\"\n        template[\"voters\"] = $consensusRoleId\n        template[\"type_participants\"] = 3 // by Role\n        template[\"ecosystem\"] = $ecosystem_id\n\n        // validator\n        template[\"title\"] = \"Voting for Validator\"\n        template[\"init_contract\"] = \"VotingValidatorInit\"\n        template[\"contract_accept\"] = \"VotingValidatorAccept\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 1\n        template[\"candidates\"] = $validatorRoleId\n        template[\"type_decision\"] = 2\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Validator\"\n        applyTemplate(template)\n        \n        if $fill_ids == \"yes\" {\n            @1EditAppParam(\"Id,Value\", Int(DBFind(\"@1app_params\").Where({name: \"voting_validators_template_id\",ecosystem: $ecosystem_id}).One(\"id\")), Int(DBFind(\"@1voting_templates\").Where({title: \"Voting for Validator\",ecosystem: $ecosystem_id}).One(\"id\")))\n        }\n\n        // sysparam\n        template[\"title\"] = \"Voting for System param value\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"System param\"\n        applyTemplate(template)\n        \n        if $fill_ids == \"yes\" {\n            @1EditAppParam(\"Id,Value\", Int(DBFind(\"@1app_params\").Where({name: \"voting_sysparams_template_id\",ecosystem: $ecosystem_id}).One(\"id\")), Int(DBFind(\"@1voting_templates\").Where({title: \"Voting for System param value\",ecosystem: $ecosystem_id}).One(\"id\")))\n        }\n\n        // valued ecosystem\n        template[\"title\"] = \"Voting for Valued Ecosystem\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 1\n        template[\"subject\"] = \"Valued ecosystem\"\n        applyTemplate(template)\n        \n        if $fill_ids == \"yes\" {\n            @1EditAppParam(\"Id,Value\", Int(DBFind(\"@1app_params\").Where({name: \"voting_ves_template_id\",ecosystem: $ecosystem_id}).One(\"id\")), Int(DBFind(\"@1voting_templates\").Where({title: \"Voting for Valued Ecosystem\",ecosystem: $ecosystem_id}).One(\"id\")))\n        }\n\n        // tokenrefund\n        template[\"title\"] = \"Token Refund\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"TokensRefundAccept\"\n        template[\"contract_reject\"] = \"TokensRefundReject\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 5\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Token refund\"\n        applyTemplate(template)\n        \n        if $fill_ids == \"yes\" {\n            @1EditAppParam(\"Id,Value\", Int(DBFind(\"@1app_params\").Where({name: \"voting_tokenrefund_template_id\",ecosystem: $ecosystem_id}).One(\"id\")), Int(DBFind(\"@1voting_templates\").Where({title: \"Token Refund\",ecosystem: $ecosystem_id}).One(\"id\")))\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTokensRefundCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTokensRefundCreate {\n    data {\n        VictimAccount string\n        SuspectAccount string\n        Amount money\n        Note string\n        Lang string \"optional\"\n    }\n\n    func blockAccounts(victimId, attackerId int) {\n        if victimId == 0 {\n            error LangRes(\"@1victim_key_invalid\", $Lang)\n        }\n        if attackerId == 0{\n            error LangRes(\"@1attacker_key_invalid\", $Lang)\n        }\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, blocked:1, id:victimId}).One(\"id\"){\n            DBUpdate(\"@1keys\", victimId, {blocked:1})\n        }\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, blocked:1, id:attackerId}).One(\"id\"){\n            DBUpdate(\"@1keys\", attackerId, {blocked:1})\n        }\n    }\n\n    func getKeyId(test string) int {\n        if Len(Split(test, \"-\")) > 1 {\n            // probably it is address\n            return AddressToId(test)\n        }\n        if \"invalid\" != IdToAddress(Int(test)){\n            // probably it is key_id\n            return Int(test)\n        }\n        return 0\n    }\n\n    conditions {\n        if $Amount <= 0 {\n            error LangRes(\"@1amount_invalid\", $Lang)\n        }\n        if Size($Note) == 0 {\n            error LangRes(\"@1add_description\", $Lang)\n        }\n        var victim attacker int\n        victim = getKeyId($VictimAccount)\n        attacker = getKeyId($SuspectAccount)\n        if victim == 0{\n            error LangRes(\"@1victim_address_invalid\", $Lang)\n        }\n        if attacker == 0 {\n            error LangRes(\"@1suspect_address_invalid\", $Lang)\n        }\n        $victimId = victim\n        $attackerId = attacker\n\n        var app_id template_id int\n        app_id = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\", 1))\n        if template_id <= 0 {\n            warning LangRes(\"@1template_id_not_found\", $Lang)\n        }\n\n        $template = DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:template_id}).Row()\n        $votersRoleId = Int($template[\"voters\"])\n        $votingName = $template[\"title\"]\n        $typeParticipants = Int($template[\"type_participants\"])\n        $typeDecision = Int($template[\"type_decision\"])\n        $typeVoting = Int($template[\"type_voting\"])\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $contractAccept = $template[\"contract_accept\"]\n        $contractReject = $template[\"contract_reject\"]\n\n        var roleName string\n        roleName = DBFind(\"@1roles\").Where({ecosystem:1, id:$votersRoleId}).One(\"role_name\")\n        if !RoleAccess($votersRoleId){\n            warning Sprintf(LangRes(\"@template_only_role_allowed\", $Lang), roleName)\n        }\n\n        $desc = Sprintf(\"%v (\" + LangRes(\"@1tokens_refund_victim\", $Lang) + \": %v, \" + LangRes(\"@1tokens_refund_attacker\", $Lang) + \": %v, \" + LangRes(\"@1amount\", $Lang) + \": %v)\", $votingName, $victimId, $attackerId, $Amount)\n\n        if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":$votersRoleId, deleted:0}).One(\"id\") {\n            warning Sprintf(LangRes(\"@1role_id_no_members\", $Lang), $votersRoleId)\n        }\n    }\n\n    action {\n        var initContract string\n        initContract = $template[\"init_contract\"]\n\n        if Size(initContract) > 4 { // greater then \"NULL\"\n            var m map\n            CallContract(initContract, m)\n        }\n\n        blockAccounts($victimId,$attackerId)\n        var votingId int params m map paramsJSON interval_days string\n        interval_days = \"3\"\n        votingId = @1VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\n\n        m[\"victim_key_id\"] = $victimId\n        m[\"attacker_key_id\"] = $attackerId\n        m[\"amount\"] = $Amount\n        m[\"note\"] = $Note\n        m[\"validator_key_id\"] = $key_id\n        m[\"blocked_at\"] = BlockTime()\n        m[\"voting_id\"] = votingId\n        m[\"status\"] = 1 // 0. Accounts blocked, 1. Discussion, 2. Vote, 3. Closed\n        m[\"result\"] = 0 // 0. Discussion and voting, 1. Cancelled, 2. Tokens returned\n        params[\"Id\"] = DBInsert(\"tokenrefund\", m) //no $ecosystem_id\n\n        paramsJSON = JSONEncode(params)\n        @1VotingSubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\n\n        @1VotingInvite(\"votingID,var_id\", votingId, $votersRoleId)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionReject {\n    data {\n        votingID int\n        Lang string \"optional\"\n        RoleId int\n    }\n    \n    func closeNotification() {\n        var role_id_search int\n        role_id_search = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->role_id\":$RoleId, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n        if role_id_search > 0 {\n            @1NotificationsClose(\"notific_id\", role_id_search)\n        } else {\n            var id int\n            id = Int(DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\n            if id > 0 {\n                @1NotificationsClose(\"notific_id\", id)\n            }\n        }\n    }\n    \n    conditions {\n        $WAITING = 1\n        $VALID = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $INVALID = 5\n        $voting = DBFind(\"@1votings\").Where({ecosystem:$ecosystem_id, id: $votingID}).Columns(\"voting->type_participants,voting->role_id,flags->decision,flags->notifics,status\").Row()\n        if !$voting {\n            warning LangRes(\"@1voting_not_found\", $Lang)\n        }\n        if $voting[\"voting.type_participants\"] == 3{\n            if $voting[\"voting.role_id\"] != $RoleId{\n                warning LangRes(\"@1voting_role_incorrect\", $Lang)\n            }\n        }\n        if $voting[\"status\"] == $FINISHED {\n            warning LangRes(\"@1voting_expired_can_not_vote\", $Lang)\n        }\n        if $voting[\"status\"] != $STARTED {\n            warning LangRes(\"@1voting_not_started\", $Lang)\n        }\n        $participant_role_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId,\"member->member_id\":0}).One(\"id\")\n\n        $check_type = DBFind(\"@1votings\").Columns(\"id,voting,voting->type_participants\").Where({ecosystem:$ecosystem_id, id: $votingID}).Row()\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\n            $participant_id = DBFind(\"@1votings_participants\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\n            if !$participant_id {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n    }\n\n    action {\n        if $participant_role_id {\n            $rid = DBFind(\"@1votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({ecosystem:$ecosystem_id, voting_id:$votingID, \"member->role_id\":$RoleId}).Row()\n            if $rid {\n                var mem_role int\n                mem_role = Int($rid[\"member.role_id\"])\n                $participant_id = DBFind(\"@1roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({ecosystem:$ecosystem_id, \"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\n                if !$participant_id{\n                    warning LangRes(\"@1voting_not_participant\", $Lang)\n                } else {\n                    var solo_role_vot map\n                    $membership_role_name = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id: $key_id}).Row()\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\n                    solo_role_vot[\"member_id\"] = $key_id\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\n                    var json string\n                    json = JSONEncode(solo_role_vot)\n                    DBUpdate(\"@1votings_participants\",Int($rid[\"id\"]),{\"member\":json})\n                    $participant_id = Int($rid[\"id\"])\n                }\n            } else {\n                warning LangRes(\"@1voting_not_participant\", $Lang)\n            }\n        }\n        \n        if $voting[\"flags.notifics\"] == 1 {\n            closeNotification()\n        }\n        if $voting[\"flags.decision\"] != 1 {\n            var bt string\n            bt = BlockTime()\n\n            DBUpdate(\"@1votings_participants\", Int($participant_id), {decision_date:bt, decision:\"-1\"})\n            @1VotingUpdate(\"votingID\", $votingID)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorAccept {\n    data {\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n        Lang string \"optional\"\n    }\n    \n    func getAppRoleId(id int, name string, warn bool) int {\n        var rid int\n        rid = Int(AppParam(id, name, 1))\n        if rid == 0 && warn{\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", $Lang), name)\n        }\n        return rid\n    }\n    \n    func conditions {\n        var prev string\n        prev = $stack[0]\n        if Len($stack) > 2{\n            prev = $stack[Len($stack) - 2]\n        }\n        if prev != \"@1VotingDecisionCheck\"{\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", $Lang)\n        }\n\n        var appId templateId int params map\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).Columns(\"name,id\").One(\"id\"))\n        templateId = Int(AppParam(appId,\"voting_validators_template_id\", 1))\n        if !DBFind(\"@1voting_templates\").Where({ecosystem:$ecosystem_id, id:templateId}).One(\"id\"){\n            warning LangRes(\"@1voting_template_not_found\", $Lang)\n        }\n        if $VotingTemplateId != templateId{\n            warning LangRes(\"@1template_incorrect\", $Lang)\n        }\n\n        var candidateId oldRoleId roleId int roleName string\n        oldRoleId = getAppRoleId(appId, \"role_candidate_for_validators\", false)\n        roleId = getAppRoleId(appId, \"role_validator\", true)\n\n        candidateId = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId}).One(\"candidate_key_id\") //no $ecosystem_id\n        if !candidateId {\n            warning LangRes(\"@1candidate_key_not_found\", $Lang)\n        }\n        $oldRoleRowId = Int(DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, deleted:0, \"role->id\":oldRoleId, \"member->member_id\":candidateId}).One(\"id\"))\n\n        $roleId = Int(DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:roleId, deleted:0}).One(\"id\"))\n        if $roleId == 0 {\n            warning LangRes(\"@1validator_role_not_found\", $Lang)\n        }\n    }\n\n    func action {\n        if $oldRoleRowId > 0 {\n            @1RolesUnassign(\"row_id\", $oldRoleRowId)\n        }\n        @1RolesAssign(\"rid,member_id\", $roleId, Int($KeyId))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorInit {\n    data {\n        KeyId int\n        Lang string \"optional\"\n    }\n\n    conditions {\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId, deleted:0}).Row() //no $ecosystem_id\n        if !$candidate{\n            warning LangRes(\"@1candidate_not_found\", $Lang)\n        }\n    }\n    \n    action {\n        @1DelegateRefresh()\n    }\n}",
            "Type": "contracts"
        }
    ]
}