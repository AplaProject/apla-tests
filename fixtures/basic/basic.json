{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(GetVar(per_page)){}.Else{\r\n    SetVar(per_page,25)\r\n}\r\n\r\nIf(And(GetVar(this_page),GetVar(table))){\r\n    If(GetVar(Where)){\r\n        DBFind(#table#).Where(#Where#).Count(table_count)\r\n    }.Else{\r\n        DBFind(#table#).Count(table_count)\r\n    }\r\n    If(#table_count#>#per_page#){\r\n        If(#paginator_page#>0){\r\n            SetVar(prev_paginator_page,Calculate(#paginator_page#-1)\r\n        }.Else{\r\n            SetVar(paginator_page,0).(prev_paginator_page,0)\r\n        }\r\n        SetVar(paginator_offset,Calculate(#paginator_page#*#per_page#)).(last_paginator_page,Calculate(#table_count#/#per_page#)).(next_paginator_page,#last_paginator_page#)\r\n        If(#table_count#>Calculate(#paginator_offset#+#per_page#)){\r\n            SetVar(next_paginator_page,Calculate(#paginator_page#+1)\r\n        }\r\n        Div(button-group){\r\n            If(#paginator_page#>0){\r\n                Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=0\")\r\n            }.Else{\r\n                Button(Body:\"1\", Class:btn btn-default disabled)\r\n            }\r\n            If(#paginator_page#>1){\r\n                Button(Body:Calculate(#prev_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#prev_paginator_page#\")\r\n            }\r\n            If(And(#paginator_page#>0,#paginator_page#<#last_paginator_page#)){\r\n                Button(Body:Calculate(#paginator_page#+1), Class:btn btn-default disabled)\r\n            }\r\n            If(#next_paginator_page#<#last_paginator_page#){\r\n                Button(Body:Calculate(#next_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#next_paginator_page#\")\r\n            }\r\n            If(#paginator_page#<#last_paginator_page#){\r\n                Button(Body:Calculate(#last_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#last_paginator_page#\")\r\n            }.ElseIf(#last_paginator_page#>0){\r\n                Button(Body:Calculate(#last_paginator_page#+1), Class:btn btn-default disabled)\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "basic_paginator",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($role_notifics$)\r\nIf(And(#role_id#==1,#ecosystem_id#==1)){\r\n    DBFind(ecosystems).Ecosystem(1).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $broadcast_send$, Page: notifications_broadcast, Icon: icon-plus)\r\n    }\r\n}\r\nAddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\r\nIf(GetVar(Search)){\r\n    SetVar(Where,{\"notification->type\":2, \"recipient->role_name\":{\"$like\": #Search#}, \"recipient->role_id\":#role_id#})\r\n}.Else{\r\n    SetVar(Where, {\"notification->type\":2, \"recipient->role_id\":#role_id#}).(Search,)\r\n}\r\n\r\nDBFind(notifications,src_notifications).Where(#Where#).Order([{closed: \"1\"},{id: \"-1\"}]).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n    If(#closed# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_recipient){\r\n    LinkPage(Class: #style_link# t5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #recipient.role_name#\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n    }\r\n}.Custom(_icon){\r\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(_page){\r\n    LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n        #page_name#\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n}.Custom(_processing){\r\n    Div(Class: #style_text# t6){\r\n        If(#date_start_processing# == NULL){\r\n            $not_started$\r\n        }.Else{\r\n            Span(LangRes(started), mr-sm) #processing_info.member_name# \r\n            Span(LangRes(at), mr-sm)\r\n            DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#){\r\n            If(#date_start_processing# == NULL){\r\n                LangRes(active)\r\n            }.Else{\r\n                LangRes(processing)\r\n            }\r\n        }\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(closed))\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Button(Class: btn btn-default fa fa-play, Contract: NotificationsProcess, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }.Else{\r\n                Button(Class: btn btn-default fa fa-trash, Contract: NotificationsClose, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nForm(panel panel-primary){\r\n    Div(panel-body){\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Div(input-group){\r\n                    Div(input-group-addon){\r\n                        LangRes(recipient)\r\n                    }\r\n                    Input(Name: Search, Value: #Search#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search),type=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Table(Source: src_notifications, Columns: \"$id$=_id,$icon$=_icon,$recipient$=_recipient,$page_name$=_page,$sender$=_sender,$processing$=_processing,$sent$/$сlosed$=_date,$status$=_status,=_actions\")\r\n            }\r\n        }\r\n        If(GetVar(Search)){\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    Div(text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list, PageParams: \"type=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetTitle($single_notifics$)\r\nIf(And(#role_id#==1,#ecosystem_id#==1)){\r\n    DBFind(ecosystems).Ecosystem(1).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $broadcast_send$, Page: notifications_broadcast, Icon: icon-plus)\r\n    }\r\n}\r\nAddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\r\nIf(GetVar(Search)){\r\n    SetVar(Where,{\"notification->type\":1, \"recipient->member_name\":#Search#, \"recipient->member_id\":#key_id#})\r\n}.Else{\r\n    SetVar(Where,{\"notification->type\":1, \"recipient->member_id\":#key_id#}).(Search,)\r\n}\r\n\r\nDBFind(notifications,src_notifications).Where(#Where#).Order([{closed:\"1\"}, {id:\"-1\"}]).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n    If(#closed# == 0){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n    }.Else{\r\n        SetVar(Name: style_text, Value: \"text-muted\")\r\n        SetVar(Name: style_link, Value: \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(custom_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#recipient.member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\r\n            Span(Body: #sender.member_name#)\r\n        }\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n            Span(Body: #sender.role_name#)\r\n        }\r\n    }\r\n}.Custom(custom_icon){\r\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(custom_page){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n        Span(Body: #page_name#)\r\n    }\r\n}.Custom(custom_date){\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(custom_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#, Body: LangRes(active))\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(сlosed))\r\n    }\r\n}.Custom(actions){\r\n    Div(pull-right){\r\n        If(#closed# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: NotificationsClose, Params: \"notific_id=#id#\", Page: notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        }\r\n    }\r\n}\r\n\r\nForm(panel panel-primary){\r\n    Div(panel-body){\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Div(input-group){\r\n                    Div(input-group-addon){\r\n                        LangRes(recipient)\r\n                    }\r\n                    Input(Name: Search, Value: #Search#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search)\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-12){\r\n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\r\n            }\r\n        }\r\n        If(GetVar(Search)){\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    Div(text-center){\r\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Wallet, Page:profile_view, Icon:\"icon-wallet\")\r\nMenuItem(Title:Notifications, Page:notifications_list, Icon:\"icon-flag\")\r\nMenuItem(Title:Membership, Page:members_list, Icon:\"fa icon-people\")\r\nMenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\r\n\tMenuItem(Title:Roles, Page:roles_list, Icon:\"fa fa-list-ul\")\r\n\tMenuItem(Title:Voting, Page:voting_list, Icon:\"fa fa-edit\")\r\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "votings",
            "Columns": "[\r\n    {\r\n        \"name\": \"flags\",\r\n        \"type\": \"json\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting\",\r\n        \"type\": \"json\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"creator\",\r\n        \"type\": \"json\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"optional\",\r\n        \"type\": \"json\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"progress\",\r\n        \"type\": \"json\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"date_ended\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"date_started\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"ContractAccess(\\\"VotingCreate\\\", \\\"VotingStatusUpdate\\\", \\\"VotingUpdate\\\")\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"VotingInvite\\\")\", \"update\": \"ContractAccess(\\\"VotingDecisionReject\\\",\\\"VotingDecisionAccept\\\",\\\"VotingCandidateAccept\\\")\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[{\"name\":\"subject\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Name": "notification_closure",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Name": "notification_icon",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Name": "notification_sender",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Name": "notification_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role",
            "Name": "roles_types",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role",
            "Name": "roles_types_selection",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "type_voting_custom,type_voting_system",
            "Name": "type_voting",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "candidate_requests,candidate_manual,document,database_write,contract_run",
            "Name": "type_voting_decisions",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "everybody,manual_add,role",
            "Name": "type_voting_participants",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "waiting,valid,started,finished,invalid",
            "Name": "voting_statuses",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "text-warning,text-success,text-success,text-muted,text-danger",
            "Name": "voting_statuses_classes",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#ecosystem_id#==1){\r\n\tSetTitle(\"\")\r\n}.Else{\r\n\tDiv(content-wrapper){\r\n\t\tDiv(panel panel-primary){\r\n\t\t\tDiv(list-group-item text-center){\r\n\t\t\t\tP(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\r\n\t\t\t}\r\n\t\t\tDiv(list-group-item){\r\n\t\t\t\tSpan(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem – creating and editing applications, modifying ecosystem parameters, etc. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"To get started, you can download the finished applications from the\")\r\n\t\t\t\tSpan(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\r\n\t\t\t\tSpan(Class: h3, Body: \"and install them using the Import service. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\r\n\t\t\t\tSpan(Class: h3, Body: \"Documentation \")\r\n\t\t\t\tSpan(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer text-right clearfix){\r\n\t\t\t\tDiv(pull-left){\r\n\t\t\t\t\tButton(Body: Ecosystem parameters, Class: btn btn-default, Page: params_list)\r\n\t\t\t\t}.Style(margin-right: 20px;)\r\n\t\t\t\tDiv(pull-left){\r\n\t\t\t\t\tButton(Body: Dashboard, Class: btn btn-default, Page: admin_dashboard)          \r\n\t\t\t\t}\r\n\t\t\t\tButton(Body: Import, Class: btn btn-primary, Page: import_upload)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
            "Name": "default_page",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($membership$)\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,{id:#Search#})\r\n    }.Else{\r\n        SetVar(Where,{id:{\"$neq\":0}}).(Search,)\r\n    } \r\n    \r\n    DBFind(keys,src_member).Columns(\"id\").Custom(custom_id){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n        Span(Class: h5, Body: #id#)\r\n        SetVar(m_id, 0)\r\n        DBFind(members).WhereId(#id#).Vars(m)\r\n        If(Or(#m_id#>0,#m_id#<0)){\r\n            SetVar(image_id, #m_image_id#)\r\n            SetVar(member_name, #m_member_name#)\r\n        }.Else{\r\n            SetVar(image_id, 0)\r\n            SetVar(member_name, \"\")\r\n        }\r\n    }.Custom(custom_member_id){\r\n        Button(Body: Address(#id#), Class: btn btn-link, Page: tokens_transfer, PageParams: \"v_id=#id#\").Popup(Header: $tokens_transfer$, Width: \"30\")\r\n    }.Custom(custom_username){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#id#\"){\r\n            If(#image_id#>0){\r\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Where(#Where#).Order(\"id\")\r\n    \r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(id)\r\n                        }\r\n                        Input(Name: Search, Type:number, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: members_list, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_member, Columns: \"$name$=custom_username,$id$=custom_id,$wallet_address$=custom_member_id\")\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: members_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "members_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\nSetTitle($notifications_broadcast$)\r\nDBFind(ecosystems).Ecosystem(1).Count(ecos_count)\r\nSetVar(left_col,\"col-sm-3 mt text-right\").(right_col,\"col-sm-9\")\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($notifications$, notifications_list)\r\n        Span(/,mh)\r\n        Span($broadcast_send$,text-muted)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-6 col-sm-offset-3){\r\n            If(And(#role_id#==1,#ecosystem_id#==1,#ecos_count#>1)){\r\n                DBFind(roles,src_roles).Ecosystem(2).Where({role_type:3}).Columns(\"id,role_name\")\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(row mt){\r\n                            Div(#left_col#){\r\n                                LangRes(header)\r\n                            }\r\n                            Div(#right_col#){\r\n                                Input(Name: Header, Type: textarea)\r\n                            }\r\n                        }\r\n                        Div(row mt){\r\n                            Div(#left_col#){\r\n                                LangRes(body_text)\r\n                            }\r\n                            Div(#right_col#){\r\n                                Input(Name: Body, Type: textarea)\r\n                            }\r\n                        }\r\n                        Div(row mt){\r\n                            Div(#left_col#){\r\n                                LangRes(recipient)\r\n                            }\r\n                            Div(#right_col#){\r\n                                Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_list)\r\n                        Button(Body: LangRes(send), Class: btn btn-primary pull-right, Contract: @1NotificationsBroadcast, Params: \"notific_id=#notific_id#\", Page: notifications_list)\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(col-sm-12 alert alert-warning text-center){\r\n                    If(#role_id#!=1){\r\n                        LangRes(only_admin_action)\r\n                    }\r\n                    If(#ecosystem_id#!=1){\r\n                        LangRes(only_first_ecosystem_action)\r\n                    }\r\n                    If(#ecos_count#==1){\r\n                        LangRes(other_ecosystems_not_found)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_broadcast",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(Or(#type#==0,#type#==1)){\r\n    }.Else{\r\n        SetVar(Name: type, Value: 0)\r\n    }\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(btn-group){\r\n                If(#type#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: notifications_list, PageParams: \"type=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#type#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: notifications_list, PageParams: \"type=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(btn-group){\r\n                If(#type#==0){\r\n                    Include(notifications_single)\r\n                }\r\n                If(#type#==1){\r\n                    Include(notifications_roles)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Name": "notifications_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\n\r\n    SetTitle($role_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage(Body: $role_notifics$, Page: notifications_list, PageParams: \"type=1\")\r\n        Span(/, mh)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(role_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                DBFind(Name: roles, Source: source_roles).Where({deleted:0}).Columns(\"id,role_name\")\r\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(closure_type))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#application_id#, Name: notification_closure, Source: src_closure_type)\r\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                AppParam(App:#application_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#application_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_list, PageParams: \"type=1\")\r\n                    Button(Body: LangRes(send), Class: btn btn-primary pull-right, Page: notifications_list, PageParams: \"type=1\", Contract: NotificationsSend)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_roles_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\nSetTitle($notifications_view$)\r\n\r\nSetVar(type,0).(header,).(body,)\r\nDiv(content-wrapper){\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(notifications).WhereId(#notific_id#).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\r\n        SetVar(type,#note_sender_type#)\r\n        SetVar(header,#note_notification_header#)\r\n        SetVar(body,#note_notification_body#)\r\n\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading text-center){\r\n                        #header#\r\n                    }\r\n                    Div(panel-body){\r\n                        #body#\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#type# == 1){\r\n                            If(#note_closed# == 0){\r\n                                Button(Body: LangRes(understand), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                            }\r\n                        }.ElseIf(#type# == 2){\r\n                            If(#note_closed#==0){\r\n                                If(#note_date_start_processing#==\"\"){\r\n                                    Button(Body: LangRes(understand), Class: btn btn-primary, Contract: NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: notifications_show)\r\n                                }.Else{\r\n                                    Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            LangRes(attention)\r\n        }\r\n    }\r\n}",
            "Name": "notifications_show",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\n\r\n    SetTitle($single_notifics$)\r\n    Div(breadcrumb){\r\n        LinkPage($single_notifics$, notifications_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $send$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(single_notifics)}\r\n                Div(panel-body){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                DBFind(keys,src_keys).Columns(\"id\").Custom(_name){\r\n                                    DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\r\n                                    Address(#id#)\r\n                                    If(Or(#m_id#>0,#m_id#<0)){\r\n                                        \" (#m_member_name#)\"\r\n                                    }\r\n                                }\r\n                                Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                AppParam(App:#application_id#, Name: notification_sender, Source: src_sender)\r\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                AppParam(App:#application_id#, Name: notification_icon, Source: src_icon)\r\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(body_text))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: text_body, Value: \"Body text\")\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: page_name, Value: \"notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: notifications_list)\r\n                    Button(Body: LangRes(send), Class: btn btn-primary pull-right, Page: notifications_list, Contract: NotificationsSend)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_single_send",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\n    SetTitle($test_page$)\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(notifications,src_notifications).WhereId(#notific_id#).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n        SetVar(notific_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n        SetVar(notific_id,\"0\").(notific_type,\"0\").(notific_header,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Span(Class: h3, Body: #notific_header#)\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(id))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_id#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(type))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                If(#notific_type# > 0){\r\n                                    Span(Class: h4, Body: AppParam(App:#application_id#, Name: notification_type, Index: #notific_type#))\r\n                                }.Else{\r\n                                    Span(Class: h4, Body: #notific_type#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_number))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_int#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 mt-sm text-right){\r\n                                Span(Class: h4, Body: LangRes(value_string))\r\n                            }\r\n                            Div(col-md-6 mt-sm text-left){\r\n                                Span(Class: h4, Body: #notific_val_str#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 1){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                        }\r\n                    }\r\n                }\r\n                If(#notific_type# == 2){\r\n                    If(#prefix_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            If(#prefix_date_start_processing# == \"\"){\r\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "notifications_testpage",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($avatar$)\r\n        Input(Name: member_image, Type: file)\r\n    }\r\n    Div(form-group){\r\n        Button(Body: LangRes(save), Class: btn btn-primary pull-right, Contract: ProfileAvatarEdit, Page: profile_edit, PageParams:\"v_member_id=#v_member_id#\")\r\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: profile_edit, PageParams:\"v_member_id=#v_member_id#\")\r\n    }\r\n}",
            "Name": "profile_avatar_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($editing_profile$)\r\n    Div(breadcrumb){\r\n        LinkPage($user_info$, profile_view)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $editing_profile$)\r\n    }\r\n    \r\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\r\n        DBFind(members,src_member).WhereId(#v_member_id#).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\r\n    }.Else{\r\n        DBFind(members,src_member).WhereId(#key_id#).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(editing_profile))\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-5 mt-lg text-center){\r\n                            Button(Class: btn btn-link, Page: profile_avatar_edit, PageParams: \"v_member_id=#key_id#\"){\r\n                                If(#prefix_image_id#>0){\r\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\r\n                                }\r\n                            }.Popup(Header: $editing_profile$, Width: 30)\r\n                        }\r\n                        Div(col-md-7 mc-sm text-left){\r\n                            Div(form-group){\r\n                                Label(){\r\n                                    Span(Body: LangRes(member_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\r\n                                }.Else{\r\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\r\n                                    InputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                If(GetVar(prefix_member_info_information)){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\r\n                                }.Else{\r\n                                    Label(){\r\n                                        Span(Body: LangRes(information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: profile_view, PageParams: \"v_member_id=#v_member_id#\")\r\n                    Button(Body: LangRes(save), Class: btn btn-primary pull-right, Page: profile_view, PageParams: \"v_member_id=#v_member_id#\", Contract: ProfileEdit).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_edit",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\r\n    }.Else{\r\n        SetVar(v_member_id,#key_id#)\r\n    }\r\n    DBFind(members,src_member).WhereId(#v_member_id#).Columns(\"id,image_id,member_name,member_info->information\").Vars(prefix)\r\n    DBFind(keys,src_keys).WhereId(#v_member_id#).Vars(tokens)\r\n\r\n    If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n    }.Else{\r\n        SetVar(prefix_member_name,)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(user_info)\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    If(#prefix_id# == #key_id#){\r\n                                        Button(Class: btn btn-link, Page: profile_edit, PageParams: \"v_member_id=#key_id#\"){\r\n                                            If(#prefix_image_id#>0){\r\n                                                Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                            }.Else{\r\n                                                Span(Class: fa icon-user fa-5x text-primary)\r\n                                            }\r\n                                            Div(m0 h4 text-bold){\r\n                                                #prefix_member_name#\r\n                                                If(#role_id# > 0){\r\n                                                    DBFind(roles).WhereId(#role_id#).Columns(\"role_name\").Vars(role)\r\n                                                    Span(Body: \" (#role_role_name#)\")\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }.Else{\r\n                                        If(#prefix_image_id#>0){\r\n                                            Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-5x)\r\n                                        }\r\n                                        Div(m0 h4 text-bold){#prefix_member_name#}\r\n                                    }\r\n                                    Div(Class: h5 text-muted m0, Body: #prefix_member_info_information#)\r\n                                }.Else{\r\n                                    Div(text-muted m0 h5, Body: LangRes(wallet_address))\r\n                                    Div(Class: h5, Body: Address(#key_id#))\r\n                                    Button(Class: btn btn-link, Page: profile_edit){\r\n                                        Div(Class: h5 m0, Body: LangRes(editing_profile))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center mb){\r\n                        Div(text-muted m0 h5, Body: LangRes(roles))\r\n                        DBFind(roles_participants,src_check).Where({\"member->member_id\":#v_member_id#, deleted:0}).Columns(\"id\").Vars(check)\r\n                        If(#check_id#>0){\r\n                            DBFind(roles_participants,src_roles).Where({\"member->member_id\":#v_member_id#, deleted:0}).Columns(\"role->id,role->name\").Order(\"id\")\r\n                            ForList(src_roles){\r\n                                Span(){\r\n                                    LinkPage(Page: roles_view, PageParams: \"v_role_id=#role.id#\"){\r\n                                        Span(Class: h5, Body: \"#role.name#\")\r\n                                    }\r\n                                }.Style(margin-right: 6px; margin-left: 6px;)\r\n                            }\r\n                        }.Else{\r\n                            Span(LangRes(no))\r\n                        }\r\n                        If(#v_member_id# == #key_id#){\r\n                            SetVar(founder_account, EcosysParam(\"founder_account\"))\r\n                            If(#founder_account# != #key_id#){\r\n                                Div(){\r\n                                    Button(Class: btn btn-link, Page: roles_request, Body: LangRes(request)).Popup(Header: $request$, Width: \"30\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#prefix_id# == #key_id#){\r\n                        Div(list-group-item mb){\r\n                            P(Class: text-center text-bold h4 m0, Body: LangRes(tokens_transfer))\r\n                            Div(form-group){\r\n                                Div(row){\r\n                                    Div(col-md-12 mc-sm text-center){\r\n                                        Div(text-muted m0 h5, Body: LangRes(tokens))\r\n                                        Span(Class: h5 text-bold, Body: Money(#tokens_amount#) APL)\r\n                                    }\r\n                                }\r\n                                Div(row){\r\n                                    Div(col-md-12 mt-lg text-center){\r\n                                        Div(text-muted m0 h5, Body: LangRes(wallet_address))\r\n                                        Span(Class: h5, Body: Address(#prefix_id#))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(text-center){\r\n                                Div(row){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Span(Class: h6 text-bold, Body: LangRes(recipient))\r\n                                    }\r\n                                    Div(col-md-9 mb-sm text-left){\r\n                                        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\r\n                                    }\r\n                                }\r\n                                Div(row){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Span(Class: h6 text-bold, Body: LangRes(amount))\r\n                                    }\r\n                                    Div(col-md-9 mc-sm text-left){\r\n                                        Input(Name: Amount, Type: Number)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-12 mc-sm){\r\n                                Button(Body: LangRes(send), Class: btn btn-default pull-right, Page: profile_view, Contract: TokensSend).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "profile_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\nIf(#v_role_id#>0){\r\n    DBFind(roles,src_roles).WhereId(#v_role_id#).Columns(\"id,role_name,role_type,roles_access->rids,creator->member_id\").Vars(prefix)\r\n\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_roles_access_rids#!=\"\",#prefix_roles_access_rids#!=\"NULL\")){\r\n        DBFind(roles).Where({id:[{\"$in\": [#prefix_roles_access_rids#]}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\r\n    }.Else{\r\n        SetVar(manager_id,0)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(role))\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(type) Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                SetVar(Name: var_prefix_role_type, Value: AppParam(App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\r\n                If(#manager_id#==0){\r\n                    P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            SetVar(participants,0)\r\n            DBFind(roles_participants).Where({\"role->id\":#v_role_id#, deleted:0}).Columns(\"id,member->member_id\").Custom(_id){\r\n                SetVar(participants,\"#participants#,#member.member_id#\")\r\n            }\r\n            DBFind(keys,src_keys).Where({id:{\"$nin\":[#participants#]}}).Columns(\"id\").Custom(_name){\r\n                SetVar(m_id, 0)\r\n                DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\r\n                Address(#id#)\r\n                If(Or(#m_id#>0,#m_id#<0)){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(member)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-lg text-left){\r\n                    Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                }\r\n            }\r\n        }\r\n        Div(pull-right){\r\n            Button(Body: LangRes(back), Class: btn btn-default, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n            If(#manager_id#>0){\r\n                Button(Body: LangRes(assign), Class: btn btn-primary, Page: roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: RolesAssign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(attention))\r\n    }\r\n}",
            "Name": "roles_assign",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns([\"name\", \"id\"]).Where({\"name\": \"Basic application\"}).Vars(application)\r\n\r\nDBFind(roles).Columns([\"role_name\", \"id\"]).Where({deleted:0}).Order(id).Vars(admin_role)\r\nSetVar(admin_role_name, #admin_role_role_name#)\r\n\r\nIf(GetVar(rid)){\r\n    DBFind(roles).WhereId(#rid#).Columns(\"roles_access->rids,id,role_type,role_name\").Vars(role)\r\n    SetVar(title, $edit_role$)\r\n    SetVar(role_type, AppParam(App:#application_id#, Name: roles_types, Index: #role_role_type#))\r\n\r\n    If(GetVar(role_roles_access_rids)!=\"\"){\r\n        DBFind(roles,src_roles_access).Where({id:{\"$in\":[#role_roles_access_rids#]}}).Columns(\"id,role_name\").Order(role_name)\r\n        SetVar(rids_access, \"[#role_roles_access_rids#, #role_id#]\")\r\n    }.Else{\r\n        SetVar(rids_access, [#role_id#])\r\n    }\r\n}.Else{\r\n    DBFind(buffer_data).Columns(value).Where({\"key\": \"roles_access\", \"member_id\": #key_id#}).Vars(buffer)\r\n    If(And(GetVar(buffer_value)!=\"\",#buffer_value#!=\"[]\")){\r\n        DBFind(roles, src_roles_access).Columns(\"id,role_name\").Where({\"id\": {\"$in\": #buffer_value#}}).Order(role_name)\r\n        SetVar(rids_access, \"#buffer_value#\")\r\n    }.Else{\r\n        SetVar(rids_access, [#admin_role_id#])\r\n    }\r\n    AppParam(App: #application_id#, Name: roles_types, Source: app_roles_types)\r\n    SetVar(rid, 0)\r\n    SetVar(title, $new_role$)\r\n}\r\nDBFind(roles, src_roles).Columns([\"id\", \"role_name\"]).Where({\"deleted\":0, \"id\": {\"$nin\": #rids_access#}}).Order(id)\r\n\r\nForm(){\r\n    Div(row form-group){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(For: name){\r\n                LangRes(name)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid# > 0){\r\n                Div(text-muted mt-sm){\r\n                    #role_role_name#\r\n                }\r\n            }.Else{\r\n                Input(Name: role_name).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: role_name, minLength: $validate_role_name$, maxLength: $validate_role_name$)\r\n            }\r\n        }\r\n    }\r\n    Div(row form-group){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(For: role_type){\r\n                LangRes(type)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid# > 0){\r\n                Div(text-muted mt-sm){\r\n                    AppParam(App: #application_id#, Name: roles_types, Index: #role_role_type#)\r\n                }\r\n            }.Else{\r\n                AppParam(App: #application_id#, Name: roles_types, Source: app_roles_types)\r\n                Select(Name: role_type, Source: app_roles_types, NameColumn: name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    Div(row form-group){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(For: role_managers){\r\n                LangRes(roles_access)\r\n                If(#rid# < 1){\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn btn-primary fa fa-plus, Page: roles_create, PageParams:\"rid=#rid#\", Contract: RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\r\n                }\r\n            }\r\n            ForList(src_roles_access){\r\n                If(#id#==#role_id#){\r\n                    Button(Class: btn btn-info mr-sm mb-sm, Page: roles_create, PageParams:\"rid=#rid#\", Contract: RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }.Else{\r\n                    Button(Class: btn btn-default mr-sm mb-sm, Page: roles_create, PageParams:\"rid=#rid#\", Contract: RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(pull-right){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: roles_list)\r\n        If(#rid#>0){}.Else{\r\n            Button(Body: LangRes(create), Class: btn btn-primary, Page: roles_list, Contract: RolesCreate)\r\n        }\r\n    }\r\n}",
            "Name": "roles_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(){\r\n    Div(){\r\n        Span($roles$)\r\n        Div(pull-right){\r\n            Button(Page: roles_create, Class: ml btn-tool btn-link){\r\n                Em(Class: icon icon-plus)\r\n                Span(Body: Span($create$))\r\n            }.Popup(50, $new_role$)\r\n        }\r\n    }\r\n}.Style(\r\n    z-index: 1000;\r\n    font-size: 20px;\r\n    line-height: 45px;\r\n    height: 46px;\r\n    color: #000;\r\n    font-weight: normal;\r\n    padding: 0 20px;\r\n    border: 0;\r\n)\r\nDiv(content-wrapper){\r\n    DBFind(applications,src_app).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n\r\n    If(GetVar(search)){\r\n        SetVar(where,{role_name:{\"$like\":#search#}})\r\n    }.Else{\r\n        SetVar(where,{id:{\"$neq\":0}}).(search,)\r\n    }\r\n\r\n    DBFind(roles,src_roles).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access->rids\").Custom(_id){\r\n        JsonToSource(rids,#roles_access#)\r\n        If(#deleted# == 0){\r\n            SetVar(style_text,).(style_link,\"text-primary\")\r\n        }.Else{\r\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(_creator){\r\n        If(#role_type#==3){\r\n        }.ElseIf(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n            LinkPage(Class: #style_link# text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\r\n                #creator.member_name#\r\n            }\r\n        }\r\n    }.Custom(_name){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#id#\"){\r\n            If(#image_id#>0){\r\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                #role_name#\r\n            }.Else{\r\n                Div(){\r\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(_date){\r\n        Div(#style_text# small){\r\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }.Custom(_type){\r\n        Span(Class: #style_text#, Body: AppParam(App:#application_id#, Name: roles_types, Index: #role_type#))\r\n    }.Custom(_status){\r\n        Span(Class:#style_text#){\r\n            If(#deleted# == 0){\r\n                LangRes(active)\r\n            }.Else{\r\n                LangRes(deleted)\r\n            }\r\n        }\r\n    }.Custom(_access){\r\n        If(#creator.member_id#==#key_id#){\r\n            SetVar(access,done)\r\n        }.Else{\r\n            SetVar(access,)\r\n        }\r\n        \r\n        If(And(#roles_access.rids#!=\"\",#roles_access.rids#!=\"NULL\")){\r\n            DBFind(roles,src_roles_list).Where({id:{\"$in\":[#roles_access.rids#]}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n            Div(#style_text# breaker){\r\n                ForList(src_roles_list){\r\n                    If(And(#role_id#==#id#)){\r\n                        SetVar(access,done)\r\n                    }\r\n\r\n                    If(#access_count#!=#src_roles_list_index#){\r\n                        Span(\"#role_name#,\",mr-sm)\r\n                    }.Else{\r\n                        #role_name#\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Custom(_actions){\r\n        Div(text-right button-group text-nowrap){\r\n            If(#access#==\"done\"){\r\n                Button(Class: fa fa-edit btn btn-default, PageParams: \"rid=#id#\", Page: roles_create).Popup(50, $edit_role$)\r\n                If(And(#deleted#==0,#role_type#!=3)){\r\n                    Button(Class: fa fa-trash btn btn-danger, Contract: RolesDelete, Params: \"rid=#id#\", Page: roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }.ElseIf(#deleted#==1){\r\n                    Button(Class: fa fa-recycle btn btn-info, Contract: RolesRestore, Params: \"rid=#id#\", Page: roles_list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon mt-sm){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: search, Value: #search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: roles_list, PageParams: \"search=Val(search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(table-responsive){\r\n                Table(Source: src_roles, Columns: \"$id$=_id,$name$=_name,$type$=_type,$creator$=_creator,$created$ / $deleted$=_date,$status$=_status,$roles_access$=_access,=_actions\")\r\n            }\r\n            If(GetVar(search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: roles_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Style(\r\n    .inline {display:inline-block;}\r\n    .breaker {word-break: break-all;}\r\n)",
            "Name": "roles_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        DBFind(roles,src_roles).Where({role_type:1, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\r\n        If(#roles_count#==0){\r\n            Div(Body: LangRes(send_not_possible))\r\n            Div(Body: LangRes(no_assigned_roles))\r\n        }.Else{\r\n            Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(form-group){\r\n        If(#roles_count#>0){\r\n            Button(Body: LangRes(sent), Class: btn btn-primary pull-right, Contract: RolesRequest, Page: profile_view)\r\n        }\r\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: profile_view)\r\n    }\r\n}",
            "Name": "roles_request",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tDBFind(notifications,src_notific).WhereId(#notific_id#).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name\").Vars(notific)\r\n   \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Request to role)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x text-primary)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(roles).WhereId(#notific_page_params_rid#).Columns(\"role_name\").Vars(r)\r\n                        Div(text-muted m0 h5, Body: LangRes(role))\r\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\r\n                    }\r\n\t\t\t\t\tDiv(list-group-item text-center){\r\n                        Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\r\n                        Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\r\n                        Button(Class: btn btn-danger, Body: Reject, Contract: RolesRequestDecision, Page: roles_list, Params: \"notific_id=#notific_id#,decision=0\")\r\n                        Button(Class: btn btn-success, Body: Accept, Contract: RolesRequestDecision, Page: roles_list, Params: \"notific_id=#notific_id#,decision=1\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "roles_request_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(){\r\n    Div(){\r\n        If(#v_role_id# > 0){\r\n            DBFind(roles,src_roles).WhereId(#v_role_id#).Columns(\"role_name,role_type,deleted\").Vars(prefix)\r\n            Span($role$: #prefix_role_name#)\r\n            If(And(#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n                Div(pull-right){\r\n                    Button(Page: roles_assign, PageParams: \"v_role_id=#v_role_id#\", Class: ml btn-tool btn-link){\r\n                        Em(Class: icon icon-plus)\r\n                        Span(Body: Span($assign$))\r\n                    }.Popup(50, $new_role$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Style(\r\n    z-index: 1000;\r\n    font-size: 20px;\r\n    line-height: 45px;\r\n    height: 46px;\r\n    color: #000;\r\n    font-weight: normal;\r\n    padding: 0 20px;\r\n    border: 0;\r\n)\r\n\r\nDiv(content-wrapper){\r\n    If(#v_role_id# > 0){\r\n        Div(breadcrumb){\r\n            LinkPage($roles$, roles_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: #prefix_role_name#)\r\n        }\r\n\r\n        DBFind(roles_participants,src_participants).Where({\"role->id\":#v_role_id#}).Order({deleted:\"1\", id:\"1\"}).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n            If(#deleted# == 0){\r\n                SetVar(Name: style_text, Value: \"text-normal\")\r\n                SetVar(Name: style_link, Value: \"text-primary\")\r\n            }.Else{\r\n                SetVar(Name: style_text, Value: \"text-muted\")\r\n                SetVar(Name: style_link, Value: \"text-muted\")\r\n            }\r\n            Span(Class: #style_text#, Body: #id#)\r\n        }.Custom(custom_appointed){\r\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n                LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\r\n                    Span(Body: #appointed.member_name#)\r\n                }\r\n            }\r\n            If(#appointed.voting_id#>0){\r\n                LinkPage(Class:#style_link# h5 text-bold,Page: voting_view, PageParams: \"vID=#appointed.voting_id#\"){\r\n                    Span(Body: #appointed.voting_name#)\r\n                }\r\n            }\r\n        }.Custom(custom_member){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\"){\r\n                If(#member.image_id#>0){\r\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                    Span(#member.member_name#)\r\n                }.Else{\r\n                    Div(){\r\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                        Span(#member.member_name#)\r\n                    }.Style(display:flex; align-items:center;)\r\n                }\r\n            }\r\n        }.Custom(custom_address){\r\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n        }.Custom(custom_date){\r\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }.Custom(custom_status){\r\n            If(#deleted# == 0){\r\n                Span(Class: #style_text#, Body: LangRes(active))\r\n            }.Else{\r\n                Span(Class: #style_text#, Body: LangRes(deleted))\r\n            }\r\n        }.Custom(actions){\r\n            Div(pull-right){\r\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\r\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: RolesUnassign, Params: \"row_id=#id#\", Page: roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "roles_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    If(Or(#v_id#>0,#v_id#<0)){\r\n        SetVar(Name: v_address, Value: Address(#v_id#))\r\n    }.Else{\r\n        SetVar(Name: v_address, Value: \"\")\r\n    }\r\n    Div(form-group){\r\n        Label($recipient$)\r\n        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n    }\r\n    Div(form-group){\r\n        Label($amount$)\r\n        Input(Name: Amount, Type: Number)\r\n    }\r\n    Div(form-group){\r\n        Button(Body: LangRes(send), Class: btn pull-right btn-primary, Page: members_list, Contract: TokensSend).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: members_list)\r\n    }\r\n}",
            "Name": "tokens_transfer",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n\r\nSetTitle($new_voting$)\r\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: type_voting_decisions)\r\nAppParam(App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\nData(inputs,\"Name,Type,Res,Req,Src,Val,Desc\"){\r\n    voting_name,input,name,*,,\"New voting\",\r\n    type_decision,select,decision,*,type_voting_decisions,,\r\n    type_participants,select,participants,*,type_voting_participants,,\r\n    volume,number,voting_volume,*,,75,$voting_volume_desc$\r\n    quorum,number,voting_quorum,*,,51,$voting_quorum_desc$\r\n    start,datetime,date_start,*,,,\r\n    end,datetime,date_end,*,,,\r\n    description,textarea,description,,,,\r\n\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($voting$, voting_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $new_voting$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(new_voting)}\r\n                Div(panel-body){\r\n                    ForList(inputs){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(For:#Name#){\r\n                                        LangRes(#Res#)\r\n                                        If(#Req#==*){\r\n                                            Span(*,text-danger)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    If(#Type#==input){\r\n                                        Input(Name: #Name#, Value: #Val#)\r\n                                    }.ElseIf(#Type#==select){\r\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                                    }.ElseIf(#Type#==number){\r\n                                        Input(Name: #Name#, Value: #Val#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==textarea){\r\n                                        Input(Name: #Name#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==datetime){\r\n                                        Div(row){\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_date, Type: date)\r\n                                            }\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_time, Type: time)\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    If(`#Desc#`!=\"\"){\r\n                                        Div(m0 text-muted){\r\n                                            #Desc#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\r\n                    Input(Name: voting_type, Type: hidden, Value: 1)\r\n                    Button(Body: LangRes(create), Class: btn btn-primary pull-right, Page: voting_list, Contract: VotingCreate)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n        DBFind(roles,src_roles).Where({role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n        DBFind(votings_subject).Where({voting_id:#vID#, \"subject->member_id\":#key_id#}).Columns(\"id\").Vars(already_candidate)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/,mh)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n        If(#elective_roles_count#>0){\r\n            Div(row mt-sm){\r\n                Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                    Form(panel panel-primary){\r\n                        Div(panel-body){\r\n                            SetVar(hidden,)\r\n                            If(#already_candidate_id#>0){\r\n                                SetVar(hidden,hidden)\r\n                            }\r\n                            Div(row mt-sm #hidden#){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(candidates))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Div(input-group){\r\n                                        Input(Name: can_apply_voting, Disabled: 1, Value: \"$can_apply_voting$\")\r\n                                        Div(input-group-btn){\r\n                                            Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: VotingSubjectCandidates)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-9 col-sm-offset-3){\r\n                                    DBFind(votings_subject,src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                                        Address(#subject.member_id#)\r\n                                    }.Custom(_member){\r\n                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                            Span(Body: #subject.member_name#)\r\n                                        }\r\n                                    }\r\n                                    Table(src_voting_subject, \"$candidates$=_member,$address$=_address\")\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(role))\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(vacancies))\r\n                                            Span(Class: text-danger, Body:*)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(contract_accept))\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                        InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(params))\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(contract_reject))\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                        InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-3 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(params))\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-9 text-left){\r\n                                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(panel-footer text-right){\r\n                            Div(pull-left){\r\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                            }\r\n                            Input(Name: memberID, Type: hidden, Value: 0)\r\n                            Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                            Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectSettings)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(row){\r\n                Div(col-md-12 text-center h3){\r\n                    P(LangRes(elective_roles_not_found))\r\n                    LinkPage(Body: LangRes(create_role), Page: roles_create)\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_candidates",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\r\n        DBFind(votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(prefix_subject_contract_accept,)\r\n            SetVar(prefix_subject_contract_accept_params,)\r\n            SetVar(prefix_subject_contract_reject,)\r\n            SetVar(prefix_subject_contract_reject_params,)\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage(Body:$voting$, Page:voting_list)\r\n            Span(/,mh)\r\n            LinkPage(Body:#instance_voting_name#, Page:voting_view, PageParams:\"vID=#vID#\")\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(contract_accept)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mb-sm text-left){\r\n                                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Body: LangRes(params))\r\n                                }\r\n                            }\r\n                            Div(col-md-9 mc-sm text-left){\r\n                                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                            }\r\n                        }\r\n\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectContract)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_contract",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n        DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(Name: prefix_subject_text, Value: \"\")\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/,mh)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-sm){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(text_document))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row mb-sm){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectDocument)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_document",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/,mh)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n        SetVar(candidates,0)\r\n        DBFind(votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n            SetVar(candidates,\"#candidates#,#subject.member_id#\")\r\n            Address(#subject.member_id#)\r\n        }.Custom(_member){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                Span(Body: #subject.member_name#)\r\n            }\r\n        }\r\n        DBFind(keys,src_keys).Where({id:{\"$nin\":[#candidates#]}}).Columns(\"id\").Custom(_name){\r\n            DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\r\n            Address(#id#)\r\n            If(Or(#m_id#>0,#m_id#<0)){\r\n                \" (#m_member_name#)\"\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Div(input-group){\r\n                                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                                        Div(input-group-btn){\r\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: \"vID=#vID#\", Contract: VotingSubjectCandidates)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-sm-9 col-sm-offset-3){\r\n                                    Table(src_subject, \"$candidates$=_member,$address$=_address\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    DBFind(roles,src_roles).Where({role_type:2, deleted:0}).Columns(\"id,role_name\").Count(count_roles)\r\n                                    If(#count_roles#>0){\r\n                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                                    }.Else{\r\n                                        elected role is not found\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectSettings)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_election",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings,src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n        DBFind(votings_subject,src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Vars(prefix)\r\n\r\n        If(#prefix_id#>0){\r\n        }.Else{\r\n            SetVar(prefix_subject_description,)\r\n            SetVar(prefix_subject_table,)\r\n            SetVar(prefix_subject_table_id,)\r\n            SetVar(prefix_subject_column,)\r\n            SetVar(prefix_subject_column_value,)\r\n        }\r\n\r\n        SetTitle($subject_voting$)\r\n        Div(breadcrumb){\r\n            LinkPage($voting$, voting_list)\r\n            Span(/,mh)\r\n            LinkPage(#instance_voting_name#, voting_view,, \"vID=#vID#\")\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: $subject_voting$)\r\n        }\r\n\r\n        Div(row){\r\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n                Form(panel panel-primary){\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(table_to_written))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(row_id))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(column_name))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(written_value))\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-lg text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(description))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_accept))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(contract_reject))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mb-sm text-left){\r\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\r\n                                }\r\n                            }\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(params))\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 mc-sm text-left){\r\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Div(pull-left){\r\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: \"vID=#vID#\")\r\n                        }\r\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectFormal)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}",
            "Name": "voting_decision_formal",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#vID# > 0){\r\n    Form(){\r\n        If(GetVar(back_page)){}.Else{\r\n            SetVar(back_page,voting_view)\r\n        }\r\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\r\n        SetVar(participants,0)\r\n        DBFind(votings_participants, src_participants).Where({voting_id:#vID#}).Columns(\"id,member->member_id,member->member_name\").Count(participants_count).Custom(_id){\r\n            SetVar(participants,\"#participants#,#member.member_id#\")\r\n            #member.member_id#\r\n        }.Custom(_name){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#member.member_id#\", Body: #member.member_name#)\r\n        }\r\n        Div(form-group){\r\n            If(#instance_voting_type_participants# == 1){\r\n                Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_members$\")\r\n            }\r\n            If(#instance_voting_type_participants# == 2){\r\n                Label(){\r\n                    LangRes(select_member)\r\n                    Span(*, text-danger)\r\n                }\r\n                DBFind(keys,src_keys).Where({id:{\"$nin\":[#participants#]}}).Columns(\"id\").Count(keys_count).Custom(_name){\r\n                    DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\r\n                    Address(#id#)\r\n                    If(Or(#m_id#>0,#m_id#<0)){\r\n                        \" (#m_member_name#)\"\r\n                    }\r\n                }\r\n                If(#keys_count#>0){\r\n                    Select(Name: var_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                }.Else{\r\n                    Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_keys_added$\")\r\n                }\r\n            }\r\n            If(#instance_voting_type_participants# == 3){\r\n                Label(){\r\n                    LangRes(select_role)\r\n                    Span(*, text-danger)\r\n                }\r\n                DBFind(roles, src_roles).Where({deleted:0}).Columns(\"id,role_name\")\r\n                Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n            }\r\n        }\r\n\r\n        Div(form-group text-left){\r\n            Button(Body: LangRes(back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n            Input(Name: votingID, Type: hidden, Value: #vID#)\r\n            If(#instance_voting_type_participants# == 2){\r\n                If(#keys_count#>0){\r\n                    Button(Body: LangRes(add_member), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: VotingInvite)\r\n                }\r\n            }.ElseIf(#instance_voting_type_participants# == 3){\r\n                Button(Body: LangRes(add_role), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: VotingInvite)\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            If(#participants_count#>0){\r\n                Div(form-group){\r\n                    Table(src_participants, \"$id$=_id,$member_name$=_name\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(alert alert-danger text-center){\r\n        Span(Body: LangRes(attention))\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: voting_list)\r\n    }\r\n}",
            "Name": "voting_invite",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "\r\nDBFind(applications,src_app).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetTitle(\"List of votings\")\r\n\r\nIf(GetVar(Search)){\r\n    SetVar(Where,{\"voting->name\":{\"$like\":#Search#}, deleted:0})\r\n}.Else{\r\n    SetVar(Where,{deleted:0}).(Search,)\r\n}\r\n\r\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\r\nSetVar(this_page,\"voting_list\")\r\nAddToolButton(Title: $create$, Page: voting_create, Icon: icon-plus)\r\nDiv(content-wrapper){\r\n    \r\n    If(EcosysParam(Name:founder_account)==#key_id#){\r\n        Button(Body: $update_votings_statuses$, Class: btn btn-default, Page: #this_page#, Contract: VotingStatusUpdate)\r\n    }\r\n\r\n    SetVar(table,\"votings\").(per_page,20)\r\n    Div(mt){\r\n        Include(basic_paginator)\r\n    }\r\n    DBFind(#table#,src_voting).Where(#Where#).Order({id:-1}).Offset(#paginator_offset#).Limit(#per_page#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status\").Custom(_id){\r\n        Span(Class: h5, Body: #id#)\r\n\r\n        SetVar(started_class,text-bold).(finished_class,text-bold)\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#)){\r\n            SetVar(started_class,text-muted)\r\n        }\r\n        If(#status#==#FINISHED#){\r\n            SetVar(finished_class,text-muted)\r\n        }\r\n    }.Custom(_name){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#id#\"){\r\n            Span(Class: h5 text-bold m0, Body: #voting.name#)\r\n        }\r\n    }.Custom(_subject){\r\n        SetVar(decision, AppParam(App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\r\n        Div(h6 m0){\r\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n                #decision#\r\n            }.Else{\r\n                If(#voting.type_decision# == 1){\r\n                    SetVar(link_page,\"voting_decision_candidates\")\r\n                }.ElseIf(#voting.type_decision# == 2){\r\n                    SetVar(link_page,\"voting_decision_election\")\r\n                }.ElseIf(#voting.type_decision# == 3){\r\n                    SetVar(link_page,\"voting_decision_document\")\r\n                }.ElseIf(#voting.type_decision# == 4){\r\n                    SetVar(link_page,\"voting_decision_formal\")\r\n                }.ElseIf(#voting.type_decision# == 5){\r\n                    SetVar(link_page,\"voting_decision_contract\")\r\n                }\r\n                LinkPage(Page: #link_page#, PageParams: \"vID=#id#\", Class:text-bold, Body: #decision#)\r\n            }\r\n        }\r\n    }.Custom(_participants){\r\n        SetVar(participants, AppParam(App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\r\n        Div(h6 m0){\r\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n                #participants#\r\n            }.Else{\r\n                Button(Page: voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\", Class: btn btn-link p0 text-bold, Body: #participants#).Popup(45, $participants_add$)\r\n            }\r\n        }\r\n    }.Custom(_creator){\r\n        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#creator.member_id#\", Body: #creator.member_name#)\r\n    }.Custom(_date){\r\n        Div(Class: #started_class#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(Class: #finished_class#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(_type){\r\n        Span(Class: h6 m0, Body: AppParam(App:#application_id#, Name: type_voting, Index: #voting.type#))\r\n    }.Custom(_progress){\r\n        Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\r\n    }.Custom(_decision){\r\n        Div(text-center){\r\n            If(#flags.decision# == 0){\r\n                If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\r\n                    Button(Body: LangRes(decision), Class: btn btn-primary, Contract: VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\r\n                }.Else{\r\n                    Div(text-muted){LangRes(no)}\r\n                }\r\n            }.ElseIf(#flags.decision# == -2){\r\n                Div(text-muted){LangRes(not_enough_votes)}\r\n            }.ElseIf(#flags.decision# == 1){\r\n                Div(text-success){LangRes(accepted)}\r\n            }.ElseIf(#flags.decision# == -1){\r\n                Div(text-danger){LangRes(rejected)}\r\n            }\r\n        }\r\n    }.Custom(_status){\r\n        SetVar(status_class, AppParam(App:#application_id#, Name:voting_statuses_classes, Index:#status#))\r\n        Div(text-center #status_class#){\r\n            If(#status#==#STARTED#){\r\n                Button(Class: btn btn-link icon-eye, Page: voting_view, PageParams: \"vID=#id#\")\r\n            }.Else{\r\n                AppParam(App:#application_id#, Name:voting_statuses, Index:#status#)\r\n            }\r\n        }\r\n    }.Custom(_actions){\r\n        Div(text-right){\r\n            If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\r\n                Button(Class: fa fa-trash btn btn-default, Contract: VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-12){\r\n                    Div(table-responsive){\r\n                        Table(src_voting, \"$id$=_id,$name$=_name,$type$=_type,$subject_voting$=_subject,$participants$=_participants,$date_start$/$date_end$=_date,$creator$=_creator,$progress$=_progress,$decision$=_decision,$status$=_status,=_actions\")\r\n                    }\r\n                }\r\n            }\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-default, Page: #this_page#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "voting_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(notifications,src_notifications).WhereId(#notific_id#).Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\r\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status\").Vars(instance)\r\n\r\n        SetTitle(Viewing voting: #instance_voting_name#)\r\n\r\n        DBFind(votings_participants).Where({voting_id:#vID#, \"member->member_id\":#key_id#, decision:0}).Columns(\"id\").Vars(participant)\r\n        If(And(#instance_status#==#STARTED#,#participant_id#>0)){\r\n            SetVar(isVotingAllowed,1)\r\n        }.Else{\r\n            SetVar(isVotingAllowed,0)\r\n        }\r\n        Div(breadcrumb){\r\n            LinkPage(Body:Votings list, Page:voting_list)\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: ##instance_id#)\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-default){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                        Div(row mt-sm){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(App:#application_id#, Name: type_voting_decisions, Index: #instance_voting_type_decision#))\r\n                            }\r\n                        }\r\n                        If(`#instance_voting_description#`!=\"\"){\r\n                            Div(row mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    Div(Class: t5 text-muted m0, Body: LangRes(description))\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5 mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(no))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(role)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(roles, src_roles).WhereId(#instance_optional_role_id#).Columns(\"id,role_name\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(vacancies)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(candidates)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: #instance_optional_number_candidates#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                                Address(#subject.member_id#)\r\n                            }.Custom(_member){\r\n                                LinkPage(Class: text-primary t5 text-bold, Page: profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                    #subject.member_name#\r\n                                }\r\n                            }.Custom(_voting){\r\n                                If(#isVotingAllowed#==1){\r\n                                    Button(Body: LangRes(vote), Class: btn btn-success, Page: voting_view, PageParams: \"vID=#vID#\", Contract: VotingCandidateAccept, Params: \"candidateID=#subject.member_id#\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        If(#instance_voting_type_decision#==1){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                        If(#instance_voting_type_decision#==2){\r\n                                            Button(Class: btn btn-link, Page: voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==3){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text,subject->hash\").Vars(subject)\r\n                            Div(row t5 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==4){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Vars(subject)\r\n\r\n                            If(#instance_voting_type#==1){\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(table_to_written)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(row_id)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table_id#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    If(#instance_voting_type#==1){\r\n                                        LangRes(column_name)\r\n                                    }.Else{\r\n                                        LangRes(parameter_name)\r\n                                    }\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    Span(Body: LangRes(written_value))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column_value#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(description)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        If(#subject_subject_description# == \"\"){\r\n                                            Span(Class:text-muted, Body: LangRes(optional))\r\n                                        }.Else{\r\n                                            #subject_subject_description#\r\n                                        }\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==5){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject\").Vars(subject)\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center t5){\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                SetVar(status_class, AppParam(App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\r\n                                Div(#status_class#){\r\n                                    AppParam(App:#application_id#, Name:voting_statuses, Index:#instance_status#)\r\n                                }\r\n\r\n                                If(#instance_flags_full_data#==0){\r\n                                    Div(text-muted){LangRes(not_filled)}\r\n                                }\r\n                                If(#instance_progress_number_participants#==0){\r\n                                    Div(text-muted){LangRes(not_participants)}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_start)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\r\n                                SetVar(date_started_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_started_class#){\r\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_end)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(#instance_status#==#FINISHED#){\r\n                                SetVar(date_ended_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_ended_class#){\r\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(voting_volume)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_volume#\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_quorum#\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(participants)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t6){\r\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                DBFind(votings_participants, src_voting_participants).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,member->member_id,decision_date,decision\").Custom(_address){\r\n                                    Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                }.Custom(_decision){\r\n                                    If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }.Else{\r\n                                            Div(Class: text-success text-center, Body: $vote_for_candidate$:)\r\n                                            Div(Class: text-success text-center, Body: Address(#decision#) )\r\n                                            Div(Class: text-success text-center, Body: $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==3){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==4){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==5){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Table(src_voting_participants, \"=_address,=_decision\")\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-12){\r\n                                If(#instance_voting_type#==1){\r\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\r\n                                        Button(Class: btn btn-link text-bold, Page: voting_invite, PageParams: \"vID=#vID#\"){\r\n                                            LangRes(participants_add)\r\n                                        }.Popup(50, $participants_add$)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                LangRes(voted)\r\n                            }\r\n                            Div(col-md-5){\r\n                                LangRes(progress)\r\n                            }\r\n                        }\r\n                        If(graph_work==\"good\"){\r\n                            Div(row mt-sm text-muted t6 text-center){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    LangRes(voting_graph_voted)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    LangRes(voting_graph_progress)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm text-center t3){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                #instance_progress_number_voters# LangRes(voters) / #instance_progress_percent_voters#% LangRes(voters)\r\n                            }\r\n                            Div(col-md-5){\r\n                                #instance_progress_percent_success#% LangRes(success) / 100% LangRes(total)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Name": "voting_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract BufferManager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n    func decodeArray(s string) array{\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") {\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n    conditions {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"buffer_data\").Where({key:$Key, member_id:$key_id}).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"buffer_data\", {key:$Key, value:$emptyVal, member_id:$key_id})\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"member_id\"] = Str($key_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n    }\r\n\r\n    action {\r\n        var id int\r\n        id = Int($buf[\"id\"])\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"buffer_data\", id, {value:$emptyVal})\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"buffer_data\", id, {value:$Val})\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar = Append(ar, $Val)\r\n            enc = JSONEncode(ar)\r\n            DBUpdate(\"buffer_data\", id, {value:enc})\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array i int enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i<Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew = Append(arNew, ar[i])\r\n                }\r\n                i=i+1\r\n            }\r\n            enc = JSONEncode(arNew)\r\n            DBUpdate(\"buffer_data\", id, {value:enc})\r\n        }\r\n    }\r\n}\r\n",
            "Name": "BufferManager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsBroadcast {\r\n    data {\r\n        Header string\r\n        Body string\r\n        RoleId int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").WhereId(kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"keys\").Columns(\"id\").WhereId(kid).Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        if $role_id !=1 {\r\n            error \"The action allowed only for admin\"\r\n        }\r\n        if $ecosystem_id!=1 {\r\n            error \"The action allowed only for admin from first ecosystem\"\r\n        }\r\n        $ecos = DBFind(\"ecosystems\").Ecosystem(1).Columns(\"id\")\r\n        $lenEcos = Len($ecos)\r\n        if $lenEcos == 1{\r\n            error \"Not found other ecosystems\"\r\n        }\r\n    }\r\n    action {\r\n        var i lenIds int eco map ids array table roleName bt string sender recipient params note map\r\n        bt = BlockTime()\r\n        roleName = DBFind(\"roles\").WhereId($role_id).One(\"role_name\")\r\n        sender = getMemberInfo($key_id)\r\n        sender[\"type\"] = \"1\"\r\n\r\n        note[\"header\"] = $Header\r\n        note[\"type\"] = \"1\"\r\n        note[\"icon\"] = \"icon-envelope\"\r\n        note[\"body\"] = $Body\r\n\r\n        while i<$lenEcos{\r\n            eco = $ecos[i]\r\n            if eco[\"id\"] != 1{\r\n                ids = DBFind(\"roles_participants\").Where({\"role->id\":$RoleId, \"role->type\":3}).Columns(\"member->member_id\")\r\n                lenIds = Len(ids)\r\n                table = Sprintf(\"@%v_notifications\", eco[\"id\"])\r\n                var i_ids int\r\n                while i_ids<lenIds{\r\n                    recipient = ids[i_ids]\r\n                    recipient = getMemberInfo(Int(recipient[\"member.member_id\"]))\r\n                    var m map\r\n                    m[\"recipient\"] = recipient\r\n                    m[\"sender\"] = sender\r\n                    m[\"notification\"] = note\r\n                    m[\"page_name\"] = \"notifications_show\"\r\n                    m[\"page_params\"] = params\r\n                    m[\"date_created\"] = bt\r\n                    DBInsert(table, m)\r\n                    i_ids=i_ids+1\r\n                }\r\n            }\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "NotificationsBroadcast",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsProcess {\r\n    data {\r\n        notific_id int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").WhereId(kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").WhereId(kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").WhereId($notific_id).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2{\r\n            if $notify[\"date_start_processing\"] != \"\" {\r\n                warning \"Sorry, processing of this notification has already begun\"\r\n            }\r\n            var rid string\r\n            rid = $notify[\"recipient.role_id\"]\r\n            if !DBFind(\"roles_participants\").Where({\"role->id\":rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\r\n                warning \"Sorry, you are not part of the role for which this notification is intended\"\r\n            }\r\n        }else{\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var model map\r\n        model[\"processing_info\"] = getMemberInfo($key_id)\r\n        model[\"date_start_processing\"] = BlockTime()\r\n        DBUpdate(\"notifications\", $notific_id, model)\r\n    }\r\n}",
            "Name": "NotificationsProcess",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsClose {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"notifications\").WhereId($notific_id).Columns(\"id,date_start_processing,processing_info->member_id,closed,sender->type\").Row()\r\n        if !$notify {\r\n            warning \"Notification not found\"\r\n        }\r\n        if $notify[\"sender.type\"] == 2{\r\n            //role has processing check\r\n            if $notify[\"date_start_processing\"] == \"\" {\r\n                warning \"Sorry, processing of this notification has not yet begun\"\r\n            }\r\n\r\n            if $notify[\"processing_info.member_id\"] != $key_id {\r\n                warning \"Sorry, processing of this notice began another member\"\r\n            }\r\n\r\n            if $notify[\"closed\"] > 0 {\r\n                warning \"Sorry, this notification has already been closed before\"\r\n            }\r\n        }else {\r\n            if $notify[\"sender.type\"] != 1 { // not single\r\n                warning \"Notification type not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"sender.type\"] == 1{\r\n            NotificationsProcess(\"notific_id\", $notific_id)\r\n        }\r\n        var m map\r\n        m[\"date_closed\"] = BlockTime()\r\n        m[\"closed\"] = 1\r\n        DBUpdate(\"notifications\", $notific_id, m)\r\n    }\r\n}",
            "Name": "NotificationsClose",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsSend {\r\n    data {\r\n        member_id int \"optional\"\r\n        rid int \"optional\"\r\n        closure_type int \"optional\"\r\n\r\n        sender int\r\n        icon_name string \"optional\"\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map string // json encoded expected\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").WhereId(kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"keys\").WhereId(kid).Columns(\"id\").Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    func sendNotify(recipient map){\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n        var sender map\r\n        if $sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $sender\r\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        }else{\r\n            if $sender == 2 && $senderRole{\r\n                // send from role\r\n                sender[\"type\"] = $sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n        var model map\r\n        model[\"recipient\"] = recipient\r\n        model[\"sender\"] = sender\r\n        model[\"notification\"] = notification\r\n        model[\"page_name\"] = $page_name\r\n        model[\"page_params\"] = $params_map\r\n        model[\"date_created\"] = BlockTime()\r\n        DBInsert(\"notifications\", model)\r\n    }\r\n\r\n    func sendToRole(roleId int){\r\n        var role recipient map\r\n        role = DBFind(\"roles\").WhereId(roleId).Row()\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        $member_id = Int($member_id)\r\n        $rid = Int($rid)\r\n        if Size($icon_name) < 1{\r\n            $icon_name = \"icon-envelope\"\r\n        }\r\n        if $member_id != 0 {\r\n            if !DBFind(\"keys\").WhereId($member_id).Row(){\r\n                warning \"Key not found\"\r\n            }\r\n            $notify_type = 1 // is \"member\"\r\n        }else{\r\n            if $rid > 0{\r\n                $notify_type = 2 // is \"role\"\r\n                if !DBFind(\"roles\").WhereId($rid).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role not found\"\r\n                }\r\n                if !DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).One(\"id\") {\r\n                    warning $this_contract+\": Recipient role does not contain members\"\r\n                }\r\n            } else{\r\n                warning $this_contract+\": Notification type not defined\"\r\n            }\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $sender == 1 {\r\n            $senderMember = getMemberInfo($key_id)\r\n        }else{\r\n            if $sender == 2 {\r\n                $senderRole = DBFind(\"roles\").WhereId($role_id).Row()\r\n                if !$senderRole {\r\n                    warning $this_contract+\": Sender role not found\"\r\n                }\r\n            }else{\r\n                warning $this_contract+\": Sender invalid\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        if $member_id != 0 {\r\n            sendNotify(getMemberInfo($member_id))\r\n        }else{\r\n            if $rid > 0 {\r\n                if $closure_type == 1 {\r\n                    // Single closure: one begins the process - the others do not see\r\n                    sendToRole($rid)\r\n                } else {\r\n                    // Multiple closure: to each his own notification\r\n                    $notify_type = 1\r\n                    var participants array\r\n                    participants = DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"member->member_id\")\r\n                    var i int\r\n                    while i < Len(participants) {\r\n                        var p map\r\n                        p = participants[i]\r\n                        sendNotify(getMemberInfo(Int(p[\"member.member_id\"])))\r\n                        i=i+1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "NotificationsSend",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileAvatarEdit {\r\n    data {\r\n        member_image bytes \"file\"\r\n    }\r\n\r\n    conditions {\r\n        $member = DBFind(\"members\").WhereId($key_id).Row()\r\n        $app_id = DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\")\r\n\r\n        if !$member {\r\n            warning \"Member name is not specified\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $member {\r\n            var m map\r\n            m[\"image_id\"] = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $member_image, Int($app_id))\r\n            DBUpdate(\"members\", Int($member[\"id\"]), m)\r\n        }\r\n    }\r\n}",
            "Name": "ProfileAvatarEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileEdit {\r\n    data {\r\n        member_name string\r\n        information string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $member = DBFind(\"members\").WhereId($key_id).Row()\r\n        $app_id = DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\")\r\n\r\n        if !$member {\r\n            // check member_name\r\n            if DBFind(\"members\").Where({member_name:$member_name}).One(\"id\") {\r\n                warning \"This member name is busy. Enter another member name, please\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"member_info\"] = {information:$information}\r\n        if $member{\r\n            DBUpdate(\"members\", $key_id, m)\r\n        } else {\r\n            m[\"id\"] = $key_id\r\n            m[\"member_name\"] = $member_name\r\n            DBInsert(\"members\", m)\r\n        }\r\n    }\r\n}",
            "Name": "ProfileEdit",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\r\n    data{\r\n        role string\r\n    }\r\n    conditions {\r\n        if !DBFind(\"roles_participants\").Where({\"role->name\":$role, \"member->member_id\":$key_id, deleted:0}).Row() {\r\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\r\n        }\r\n    }\r\n}",
            "Name": "RoleConditions",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessCheck {\r\n    data {\r\n        rid int\r\n    }\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"roles\").WhereId($rid).Columns(\"id,role_name,deleted,roles_access->rids,role_type,creator->member_id,company_id\").Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: Role not found\", $this_contract)\r\n        }\r\n        \r\n        if role[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var rids rawRids array, i int\r\n        rawRids = Split(role[\"roles_access.rids\"], \",\")\r\n        while i < Len(rawRids){\r\n            if rawRids[i] > 0 {\r\n                rids = Append(rids, rawRids[i])\r\n            }\r\n            i=i+1\r\n        }\r\n        i=0\r\n        while i<Len(rids){\r\n            if rids[i] == $role_id {\r\n                return\r\n            }\r\n            i=i+1\r\n        }\r\n\r\n        if role[\"role_type\"] == 4 {\r\n            // company role\r\n            if role[\"company_id\"] == $key_id {\r\n                return\r\n            }else{\r\n                warning \"Sorry, you are not the creator of this company\"\r\n            }\r\n        }\r\n        warning Sprintf(\"Sorry, you don't have permission to change this role (%q)\", role[\"role_name\"])\r\n    }\r\n}",
            "Name": "RolesAccessCheck",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n    }\r\n    func updateAccess(ra string){\r\n        var model map\r\n        model[\"roles_access\"] = {rids:ra}\r\n        DBUpdate(\"roles\", $Rid, model)\r\n    }\r\n\tfunc updateBufferAccess(ra array){\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        if !$buffer_id {\r\n            DBInsert(\"buffer_data\", {\"member_id\": $key_id, \"key\": \"roles_access\", \"value\": roles_access})\r\n        } else {\r\n            DBUpdate(\"buffer_data\", Int($buffer_id), {\"value\": roles_access})\r\n        }\r\n    }\r\n    conditions {\r\n\t\t$ManagerRid = Int($ManagerRid)\r\n        if $Rid > 0 {\r\n\t\t\tRolesAccessCheck(\"rid\", $Rid)\r\n\r\n\t\t\t$role = DBFind(\"roles\").WhereId($Rid).Columns(\"id,roles_access->rids\").Row()\r\n\t\t\tif !$role {\r\n\t\t\t\twarning \"Role not found\"\r\n\t\t\t}\r\n\t\t\tif $ManagerRid > 0{\r\n\t\t\t\tif !DBFind(\"roles\").WhereId($ManagerRid).One(\"id\") {\r\n\t\t\t\t\twarning \"Role not found\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar ids array, i int\r\n\t\t\t$ids = ids\r\n\t\t\tids = Split($role[\"roles_access.rids\"],\",\")\r\n\t\t\twhile i < Len(ids){\r\n\t\t\t\tif ids[i] > 0 {\r\n\t\t\t\t\t$ids = Append($ids, ids[i])\r\n\t\t\t\t}\r\n\t\t\t\ti=i+1\r\n\t\t\t}\r\n\t\t} else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"buffer_data\").Where({\"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n\t\tif $Rid == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $Action == \"clean\"{\r\n            updateAccess(\"\")\r\n        }\r\n        if $ManagerRid > 0{\r\n            var i int, idsNew array\r\n            if $Action == \"remove\"{\r\n                while i<Len($ids){\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i=i+1\r\n                }\r\n\t\t\t\tif $Rid == 0 {\r\n\t\t\t\t\tupdateBufferAccess(idsNew)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tupdateAccess(Join(idsNew, \",\"))\r\n\t\t\t\t}\r\n            }\r\n            if $Action == \"add\"{\r\n                var double bool\r\n                while i<Len($ids){\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i=i+1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $Rid == 0 {\r\n\t\t\t\t\tupdateBufferAccess($ids)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tupdateAccess(Join($ids, \",\"))\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "RolesAccessManager",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAssign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").WhereId(kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").WhereId(kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        $role = DBFind(\"roles\").WhereId($rid).Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Row()\r\n        if (Int($role[\"role_type\"]) == 2){\r\n            warning \"Elective role can be assigned only during voting\"\r\n        }\r\n        if !$role {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        if !DBFind(\"keys\").WhereId($member_id).Row() {\r\n            warning \"Key not found\"\r\n        }\r\n\r\n        if $role[\"deleted\"] == 1 {\r\n            warning \"This role has been deleted. The appointment of members is impossible\"\r\n        }\r\n\r\n        var specialRules map prev_contract string stack array\r\n        stack = JSONDecode(JSONEncode($stack))\r\n        prev_contract = stack[0]\r\n        if Len(stack)>2{\r\n            prev_contract = stack[Len(stack)-2]\r\n        }\r\n        specialRules[\"@1VotingValidatorAccept\"] = \"Validator\"\r\n        specialRules[\"@1DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1VotingTemplateRun\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1VotingTokensRefundCreate\"] = \"Investor with voting rights\"\r\n        if specialRules[prev_contract] != $role[\"role_name\"] {\r\n            RolesAccessCheck(\"rid\", $rid)\r\n        }\r\n\r\n        $assigned = DBFind(\"roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$member_id, deleted:0}).One(\"id\")\r\n    }\r\n\r\n    action {\r\n        if $assigned {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointer map\r\n        role[\"id\"] = $role[\"id\"]\r\n        role[\"type\"] = $role[\"role_type\"]\r\n        role[\"name\"] = $role[\"role_name\"]\r\n        role[\"image_id\"] = $role[\"image_id\"]\r\n\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n        var m map\r\n        m[\"role\"] = role\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = BlockTime()\r\n        DBInsert(\"roles_participants\", m)\r\n    }\r\n}",
            "Name": "RolesAssign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesCreate {\n    data {\n        role_name string\n        role_type int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        // system role\n        if $role_type == 3 {\n            warning \"System role can not be created\"\n        }\n    }\n\n    action {\r\n\t\tvar roles_access_arr array, buffer map, roles_access string\r\n\t\tbuffer = DBFind(\"buffer_data\").Where({\"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\r\n        if buffer {\r\n            roles_access_arr = JSONDecode(buffer[\"value\"])\r\n            DBUpdate(\"buffer_data\", Int(buffer[\"id\"]), {\"value\": \"[]\"})\r\n        }\r\n        roles_access_arr = Append(roles_access_arr, 1)\r\n\t\troles_access = Join(roles_access_arr, \",\")\r\n\t\t\n        var m map\n        m[\"creator\"] = getMemberInfo($key_id)\n        m[\"role_name\"] =  $role_name\n        m[\"role_type\"] =  $role_type\n        m[\"date_created\"]  =  BlockTime()\n        m[\"company_id\"] =  0\r\n\t\tm[\"roles_access\"] = {\"rids\": roles_access}\n        $result = DBInsert(\"roles\", m)\n    }\n}",
            "Name": "RolesCreate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesUnassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        // check record\r\n        var assigned role map\r\n        assigned = DBFind(\"roles_participants\").WhereId($row_id).Columns(\"id,role->id\").Row()\r\n        if !assigned {\r\n            warning \"Participant not found\"\r\n        }\r\n\r\n        role = DBFind(\"roles\").WhereId(Int(assigned[\"role.id\"])).Columns(\"id,creator->member_id,role_name\").Row()\r\n        if !role {\r\n            warning \"Role not found in the roles registry\"\r\n        }\r\n\r\n        var specialRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack)>2{\r\n            prev_contract = $stack[Len($stack)-2]\r\n        }\r\n        specialRules[\"@1VotingValidatorAccept\"] = \"Candidate for validators\"\r\n        specialRules[\"@1DelegateRefresh\"] = \"Delegate\"\r\n        specialRules[\"@1CandidateValidatorRequest\"] = \"Candidate for validators\"\r\n        specialRules[\"@1InvestorRefresh\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1VotingTokensRefundCreate\"] = \"Investor with voting rights\"\r\n        specialRules[\"@1sysparams_ValidatorResign\"] = \"Validator\"\r\n\r\n        if specialRules[prev_contract] != role[\"role_name\"] {\r\n            RolesAccessCheck(\"rid\", Int(role[\"id\"]))\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = BlockTime()\r\n        DBUpdate(\"roles_participants\", $row_id, m)\r\n    }\r\n}",
            "Name": "RolesUnassign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequest {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"roles\").WhereId($rid).One(\"id\") {\r\n            warning \"Role not found\"\r\n        }\r\n\r\n        if DBFind(\"roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\r\n            warning \"You have already been added to the role\"\r\n        }\r\n\r\n        if DBFind(\"notifications\").Where({page_name:\"roles_request_view\", \"page_params->rid\":$rid, \"sender->member_id\":$key_id, closed:0}).One(\"id\") {\r\n            warning \"Request already sent\"\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var params map\r\n        params[\"rid\"] = $rid\r\n        \r\n        var member_id int\r\n        member_id = EcosysParam(\"founder_account\") \r\n\r\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", \r\n            member_id, 1, \"fa-bars\", \"Roles\", \"New request received\", \"roles_request_view\", params)\r\n    }\r\n}",
            "Name": "RolesRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequestDecision {\r\n    data {\r\n        decision int\r\n        notific_id int\r\n        rid int \"optional\"\r\n        member_id int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n    }\r\n    \r\n    action {\r\n        if ($decision == 1){\r\n            RolesAssign(\"rid,member_id\", $rid, $member_id)\r\n        }\r\n        \r\n        if ($notific_id > 0){\r\n            NotificationsClose(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Name": "RolesRequestDecision",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRestore {\r\n    data {\r\n        rid int\r\n    }\r\n    \r\n    conditions {        \r\n        RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n    \r\n    action {\r\n        DBUpdate(\"roles\", $rid, {deleted:0})\r\n    }\r\n}",
            "Name": "RolesRestore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesDelete {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"id\")\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            RolesUnassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = BlockTime()\r\n        DBUpdate(\"roles\", $rid, m)\r\n    }\r\n}",
            "Name": "RolesDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensTransfer {\r\n    data {\r\n        Amount money\r\n        Sender_AccountId int\r\n        Recipient_AccountId int\r\n        Comment string \"optional\"\r\n        //Signature string \"optional hidden\"\r\n    }\r\n\r\n    conditions {\r\n        //check amount\r\n        if $Amount == 0 {\r\n            error \"Amount is zero\"\r\n        }\r\n        if $Amount < 0 {\r\n            error \"Amount is negative\"\r\n        }\r\n\r\n        //check the sender\r\n        if !DBFind(\"keys\").WhereId($Sender_AccountId).One(\"id\") {\r\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\r\n        }\r\n\r\n        //check balance\r\n        $sender_balance = Money(DBFind(\"keys\").WhereId($Sender_AccountId).One(\"amount\"))\r\n        if $Amount > $sender_balance {\r\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\r\n        }\r\n\r\n        //check the recipient\r\n        if !DBFind(\"keys\").WhereId($Recipient_AccountId).One(\"id\") {\r\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"keys\", $Sender_AccountId, {\"-amount\":$Amount})\r\n        DBUpdate(\"keys\", $Recipient_AccountId, {\"+amount\":$Amount})\r\n        var m map\r\n        m[\"sender_id\"] = $Sender_AccountId\r\n        m[\"recipient_id\"] = $Recipient_AccountId\r\n        m[\"amount\"] = $Amount\r\n        m[\"comment\"] = $Comment\r\n        m[\"block_id\"] = $block\r\n        m[\"txhash\"] = $txhash\r\n        DBInsert(\"history\", m)\r\n    }\r\n}",
            "Name": "TokensTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensSend {\r\n    data {\r\n        Amount money\r\n        Recipient_Account string\r\n        //Signature string \"signature:TokensTransfer\"\r\n    }\r\n\r\n    conditions {\r\n        $recipient = AddressToId($Recipient_Account)\r\n        if $recipient == 0 {\r\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\r\n        }\r\n    }\r\n\r\n    action {\r\n        //TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\r\n        TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId\", $Amount, $key_id, $recipient)\r\n    }\r\n}",
            "Name": "TokensSend",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n    func runContract(cont, p string){\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100)/total)\r\n        if percent > 100 {\r\n            percent = 100\r\n        }\r\n        return percent\r\n    }\r\n    func closeNotes(){\r\n        var notes array i int\r\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            NotificationsClose(\"notific_id\", Int(note[\"id\"]))\r\n            i=i+1\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\r\n        $voting_name = $voting[\"voting.name\"]\r\n        $voting_type = Int($voting[\"voting.type\"]) //system or custom\r\n        $type_decision = Int($voting[\"voting.type_decision\"])\r\n        $optional_role_id = Int($voting[\"optional.role_id\"])\r\n        $number_role_vacancies = Int($voting[\"optional.role_vacancies\"])\r\n        $number_voters = Int($voting[\"progress.number_voters\"]) // already voted\r\n        $contract_accept = $voting[\"optional.contract_accept\"]\r\n        $contract_reject = $voting[\"optional.contract_reject\"]\r\n        $param_accept = $voting[\"optional.contract_accept_params\"]\r\n        $param_reject = $voting[\"optional.contract_reject_params\"]\r\n        $flag_success = $voting[\"flags.success\"]\r\n        $quorum = Int($voting[\"voting.quorum\"])\r\n        $percent_voters = Int($voting[\"progress.percent_voters\"])\r\n        $status =  Int($voting[\"status\"])\r\n\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack)>2{\r\n            prevContract = $stack[Len($stack)-2]\r\n        }\r\n        if prevContract != \"@1VotingUpdate\"{\r\n            // if $percent_voters < $quorum && $quorum > 50 || $status != $FINISHED {\r\n            if $status != $FINISHED {\r\n                warning \"Voting has not expired. Try again later, please\"\r\n            }\r\n        }\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $ACCEPT = 1\r\n        $REJECT = -1\r\n    }\r\n\r\n    action {\r\n        var percent_voters flag_decision i int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $flag_success == $ACCEPT { //now enough participants to make a decision\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = $REJECT // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Order({number_accept:\"-1\"}).Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < $number_role_vacancies {\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n\r\n                        if percent_voters >= $quorum {\r\n                            // added candidate to the role\r\n                            var role map\r\n                            role = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").WhereId(Int($optional_role_id)).Row()\r\n                            if role {\r\n                                var member assignedMember map mid rid string\r\n                                member[\"member_id\"] = subject[\"subject.member_id\"]\r\n                                mid = member[\"member_id\"]\r\n                                rid = role[\"id\"]\r\n                                assignedMember = DBFind(\"roles_participants\").Where({\"member->member_id\":mid, \"role->id\":rid, deleted:0}).Row()\r\n\r\n                                if !assignedMember {\r\n                                    member[\"member_name\"] = subject[\"subject.member_name\"]\r\n                                    member[\"image_id\"] = subject[\"subject.image_id\"]\r\n\r\n                                    var rolePart appointed m map\r\n                                    rolePart[\"id\"] = role[\"id\"]\r\n                                    rolePart[\"type\"] = role[\"role_type\"]\r\n                                    rolePart[\"name\"] = role[\"role_name\"]\r\n                                    rolePart[\"image_id\"] = role[\"image_id\"]\r\n\r\n                                    appointed[\"voting_id\"] = $votingID\r\n                                    appointed[\"voting_name\"] = $voting_name\r\n\r\n                                    // add a candidate to the role\r\n                                    m[\"role\"] = rolePart\r\n                                    m[\"member\"] = member\r\n                                    m[\"appointed\"] = appointed\r\n                                    m[\"date_created\"] = BlockTime()\r\n                                    DBInsert(\"roles_participants\", m)\r\n\r\n                                    candidates_added_count = candidates_added_count + 1\r\n                                    // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                    flag_decision = $ACCEPT\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept\").Row()\r\n                if subject {\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = $ACCEPT\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Row()\r\n                if subject {\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = $ACCEPT\r\n\r\n                        var column string\r\n                        column = Str(subject[\"subject.column\"])\r\n                        $colValue = Str(subject[\"subject.column_value\"])\r\n                        // type of voting - custom\r\n                        if $voting_type == 1 {\r\n                            // ALWAYS CHECK THE PERMISSION\r\n                            var colType string\r\n                            colType = GetColumnType(subject[\"subject.table\"], column)\r\n                            if colType == \"number\"{\r\n                                $colValue = Int($colValue)\r\n                            }\r\n                            if colType == \"money\"{\r\n                                $colValue = Money($colValue)\r\n                            }\r\n                            if colType == \"double\" {\r\n                                $colValue = Float($colValue)\r\n                            }\r\n                            var m map\r\n                            m[column] = $colValue\r\n                            DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                        }\r\n\r\n                        // type of voting - system\r\n                        if $voting_type == 2 {\r\n                            @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\r\n                        }\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 5 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\r\n                if subject {\r\n                    $contract_accept = subject[\"subject.contract_accept\"]\r\n                    $contract_reject = subject[\"subject.contract_reject\"]\r\n                    $param_accept = subject[\"subject.contract_accept_params\"]\r\n                    $param_reject = subject[\"subject.contract_reject_params\"]\r\n\r\n                    percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                    if percent_voters >= $quorum {\r\n                        flag_decision = $ACCEPT\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == 1 {\r\n                runContract($contract_accept, $param_accept)\r\n                closeNotes()\r\n            }\r\n            if flag_decision == -1 {\r\n                runContract($contract_reject, $param_reject)\r\n                closeNotes()\r\n            }\r\n        }\r\n\r\n        DBUpdate(\"votings\", $votingID, {\"flags->decision\":flag_decision})\r\n    }\r\n}",
            "Name": "VotingDecisionCheck",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingInvite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n\r\n    func addVotingKey(key map, votingId int) {\r\n        var m member map\r\n        member[\"member_id\"] = key[\"id\"]\r\n        member[\"member_name\"] = IdToAddress(Int(key[\"id\"]))\r\n        m[\"voting_id\"] = votingId\r\n        m[\"member\"] = member\r\n        DBInsert(\"votings_participants\", m)\r\n    }\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Row()\r\n        if !$voting {\r\n            warning \"Voting has expired. Can not add new participants\"\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning \"This vote is a system. Add new participants are not possible\"\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            if !DBFind(\"keys\").WhereId($var_id).Row(){\r\n                warning \"Key not found\"\r\n            }\r\n            isAdded = DBFind(\"votings_participants\").Where({voting_id:$votingID,\"member->member_id\":$var_id}).One(\"id\")\r\n            if isAdded {\r\n                warning \"Member has already been added before\"\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"votings_participants\").Where({voting_id:$votingID}).One(\"id\")\r\n            if isAdded {\r\n                warning \"Voting participants have already been added before\"\r\n            }\r\n            if Len(DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0})) == 0 {\r\n                warning \"Roles participants not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var keys array\r\n            keys = DBFind(\"keys\")\r\n            while i < Len(keys) {\r\n                addVotingKey(keys[i], $votingID)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var key map\r\n            key = DBFind(\"keys\").WhereId($var_id).Row()\r\n            addVotingKey(key, $votingID)\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 3 { // role\r\n            var roles array\r\n            roles = DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0}).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                m[\"voting_id\"] = $votingID\r\n                m[\"member\"] = role[\"member\"]\r\n                DBInsert(\"votings_participants\", m)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        var v map\r\n        v[\"progress->number_participants\"] =  $number_participants\r\n        if $type_participants == 3 {\r\n            v[\"voting->role_id\"] =  $var_id\r\n            DBUpdate(\"votings\", $votingID, v)\r\n        }else{\r\n            DBUpdate(\"votings\", $votingID, v)\r\n        }\r\n    }\r\n}",
            "Name": "VotingInvite",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingUpdate {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100)/total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:$STARTED}).Columns(\"flags,voting,progress\").Row()\r\n        if !$voting {\r\n            warning \"Started voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n\r\n        var flag_success percent_success percent_voters number_voters quorum  volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n        percent_success = percentPartOfTotal(percent_voters, volume)\r\n\r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n\r\n        var m map\r\n        m[\"progress\"] = progress\r\n        m[\"flags->success\"] = flag_success\r\n        if (percent_voters >= quorum && quorum > 50 && percent_voters >= volume) || percent_voters == 100 {\r\n            // if a quorum is more than 50% we can immediately make the decision\r\n            // OR\r\n            // if all participants have voted we can not wait until the end of the voting period\r\n            m[\"status\"] = $FINISHED\r\n            DBUpdate(\"votings\", $votingID, m)\r\n            VotingDecisionCheck(\"votingID\", $votingID)\r\n        }else{\r\n            DBUpdate(\"votings\", $votingID, m)\r\n        }\r\n    }\r\n}",
            "Name": "VotingUpdate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCandidateAccept {\r\n    data {\r\n        votingID int\r\n        candidateID int\r\n    }\r\n    func closeNotification(){\r\n        var id int\r\n        id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if id > 0 {\r\n            NotificationsClose(\"notific_id\", id)\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").Columns(\"id,flags->decision,flags->notifics,status\").WhereId($votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        $subject_map = DBFind(\"votings_subject\").Where({voting_id:$votingID, \"subject->member_id\":$candidateID}).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id}).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            // write the result of the voting\r\n            var m map\r\n            m[\"decision_date\"] = bt\r\n            m[\"decision\"] =  $candidateID\r\n            DBUpdate(\"votings_participants\", Int($participant_id), m)\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), {\"+number_accept\":1})\r\n\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Name": "VotingCandidateAccept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionAccept {\r\n    data {\r\n        votingID int\r\n    }\r\n    func closeNotification(){\r\n        var id int\r\n        id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if id > 0 {\r\n            NotificationsClose(\"notific_id\", id)\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status\").Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n        $subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Row()\r\n        if !$subject {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id}).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"votings_participants\", Int($participant_id), {decision_date:bt, decision:1})\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"votings_subject\", Int($subject[\"id\"]), {\"+number_accept\":1})\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Name": "VotingDecisionAccept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDelete {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 5\r\n        var voting map bt string\r\n        bt = BlockTime()\r\n        voting = DBFind(\"votings\").Where({id:$votingID, \"creator->member_id\":$key_id, \"status\":$INVALID}).Columns(\"id\").Row()\r\n        if !voting {\r\n            warning \"Delete voting impossible\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"votings\", $votingID, {deleted:1})\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map noteId int\r\n            note = notes[i]\r\n            noteId = Int(note[\"id\"])\r\n            NotificationsClose(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n}",
            "Name": "VotingDelete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCreate {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int\r\n        quorum int\r\n\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n    }\r\n    func trimZeroTime(s string) string{\r\n        if Contains(s, \"T00:00:00Z\"){\r\n            s = s Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5{\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n    func isCalledFromPage() bool{\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n    func fixDatetimes(){\r\n        $date_started = dateAddTime($start_date, $start_time)\r\n        $date_ended = dateAddTime($end_date, $end_time)\r\n\r\n        if UnixDateTime($date_started) == 0 || UnixDateTime($date_ended) == 0 { // invalid datetimes\r\n            if isCalledFromPage(){\r\n                var errs array\r\n                if Size($start_date) < 10 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($start_time) < 5 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($end_date) < 10 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($end_time) < 5 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                error Sprintf(\"Error create voting: %v unspecified\", Join(errs, \", \"))\r\n            }else{\r\n                $date_started = $time\r\n                $interval = Int($interval)\r\n                if $interval == 0 {\r\n                    $interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $interval\r\n                $date_started = DateTime($date_started)\r\n                $date_ended = DateTime($date_ended)\r\n            }\r\n        }\r\n        if UnixDateTime($date_started) <= $block_time{\r\n            error \"Invalid date starting\"\r\n        }\r\n        if UnixDateTime($date_started) >= UnixDateTime($date_ended){\r\n            error \"Invalid date ending\"\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        if $voting_type == 2 {\r\n            var specRules map\r\n            specRules[\"VotingTokensRefundCreate\"] = 1\r\n            specRules[\"VotingTemplateRun\"] = 1\r\n            specRules[\"VotingNodeAdd\"] = 1\r\n            if specRules[$original_contract] != 1 {\r\n                warning Sprintf(\"The voting type 'system' is not allowed to launch from %v\", $original_contract)\r\n            }\r\n        }\r\n        if ($volume < 50) || ($volume > 100) {\r\n            warning Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\r\n        }\r\n\r\n        if ($quorum < 5) || ($quorum > 100) {\r\n            warning Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\r\n        }\r\n\r\n        $key = DBFind(\"keys\").WhereId($key_id).Row()\r\n        if !$key {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n\r\n        fixDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $voting_name\r\n        voting[\"type\"] = $voting_type\r\n        voting[\"description\"] = $description\r\n        voting[\"type_participants\"] = $type_participants\r\n        voting[\"type_decision\"] = $type_decision\r\n        voting[\"volume\"] = $volume\r\n        voting[\"quorum\"] = $quorum\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"member_id\"] = $key[\"id\"]\r\n        creator[\"member_name\"] = IdToAddress($key_id)\r\n        var m map\r\n        m[\"voting\"] = voting\r\n        m[\"progress\"] = progress\r\n        m[\"flags\"] = flags\r\n        m[\"creator\"] = creator\r\n        m[\"status\"] = 1\r\n        m[\"date_started\"] = $date_started\r\n        m[\"date_ended\"] = $date_ended\r\n\r\n        votingId = DBInsert(\"votings\", m)\r\n\r\n        // if all members are voting participants\r\n        if $type_participants == 1 {\r\n            VotingInvite(\"votingID,var_id\", votingId, 0)\r\n        }\r\n        $result = votingId\r\n    }\r\n}",
            "Name": "VotingCreate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNotificationSend {\r\n    data {\r\n        votingID int\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 {\r\n            res = JSONToMap(m)\r\n        }\r\n        return res\r\n    }\r\n    conditions {\r\n        var bt string\r\n        bt = BlockTime()\r\n        $voting = DBFind(\"votings\").Columns(\"id,date_ended\").Where({id:$votingID, date_ended:[{\"$gt\":bt}]}).One(\"id\")\r\n        if !$voting {\r\n            warning \"Voting has expired. Notifications can not be sent\"\r\n        }\r\n\r\n        $voting = DBFind(\"votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where({id:$votingID, date_started:[{\"$gt\":bt}]}).Row()\r\n        if !$voting {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning \"You are not the creator of the voting\"\r\n        }\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            warning \"Notifications have already been sent\"\r\n        }\r\n\r\n        $voting_name = $voting[\"voting.name\"]\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"votings_participants\").Where({voting_id:$votingID, decision:0})\r\n        var i int\r\n        while i < Len(participants) {\r\n            var participant member params map\r\n            participant = participants[i]\r\n            member = safeJsonToMap(participant[\"member\"])\r\n            params[\"voting_id\"] = $votingID\r\n            NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"votings\", $votingID, {\"flags->notifics\":1})\r\n    }\r\n}",
            "Name": "VotingNotificationSend",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingStatusUpdate {\r\n    data {}\r\n\r\n    func notificationSend(voting map){\r\n        var title string id i lenVoters int voters array\r\n        title = voting[\"voting.name\"]\r\n        id = Int(voting[\"id\"])\r\n        voters = DBFind(\"votings_participants\").Columns(\"member->member_id\").Where({voting_id:id, decision:0})\r\n        lenVoters = Len(voters)\r\n        while i < lenVoters {\r\n            var voter memberId params map\r\n            voter = voters[i]\r\n            memberId = Int(voter[\"member.member_id\"])\r\n            params[\"voting_id\"] = id\r\n            NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", memberId, 1, \"fa-check\", \"Voting\", title, \"voting_view\", params)\r\n            i = i + 1\r\n        }\r\n    }\r\n    func changeVotings(from, to map){\r\n        var votings array i lenVotings int v map\r\n        from[\"deleted\"] = 0\r\n        votings = DBFind(\"votings\").Columns(\"id,date_started,date_ended,voting->name\").Where(from)\r\n\r\n        lenVotings = Len(votings)\r\n        while i<lenVotings{\r\n            v = votings[i]\r\n            if to[\"status\"] == $STARTED{\r\n                notificationSend(v)\r\n                to[\"flags->notifics\"] = 1\r\n            }\r\n            DBUpdate(\"votings\", Int(v[\"id\"]), to)\r\n            i=i+1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n    }\r\n    action {\r\n        var bt string\r\n        bt = BlockTime()\r\n        changeVotings({status:$WAITING, \"flags->full_data\":0}, {status:$INVALID})\r\n        changeVotings({status:$INVALID, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$WAITING, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$VALID, date_started:{\"$lte\":bt}}, {status:$STARTED})\r\n\r\n        changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}}, {status:$FINISHED})\r\n        \r\n        // changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}, \"flags->decision\":1}, {status:$FINISHED})\r\n    }\r\n}",
            "Name": "VotingStatusUpdate",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCandidates {\r\n    data {\r\n        votingID int\r\n        memberID int\r\n    }\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"members\").WhereId(kid).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"keys\").WhereId(kid).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4        \r\n        $voting = DBFind(\"votings\").Where({id:$votingID}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status\").Row()\r\n        if $voting[\"status\"] == $STARTED {\r\n            warning \"Voting already started. Can not add candidates\"\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting already finished. Can not add candidates\"\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n\r\n        if $memberID == 0 {\r\n            $memberID = $key_id\r\n        }\r\n\r\n        if DBFind(\"votings_subject\").Where({voting_id:$votingID, \"subject->member_id\":$memberID}).One(\"id\") {\r\n            warning \"This candidature for this role has already been added before\"\r\n        }\r\n\r\n        $member = getMemberInfo($memberID)\r\n        if !$member {\r\n            warning Sprintf(\"Key not found (%v)\", $memberID)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"votings_subject\", {voting_id:$votingID, subject:$member})\r\n        var m map\r\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\r\n        DBUpdate(\"votings\", $votingID, m)\r\n    }\r\n}",
            "Name": "VotingSubjectCandidates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"votings\").WhereId($votingID).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\r\n        if !$voting_map {\r\n            warning \"Voting is not found\"\r\n        }\r\n\r\n        $type_decision = $voting_map[\"voting.type_decision\"]\r\n        if $type_decision < 1 || $type_decision > 5 {\r\n            warning \"invalid type of decision\"\r\n        }\r\n\r\n        $subject_map = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flags, subject map\r\n        flags = safeJsonToMap($voting_map[\"flags\"])\r\n        if $type_decision > 2 && $type_decision <= 5 {\r\n            subject = safeJsonToMap($subject_map[\"subject\"])\r\n        }\r\n\r\n        var fullData string\r\n\r\n        if $type_decision == 1 || $type_decision == 2 {\r\n            var optional map\r\n            optional = safeJsonToMap($voting_map[\"optional\"])\r\n\r\n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 3 {\r\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 4 {\r\n            if $voting_map[\"voting.type\"] == 1{ // personal\r\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n            if $voting_map[\"voting.type\"] == 2 { // system\r\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\r\n                    fullData = 1\r\n                }\r\n            }\r\n        }\r\n\r\n        if $type_decision == 5 {\r\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if fullData == 1 {\r\n            DBUpdate(\"votings\", $votingID, {\"flags->full_data\":fullData})\r\n        }\r\n    }\r\n}",
            "Name": "VotingSubjectCheck",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectContract {\r\n    data {\r\n        votingID int\r\n\r\n        contract_accept string\r\n        contract_accept_params string \"optional\"\r\n\r\n        contract_reject string\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data\").Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var accept_params, reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = $contract_accept\r\n        subject[\"contract_accept_params\"] = accept_params\r\n        subject[\"contract_reject\"] = $contract_reject\r\n        subject[\"contract_reject_params\"] = reject_params\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\r\n        }\r\n\r\n        VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "VotingSubjectContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectDocument {\r\n    data {\r\n        votingID int\r\n        text_document string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = $text_document\r\n        subject[\"hash\"] = Sha256($text_document)\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\r\n        }\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"votings\", $votingID, {optional:optional})\r\n\r\n        VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "VotingSubjectDocument",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectFormal {\r\n    data {\r\n        votingID int\r\n\r\n        description string \"optional\"\r\n        table_to_written string\r\n        row_id string\r\n        column_name string\r\n        written_value string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject = {description:$description, table:$table_to_written, table_id:$row_id, column:$column_name, column_value:$written_value}\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\r\n        } else {\r\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\r\n        }\r\n\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"votings\", $votingID, {optional:optional})\r\n\r\n        VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "VotingSubjectFormal",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectSettings {\r\n    data {\r\n        votingID int\r\n\r\n        roleID int\r\n        vacancies int\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $vacancies < 1 {\r\n            warning \"Number of vacancies can not be less than 1\"\r\n        }\r\n\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"optional,voting->type,flags->full_data\").Row()\r\n\r\n        if !$voting {\r\n            warning \"Voting already started. Can not edit document\"\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning \"This vote is a system. Change settings not allowed\"\r\n        }\r\n        var role map\r\n        role = DBFind(\"roles\").Where({id:$roleID, deleted:0}).Row()\r\n        if !role {\r\n            warning \"Specified role not found\"\r\n        }\r\n\r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\r\n            warning \"The chosen role is not elective or has been removed\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\r\n        optional[\"role_id\"] = $roleID\r\n        optional[\"role_vacancies\"] = $vacancies\r\n\r\n        DBUpdate(\"votings\", $votingID, {optional:optional})\r\n\r\n        VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Name": "VotingSubjectSettings",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionReject {\r\n    data {\r\n        votingID int\r\n    }\r\n    func closeNotification(){\r\n        var id int\r\n        id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if id > 0 {\r\n            NotificationsClose(\"notific_id\", id)\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"voting->type_participants,voting->role_id,flags->decision,flags->notifics,status\").Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id}).One(\"id\")\r\n        if !$participant_id {\r\n            warning \"You are not a participant in this voting\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"votings_participants\", Int($participant_id), {decision_date:bt, decision:1})\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Name": "VotingDecisionReject",
            "Type": "contracts"
        }
    ]
}