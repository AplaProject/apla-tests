{
    "name": "System",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#sort#==1){\r\n\tSetVar(sort_name, \"{id:1}\")\r\n}.ElseIf(#sort#==2){\r\n\tSetVar(sort_name, \"{id:-1}\")\r\n}.ElseIf(#sort#==3){\r\n\tSetVar(sort_name, \"{name: 1}\")\r\n}.ElseIf(#sort#==4){\r\n\tSetVar(sort_name, \"{name: -1}\")\r\n}.Else{\r\n\tSetVar(sort, \"1\")\r\n\tSetVar(sort_name, \"{id:1}\") \r\n}\r\n\r\nIf(Or(#width#==12,#width#==6,#width#==4)){\r\n}.Else{\r\n\tSetVar(width, \"12\")\r\n}\r\n\r\nForm(){\r\n\tDiv(clearfix){\r\n\t\tDiv(pull-left){\r\n            DBFind(applications,apps)\r\n\t\t\tSelect(Name:AppId, Source:apps, NameColumn: name, ValueColumn: id, Value: #buffer_value_app_id#, Class: bg-gray)\r\n\t\t}\r\n\t\tDiv(pull-left){\r\n\t\t\tButton(Class: fa fa-play btn bg-gray ml-sm, Page: #admin_page#, PageParams: \"sort=#sort#,width=#width#,current_page=#current_page#\", Contract: @1SelectApp, Params: \"ApplicationId=Val(AppId)\")\r\n\t\t}\r\n\t\tDiv(pull-right){\r\n\t\t\tIf(#sort#==1){\r\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}.ElseIf(#sort#==2){\r\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}\r\n\t\t\tIf(#sort#==3){\r\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}.ElseIf(#sort#==4){\r\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}.Else{\r\n\t\t\t\tSpan(Button(Body: Sort by NAME, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(pull-right){\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==12){\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==6){\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==4){\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Type": "blocks"
        },
        {
            "Name": "export_info",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key:'export', member_id: #key_id#}).Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(pages, src_pages).Where({app_id: #buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_pages)\r\n    DBFind(blocks, src_blocks).Where({app_id: #buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_blocks)\r\n    DBFind(app_params, src_parameters).Where({app_id:#buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_parameters)\r\n    DBFind(languages, src_languages).Where({app_id:#buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_languages)\r\n    DBFind(contracts, src_contracts).Where({app_id:#buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_contracts)\r\n    DBFind(tables, src_tables).Where({app_id:#buffer_value_app_id#}).Limit(250).Order(\"name\").Count(count_tables)\r\n}\r\n\r\nDiv(panel panel-primary){\r\n    If(#buffer_value_app_id# > 0){\r\n        Div(){\r\n            Button(Body: \"Export - #buffer_value_app_name#\", Class: btn btn-primary btn-block, Page: export_download, Contract: @1Export)\r\n        }\r\n    }.Else{\r\n        Div(panel-heading, \"Export\")\r\n    }\r\n    Form(){\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Pages\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_pages# > 0){\r\n                        Span(\"(#count_pages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_pages# > 0){\r\n                        ForList(src_pages){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Blocks\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_blocks# > 0){\r\n                        Span(\"(#count_blocks#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_blocks# > 0){\r\n                        ForList(src_blocks){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Menu\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#buffer_value_app_id# > 0){\r\n                        Span(\"(#buffer_value_count_menu#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\r\n                        Span(Class: h6, Body:\"#buffer_value_menu_name#\")\r\n                    }.Else{\r\n                        Span(Class: h6, Body:\"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Parameters\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_parameters# > 0){\r\n                        Span(\"(#count_parameters#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_parameters# > 0){\r\n                        ForList(src_parameters){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Language resources\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_languages# > 0){\r\n                        Span(\"(#count_languages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_languages# > 0){\r\n                        ForList(src_languages){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"Contracts\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_contracts# > 0){\r\n                        Span(\"(#count_contracts#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_contracts# > 0){\r\n                        ForList(src_contracts){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Tables\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_tables# > 0){\r\n                        Span(\"(#count_tables#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_tables# > 0){\r\n                        ForList(src_tables){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"Nothing selected\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#buffer_value_app_id# > 0){\r\n            Div(panel-footer text-right){\r\n                Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: @1Export)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "export_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\r\n    SetVar(res_type, \"pages\")\r\n}\r\n\r\nDiv(breadcrumb){\r\n    If(#res_type#==\"pages\"){\r\n        Span(Class: text-muted, Body: \"Pages\")\r\n    }.Else{\r\n        LinkPage(Body: \"Pages\", Page: export_resources,, \"res_type=pages\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"blocks\"){\r\n        Span(Class: text-muted, Body: \"Blocks\")\r\n    }.Else{\r\n        LinkPage(Body: \"Blocks\", Page: export_resources,, \"res_type=blocks\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"menu\"){\r\n        Span(Class: text-muted, Body: \"Menu\")\r\n    }.Else{\r\n        LinkPage(Body: \"Menu\", Page: export_resources,, \"res_type=menu\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"parameters\"){\r\n        Span(Class: text-muted, Body: \"Application parameters\")\r\n    }.Else{\r\n        LinkPage(Body: \"Application parameters\", Page: export_resources,, \"res_type=parameters\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"languages\"){\r\n        Span(Class: text-muted, Body: \"Language resources\")\r\n    }.Else{\r\n        LinkPage(Body: \"Language resources\", Page: export_resources,, \"res_type=languages\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"contracts\"){\r\n        Span(Class: text-muted, Body: \"Contracts\")\r\n    }.Else{\r\n        LinkPage(Body: \"Contracts\", Page: export_resources,, \"res_type=contracts\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"tables\"){\r\n        Span(Class: text-muted, Body: \"Tables\")\r\n    }.Else{\r\n        LinkPage(Body: \"Tables\", Page: export_resources,, \"res_type=tables\")\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "pager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#, src_records).Where(#pager_where#).Count(records_count)\r\n\t\r\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\r\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\r\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\r\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\r\n\r\nIf(#remainder# != 0){\r\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\r\n}.Else{\r\n    SetVar(last_page, #count_div_limit_int#)\r\n}\r\n\r\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\r\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\r\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\r\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\r\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\r\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\r\n\r\nIf(#current_page# < 5){\r\n    If(#last_page# >= 10){\r\n        Range(src_pages, 1, 11)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#) \r\n    }\r\n}.ElseIf(#delta_last_page# < 6){\r\n    If(#range_l_max# > 0){\r\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#)\r\n    }\r\n}.Else{\r\n    Range(src_pages, #range_l#, #range_r#)\r\n}\r\n\r\nDiv(){\r\n    Span(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    ForList(src_pages){\r\n        Span(){\r\n            If(#id# == #current_page#){\r\n                Button(Body: #id#, Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n            }.Else{\r\n                Button(Body: #id#, Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n            }\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n}.Style(\"div {display:inline-block;}\")",
            "Type": "blocks"
        },
        {
            "Name": "pager_header",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#current_page# > 0){}.Else{\r\n\tSetVar(current_page, 1)\r\n}\r\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\r\nSetVar(current_page, #current_page#)",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Applications\", Page:apps_list, Icon:\"icon-folder\")\r\nMenuItem(Title:\"Ecosystem parameters\", Page:params_list, Icon:\"icon-settings\")\r\nMenuItem(Title:\"Menus\", Page:menus_list, Icon:\"icon-list\")\r\nMenuItem(Title:\"Sections\", Page:section_list, Icon:\"icon-frame\")\r\nMenuItem(Title:\"Blockcron\", Page: blockcron_list, Icon:\"icon-clock\")\r\nMenuItem(Title:\"Dashboard\", Page:admin_dashboard, Icon:\"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "admin_resources",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Contracts\", Page:app_contracts, Icon:\"icon-briefcase\")\r\nMenuItem(Title:\"Pages\", Page:app_pages, Icon:\"icon-screen-desktop\")\r\nMenuItem(Title:\"Blocks\", Page:app_blocks, Icon:\"icon-grid\")\r\nMenuItem(Title:\"Tables\", Page:app_tables, Icon:\"icon-docs\")\r\nMenuItem(Title:\"Binary data\", Page:app_binary, Icon:\"icon-layers\")\r\nMenuItem(Title:\"Language resources\", Page:app_langres, Icon:\"icon-globe\")\r\nMenuItem(Title:\"Application parameters\", Page:app_params, Icon:\"icon-wrench\")\r\n",
            "Type": "menu"
        },
        {
            "Name": "admin_dashboard",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetVar(this_page,admin_dashboard).(deleters_count,0)\r\nDBFind(contracts).Where({name:ItemChangeAppId}).Count(changer_count).Ecosystem(1)\r\nDBFind(applications,src_apps).Where({deleted:0}).Order(id).Count(apps_count)\r\nIf(And(GetVar(Restore),GetVar(Table),GetVar(Id))){\r\n    Form(){\r\n        Select(Name:AppId, NameColumn: name, ValueColumn: id, Source: src_apps, Class:mb)\r\n        Div(){\r\n            Button(Class: btn btn-default, Page: #this_page#, PageParams: \"appid=0\", Body: \"Cancel\")\r\n            If(#ecosystem_id#==1){\r\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: \"Confirm\")\r\n            }.Else{\r\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: \"Confirm\")\r\n            }\r\n        }\r\n    }\r\n}.ElseIf(GetVar(block)){\r\n    Div(breadcrumb){\r\n        LinkPage(Body:Dashboard,Page:#this_page#)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: Block: #block#)\r\n    }\r\n    Include(Name:#block#)\r\n}.Else{\r\n    DBFind(buffer_data).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#}).Vars(buffer)\r\n    If(#Single#==binaries){\r\n        Data(tables, \"Table,Page,Name\"){\r\n            binaries,app_upload_binary,\"Binaries data\"\r\n        }\r\n    }.ElseIf(#Single#==languages){\r\n        Data(tables, \"Table,Cols,Page,Name\"){\r\n            languages,\"id,app_id,name,res\",langres_add,\"Languages resources\"\r\n        }\r\n    }.Else{\r\n        Data(tables, \"Table,Cols,Page,Name\"){\r\n            contracts,\"id,app_id,name,active\",editor,\"Contracts\"\r\n            pages,\"id,app_id,name\",editor,\"Pages\"\r\n            blocks,\"id,app_id,name\",editor,\"Blocks\"\r\n            tables,\"id,app_id,name\",table_create,\"Tables\"\r\n            app_params,\"id,app_id,name,value\",app_params_edit,\"Application parameters\"\r\n        }\r\n    }\r\n    SetVar(active_btn,\"btn btn-info\").(create_icon,fa fa-plus-square).(cols,3)\r\n    If(GetVar(appid)!=\"\"){\r\n        SetVar(where,\"{app_id:#appid#}\")\r\n    }.Else{\r\n        If(#buffer_value_app_id#>0){\r\n            SetVar(appid,#buffer_value_app_id#).(where,\"{app_id:#appid#}\")\r\n        }.Else{\r\n            SetVar(where,\"{id:{ $gt:0}}\").(appid,1)\r\n        }\r\n    }\r\n    If(#appid#==0){\r\n        SetVar(application_name,trash)\r\n    }.ElseIf(#appid#>0){\r\n        DBFind(applications).WhereId(#appid#).Vars(application)\r\n    }\r\n    SetTitle(Dashboard: #application_name#)\r\n    Div(content-wrapper){\r\n        Div(panel panel-default){\r\n            If(GetVar(Single)){\r\n                Div(text-right){\r\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default btn-close fa fa-close)\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-sm-12 btn-group){\r\n                        ForList(src_apps){\r\n                            If(#id#==1){\r\n                                If(#appid#==0){\r\n                                    LinkPage(Class: #active_btn# disabled, Body: Span(Class:fa fa-trash))\r\n                                }.Else{\r\n                                    LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=0\", Body: Span(Class:fa fa-trash))\r\n                                }\r\n                            }\r\n                            If(#appid#==#id#){\r\n                                LinkPage(Class: #active_btn# disabled, Body:\"#id#:#name#\")\r\n                            }.Else{\r\n                                LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=#id#\", Body:\"#id#:#name#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(panel-body){\r\n                SetVar(limit,250)\r\n                ForList(tables){\r\n                    If(#Table#==binaries){\r\n                        DBFind(#Table#, src_table).Limit(#limit#).Order({ id: -1 }).Where(#where#).Count(items_count).Custom(_name){\r\n                            LinkPage(Page: #Page#, PageParams: \"id=#id#,application_id=#appid#\"){#name#}\r\n                        }.Custom(_img){\r\n                            Image(Src: Binary().ById(#id#), Class: preview)\r\n                        }\r\n                    }.Else{\r\n                        DBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where(#where#).Count(items_count)\r\n                    }\r\n                    Div(list-group-item clearfix){\r\n                        Div(h3 pull-left mt-lg){\r\n                            #Name#\r\n                        }\r\n                        If(#appid#>0){\r\n                            Div(pull-right mt-lg){\r\n                                If(#Table#==contracts){\r\n                                    LinkPage(Page: #Page#, PageParams: \"create=contract,appId=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==pages){\r\n                                    LinkPage(Page: #Page#, PageParams: \"create=page,appId=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==blocks){\r\n                                    LinkPage(Page: #Page#, PageParams: \"create=block,appId=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==tables){\r\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==app_params){\r\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#,create=create\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==binaries){\r\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }.ElseIf(#Table#==languages){\r\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\r\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row pd){\r\n                            Div(col-sm-12){\r\n                                If(#Table#==binaries){\r\n                                    If(#items_count#>0){\r\n                                        Div(items){\r\n                                            Table(src_table,\"=id,Edit link=_name,Download link=data,=_img\")\r\n                                        }\r\n                                    }.Else{\r\n                                        Div(text-muted h4 text-center){\r\n                                            #Name# not found\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    SetVar(value,).(res,)\r\n                                    If(#items_count#>0){\r\n                                        Div(cols){\r\n                                            ForList(src_table){\r\n                                                Div(clearfix item){\r\n                                                    Div(pull-right){\r\n                                                        If(#Table#==contracts){\r\n                                                            If(#active#==1){\r\n                                                                Span(actived,text-success mr-lg)\r\n                                                            }\r\n                                                            LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")\r\n                                                        }\r\n                                                        If(#Table#==pages){\r\n                                                            LinkPage(Class: text-muted fa fa-eye, Page: #name#)\r\n                                                            LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=page\")\r\n                                                        }\r\n                                                        If(#Table#==blocks){\r\n                                                            LinkPage(Class: text-muted fa fa-eye, Page: #this_page#, PageParams:\"block=#name#\")\r\n                                                            LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=block\")\r\n                                                        }\r\n                                                        If(#Table#==tables){\r\n                                                            LinkPage(Class: text-muted fa fa-eye, Page: table_view, PageParams: \"tabl_id=#id#,table_name=#name#\")\r\n                                                        }\r\n                                                        If(#changer_count#==1){\r\n                                                            If(#appid#==0){\r\n                                                                Button(Class: btn-link text-muted fa fa-recycle, Page: #this_page#, PageParams: \"Restore=1,Table=#Table#,Id=#id#\").Popup(30, \"Select restore target application\")\r\n                                                            }.Else{\r\n                                                                If(#ecosystem_id#==1){\r\n                                                                    Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"Confirm\", \"Cancel\")\r\n                                                                }.Else{\r\n                                                                    Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"Confirm\", \"Cancel\")\r\n\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    If(#Table#==contracts){\r\n                                                        LinkPage(Page: #Page#, PageParams: \"open=contract,name=#name#\"){#name#}\r\n                                                    }\r\n                                                    If(#Table#==pages){\r\n                                                        LinkPage(Page: #Page#, PageParams: \"open=page,name=#name#\"){#name#}\r\n                                                    }\r\n                                                    If(#Table#==blocks){\r\n                                                        LinkPage(Page: #Page#, PageParams: \"open=block,name=#name#\"){#name#}\r\n                                                    }\r\n                                                    If(#Table#==tables){\r\n                                                        LinkPage(Page: table_edit, PageParams: \"tabl_id=#id#\"){#name#}\r\n                                                    }\r\n                                                    If(#Table#==app_params){\r\n                                                        LinkPage(Page: #Page#, PageParams: \"id=#id#\"){#name#}\r\n                                                    }\r\n                                                    If(#Table#==languages){\r\n                                                        LinkPage(Page: langres_edit, PageParams: \"lang_id=#id#\"){#name#}\r\n                                                    }\r\n                                                    If(`#value#`!=\"\"){\r\n                                                        :Div(text-muted){`#value#`}.Style(max-height:1.5em;overflow:hidden;)\r\n                                                    }.ElseIf(`#res#`!=\"\"){\r\n                                                        :Div(text-muted){`#res#`}\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }.Else{\r\n                                        Div(text-muted h4 text-center){\r\n                                            #Name# not found\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer){\r\n                If(GetVar(Single)){\r\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default mr, Body: Back)\r\n                }.Else{\r\n                    Button(Page: #this_page#, PageParams: \"Single=binaries,appid=#appid#\", Class: btn btn-default mr, Body: Binaries)\r\n                    Button(Page: #this_page#, PageParams: \"Single=languages,appid=#appid#\", Class: btn btn-default, Body: Languages)\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .pull-right a {\r\n            margin-right:10px;\r\n        }\r\n        .text-muted {\r\n            color: #909fa7!important;\r\n        }\r\n        .cols {\r\n            -moz-column-count: #cols#;\r\n            -webkit-column-count: #cols#;\r\n            column-count: #cols#;\r\n        }\r\n        .item:hover {\r\n            background-color: #fafafa;\r\n        }\r\n        .items tr:hover {\r\n            background-color: #fafafa;\r\n        }\r\n        .preview {\r\n            height:30px;\r\n        }\r\n        .btn-close {\r\n            background-color: #00000000;\r\n        }\r\n    )\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "admin_index",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key: export, member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Binary data\": #application_name#)\r\n\t\tAddToolButton(Title: \"Upload binary\", Page: app_upload_binary, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\r\n\r\n\t\tSetVar(pager_table, binaries).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_binary).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_binary)\r\n\t\tSetVar(hideLink, 0)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(binaries, src_binparameters).Limit(#pager_limit#).Count(cnt).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_name){\r\n\t\t\tLinkPage(Page: app_upload_binary, PageParams: \"id=#id#,application_id=#buffer_value_app_id#\", Body: #name#)\r\n\t\t}.Custom(_img){\r\n\t\t\tDiv(pull-right){\r\n\t\t\t\tImage(Src: Binary().ById(#id#), Class: preview).Style(height: 40px; widht 40px;)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\tIf(#cnt#>0){\r\n\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-12){\r\n\t\t\t\t\t\t\t\t\t\tTable(src_binparameters,\"ID=id,Name=_name,Download link=data,=_img\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Binary data\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}\r\n",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_blocks",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Blocks\": #application_name#)\r\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\r\n\r\n\t\tSetVar(pager_table, blocks).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_blocks).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_blocks)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tForList(src_blocks){\r\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\r\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=block\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=block\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Blocks\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_contracts",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Contracts\": #application_name#)\r\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\r\n\r\n\t\tSetVar(pager_table, contracts).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_contracts).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_contracts)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tForList(src_contracts){\r\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\r\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=contract\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\r\n\t\t\t\t\t\t\t\t\t\t\tIf(#active#==1){\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\r\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Contracts\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(\"Applications\")\r\n    Div(breadcrumb){\r\n\t\tLinkPage(\"Applications\", apps_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tIf(#id# > 0){\r\n\t\t\tSpan(Class: text-muted, Body: \"Edit\")\r\n\t\t}.Else{\r\n\t\t\tSpan(Class: text-muted, Body: \"New\")\r\n\t\t}\r\n    }\r\n\t\r\n\tForm(){\r\n\t\tIf(#id# > 0){\r\n\t\t\tDBFind(applications, src_apps).Columns(\"id,name,conditions,deleted\").Where({id:#id#}).Vars(\"application\")\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Name\")\r\n\t\t\t\tInput(Name: Name, Disabled: \"true\", Value: #application_name#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\tInput(Name: Conditions, Value: #application_conditions#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(text-left col-md-6){\r\n\t\t\t\t\t\tIf(#application_deleted# == 0){\r\n\t\t\t\t\t\t\tButton(Body: \"Delete\", Class: btn btn-danger, Page: apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#application_id#,Value=1\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(text-right col-md-6){\r\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1EditApplication, Params: \"ApplicationId=#id#\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}.Else{\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Name\")\r\n\t\t\t\tInput(Name: Name)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\tInput(Name: Conditions)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tDiv(text-right){\r\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1NewApplication)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_langres",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Language resources\": #application_name#)\r\n\t\tAddToolButton(Title: \"Create\", Page: langres_add, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\r\n\r\n\t\tSetVar(pager_table, languages).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_langres).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_langres)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(languages, src_languages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tForList(src_languages){\r\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\t\tDiv(list-group-item clearfix){\r\n\t\t\t\t\t\t\t\tSpan(Class: mr-sm text-bold, Body: \"#id#\")\r\n\t\t\t\t\t\t\t\t#name#\r\n\t\t\t\t\t\t\t\tLinkPage(Class:fa fa-edit pull-right, Page: langres_edit, PageParams: \"lang_id=#id#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Language resources\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_pages",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Pages\": #application_name#)\r\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\r\n\r\n\t\tSetVar(pager_table, pages).(pager_where, {app_id:#buffer_value_app_id#}).(pager_page, app_pages).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_pages)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tForList(src_pages){\r\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\r\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=page\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=page\")).Style(margin-right: 15px;)\r\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Pages\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n\tDBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n\tDiv(content-wrapper){\r\n\t\tSetTitle(\"Application parameters\": #application_name#)\r\n\t\tAddToolButton(Title: \"Create\", Page: app_params_edit, Icon: icon-plus, PageParams: \"application_id=#application_id#,create=create\")\r\n\r\n\t\tSetVar(pager_table, app_params).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_params).(pager_limit, 50)\r\n\t\tInclude(pager_header)\r\n\r\n\t\tSetVar(admin_page, app_params)\r\n\t\tInclude(admin_link)\r\n\r\n\t\tDBFind(app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n\t\tForm(panel panel-primary){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tForList(src_appparameters){\r\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\r\n\t\t\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tDiv(col-md-8 text-right){\r\n\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: app_params_edit, PageParams: \"id=#id#\"))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer clearfix){\r\n\t\t\t\tInclude(pager)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}.Else{\r\n\tSetTitle(\"Application parameters\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n\t}\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(back_page)){}.Else{\r\n    SetVar(back_page,app_params)\r\n}\r\nDiv(content-wrapper){\r\n    If(#create# == create){\r\n        SetVar(param_name, \"New\")\r\n    }.Else{\r\n\t\tDBFind(app_params, src_params).Where({id:#id#}).Vars(\"param\")\r\n    }\r\n\t\r\n\tSetTitle(\"Application parameter\")\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage(\"Application parameters\", app_params)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: #param_name#)\r\n\t}\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Label(\"Name\")\r\n            If(#create# == create){\r\n                Input(Name: name)\r\n            }.Else{\r\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            If(#create# == create){\r\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n            }.Else{\r\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Label(\"Change conditions\")\r\n            If(#create# == create){\r\n                Input(Name: conditions)\r\n            }.Else{\r\n                Input(Name: conditions, Value: #param_conditions#)\r\n            }\r\n        }\r\n        Div(form-group text-right){\r\n            If(#create# == create){\r\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#application_id#\", Page: #back_page#)\r\n            }.Else{\r\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: #back_page#)\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_tables",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where({key: export,member_id:#key_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(applications, src_app).Where({id:#buffer_value_app_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle(\"Tables\": #application_name#)\r\n        AddToolButton(Title: \"Create\", Page: table_create, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\r\n\r\n        SetVar(pager_table, tables).(pager_where, \"{app_id:#buffer_value_app_id#}\").(pager_page, app_tables).(pager_limit, 50)\r\n        Include(pager_header)\r\n\r\n        SetVar(admin_page, app_tables)\r\n        Include(admin_link)\r\n\r\n        DBFind(tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_tables){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        LinkPage(Page: table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"tabl_id=#id#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: table_edit, PageParams: \"tabl_id=#id#\"))\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\r\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle(\"Tables\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_upload_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(\"Binary data\")\r\n    Div(breadcrumb){\r\n        LinkPage(\"Binary data\", app_binary)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tIf(#id# > 0){\r\n\t\t\tSpan(\"Edit\", text-muted)\r\n\t\t\tDBFind(binaries).Columns(name).Where({id:#id#}).Vars(binary)\r\n\t\t}.Else{\r\n\t\t\tSpan(\"Upload\", text-muted)\r\n\t\t}\r\n    }\r\n\t\r\n\tForm(){\r\n\t\tDiv(form-group){\r\n\t\t\tDiv(text-left){\r\n\t\t\t\tLabel(\"Name\")\r\n\t\t\t}\r\n\t\t\tIf(#id# > 0){\r\n\t\t\t\tInput(Name: name, Disabled: disabled, Value: #binary_name#)\r\n\t\t\t}.Else{\r\n\t\t\t\tInput(Name: name)\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tDiv(text-left){\r\n\t\t\t\tLabel(\"File\")\r\n\t\t\t}\r\n\t\t\tInput(Name: databin, Type: file)\r\n\t\t}\r\n\t\tDiv(form-group text-right){\r\n\t\t\tButton(Body: \"Upload\", Contract: @1UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),ApplicationId=#application_id#,Data=Val(databin),MemberID=#key_id#\", Page: app_binary)\r\n\t\t}\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "apps_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    If(#deleted# == deleted){\r\n        SetTitle(\"Inactive applications\")\r\n        Div(breadcrumb){\r\n            LinkPage(\"Applications\", apps_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: \"Inactive applications\")\r\n        }\r\n        DBFind(applications, src_applications).Where({deleted:1}).Order(\"id\").Count(countvar).Custom(_actions){\r\n            Button(Class: btn btn-link, Page: apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#id#\", Body: \"Restore\")\r\n        }\r\n        If(#countvar# > 0) {\r\n            Table(Source: src_applications, Columns: \"ID=id,Name=name,Conditions=conditions,=_actions\")\r\n        }.Else{\r\n            Div(content-wrapper){\r\n                Span(Class: text-muted, Body: \"You don't have any inactive applications\")\r\n            }\r\n        }\r\n    }.Else{\r\n        SetTitle(\"Applications\")\r\n        Div(breadcrumb){\r\n            Span(Class: text-muted, Body: \"This section is used to select installed applications\")\r\n        }\r\n\t\tAddToolButton(Title: \"Import\", Page: import_upload, Icon: icon-cloud-upload)\r\n        AddToolButton(Title: \"Inactive apps\", Page: apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\r\n        AddToolButton(Title: \"Create\", Page: app_edit, Icon: icon-plus)\r\n\r\n        DBFind(buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#}).Vars(buffer)\r\n        DBFind(applications, src_applications).Where({deleted:0}).Order(\"id\").Custom(_export){\r\n            Button(Class: btn btn-link, Contract: @1ExportNewApp, Params: \"ApplicationId=#id#\", Page: export_resources, Body: \"Export\")\r\n        }.Custom(custom_name){\r\n            If(#id#==#buffer_value_app_id#){\r\n                Button(Class: btn btn-link, Page: app_contracts, Body: #name#)\r\n            }.Else{\r\n                Button(Class: btn btn-link, Contract: @1SelectApp, Params: \"ApplicationId=#id#\", Page: app_contracts, Body: #name#)\r\n            }  \r\n        }.Custom(custom_actions){\r\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: app_edit, PageParams: \"id=#id#\")\r\n        }\r\n\r\n        Table(Source: src_applications, Columns: \"ID=id,Name=custom_name,Conditions=conditions,Export=_export,=custom_actions\")\r\n    }\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:15px;\r\n        text-align:right;\r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "blockcron_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Delayed contract)\r\n    Div(breadcrumb){\r\n\t\tLinkPage(\"Delayed contract\", blockcron_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tIf(#id# > 0){\r\n\t\t\tSpan(Class: text-muted, Body: \"Edit\")\r\n\t\t}.Else{\r\n\t\t\tSpan(Class: text-muted, Body: \"New\")\r\n\t\t}\r\n    }\r\n\t\r\n\tForm(){\r\n\t\tIf(#id# > 0){\r\n\t\t\tDBFind(Name: delayed_contracts).Where({id:#id#}).Vars(delayed_contract)\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Contract\")\r\n\t\t\t\tInput(Name: ContName, Disabled: \"true\", Value: #delayed_contract_contract#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Start block\")\r\n\t\t\t\tInput(Name: StartBlock, Type: number, Value: #delayed_contract_block_id#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Interval\")\r\n\t\t\t\tInput(Name: EveryBlock, Type: number, Value: #delayed_contract_every_block#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Limit\")\r\n\t\t\t\tInput(Name: Limit, Type: number, Value: #delayed_contract_limit#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Conditions\")\r\n\t\t\t\tInput(Name: Conditions, Value: #delayed_contract_conditions#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(text-left col-md-6){\r\n\t\t\t\t\t\tButton(Body: \"Delete\", Class: btn btn-danger, Page: blockcron_list, Contract: @1EditBlockCron, Params: \"Id=#id#,Deleted=1\").Alert(Text: \"Delete delayed contract?\",ConfirmButton: \"Yes\", CancelButton: \"No\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(text-right col-md-6){\r\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: blockcron_list, Contract: @1EditBlockCron, Params: \"Id=#id#\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}.Else{\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Contract\")\r\n\t\t\t\tInput(Name: ContName)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Start block\")\r\n\t\t\t\tInput(Name: StartBlock, Type: number)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Interval\")\r\n\t\t\t\tInput(Name: EveryBlock, Type: number)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Limit\")\r\n\t\t\t\tInput(Name: Limit, Type: number)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Conditions\")\r\n\t\t\t\tInput(Name: Conditions)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tDiv(text-right){\r\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: blockcron_list, Contract: @1NewBlockCron)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "blockcron_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle(Blockcron)\r\n    AddToolButton(Title: Create, Icon: icon-plus, Page: blockcron_edit)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the delayed contracts\")\r\n\t}\r\n\r\n    DBFind(delayed_contracts,src_cron).Where({\"deleted\":\"false\"}).Order({\"id\":1}).Custom(_actions){\r\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: blockcron_edit, PageParams: \"id=#id#\")\r\n    }.Custom(_next_block){\r\n        If(Or(#counter# < #limit#, #limit# == 0)){\r\n            Span(Class: text-warning, Body: #block_id#)\r\n        }.Else{\r\n            Span(Class: text-success, Body: \"Done\")\r\n        }\r\n    }\r\n\r\n    Table(src_cron, \"ID=id,Contract=contract,Interval=every_block,Limit=limit,Conditions=conditions,Next block to start=_next_block,Count of starts=counter,=_actions\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(\"Tables\")\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tLinkPage(\"Tables\", app_tables)\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tSpan(\"Add column\", text-muted)\r\n\t\t}\r\n\t}\r\n\r\n\tForm(panel panel-default){\r\n\t\tDiv(panel-body){\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Column\")\r\n\t\t\t\tInput(Name: ColumnName)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tData(src_type,\"type,name\"){\r\n\t\t\t\t\ttext,\"Text\"\r\n\t\t\t\t\tnumber,\"Number\"\r\n\t\t\t\t\tvarchar,\"Varchar\"\r\n\t\t\t\t\tdatetime,\"Date/Time\"\r\n\t\t\t\t\tmoney,\"Money\"\r\n\t\t\t\t\tdouble,\"Double\"\r\n\t\t\t\t\tcharacter,\"Character\"\r\n\t\t\t\t\tjson,\"JSON\"\r\n\t\t\t\t}\r\n\t\t\t\tLabel(\"Type\")\r\n\t\t\t\tSelect(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type, Value:\"text\")\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Update\")\r\n\t\t\t\tInput(Name: UpdateColumn, Value: \"true\")\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Read\")\r\n\t\t\t\tInput(Name: ReadColumn, Value: \"true\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(panel-footer clearfix text-right){\r\n\t\t\tButton(Body: \"Add column\", Contract: @1NewColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(\"Edit column\")\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tLinkPage(\"Tables\", app_tables)\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tSpan(\"Edit column\", text-muted)\r\n\t\t}\r\n\t}\r\n\r\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).WhereId(#tabl_id#)\r\n\tJsonToSource(src_columns, #pre_columns#)\r\n\tForm(panel panel-default){\r\n\t\tDiv(panel-body){\r\n\t\t\tForList(src_columns){\r\n\t\t\t\tIf(#key# == #name_column#){\r\n\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\tLabel(\"Column\")\r\n\t\t\t\t\t\tInput(Name: ColumnName, Disabled: \"true\", Value: #name_column#)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\tLabel(\"Type\")\r\n\t\t\t\t\t\tSetVar(col_type, GetColumnType(#pre_name#, #key#))\r\n\t\t\t\t\t\tIf(#col_type# == character){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Character\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == text){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Text\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == number){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Number\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == money){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Money\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == varchar){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Varchar\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == datetime){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Date/Time\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == double){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Double\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == json){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"JSON\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == bytea){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"Binary Data\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tIf(#col_type# == uuid){\r\n\t\t\t\t\t\t\tSetVar(input_type, \"UUID\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tInput(Name: Coltype, Disabled: \"true\", Value: #input_type#)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\tLabel(\"Update\")\r\n\t\t\t\t\t\tInput(Name: UpdateColumn)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\tLabel(\"Read\")\r\n\t\t\t\t\t\tInput(Name: ReadColumn)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(panel-footer clearfix text-right){\r\n\t\t\tButton(Body: \"Save\", Contract: @1EditColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n\tDiv(panel panel-primary){\r\n\t\tDiv(list-group-item text-center){\r\n\t\t\tP(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\r\n\t\t}\r\n\t\tDiv(list-group-item){\r\n\t\t\tSpan(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem. Creating and editing applications, modifying ecosystem parameters, etc. \")\r\n\t\t\tSpan(Class: h3, Body: \"To get started, you can download the finished applications from the\")\r\n\t\t\tSpan(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\r\n\t\t\tSpan(Class: h3, Body: \"and install them using the Import service. \")\r\n\t\t\tSpan(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\r\n\t\t\tSpan(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\r\n\t\t\tSpan(Class: h3, Body: \"Documentation \")\r\n\t\t\tSpan(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\r\n\t\t}\r\n\t\tDiv(panel-footer text-right clearfix){\r\n\t\t\tDiv(pull-left){\r\n\t\t\t\tButton(Body: Ecosystem parameters, Class: btn btn-default, Page: params_list)\r\n\t\t\t}.Style(margin-right: 20px;)\r\n\t\t\tDiv(pull-left){\r\n\t\t\t\tButton(Body: Dashboard, Class: btn btn-default, Page: admin_dashboard)          \r\n\t\t\t}\r\n\t\t\tButton(Body: Import, Class: btn btn-primary, Page: import_upload)\r\n\t\t}\r\n\t}\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "export_download",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle(\"Export\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\r\n    }\r\n\r\n    DBFind(binaries, src_binaries).Where({name: export, member_id:#key_id#, app_id:1}).Custom(app_name){\r\n        DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name\").Where({key: export,member_id:#key_id#}).Vars(buffer)\r\n        Span(#buffer_value_app_name#)\r\n    }\r\n\r\n    Table(Source: src_binaries, \"Application=app_name,=data\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc;\r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr > *:first-child {\r\n            padding-left:20px;\r\n        }\r\n        tr > *:last-child {\r\n            padding-right:20px;\r\n            text-align:right;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        }\r\n    )\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "export_resources",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetVar(pager_limit, 25).(pager_page, export_resources)\r\n    If(GetVar(res_type)){\r\n\t\tSetVar(page_params,`{\"res_type\":\"#res_type#\"}`)\r\n\t}.Else{\r\n\t\tSetVar(res_type,)\r\n        JsonToSource(src_params, #page_params#)\r\n        ForList(src_params){\r\n\t\t\tIf(#key#==res_type){\r\n\t\t\t\tSetVar(res_type,#value#)\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    SetTitle(\"Application Export\")\r\n    Div(breadcrumb text-muted){\r\n        Select the application which do you want to export and proceed to the payload generation process\r\n    }\r\n    DBFind(buffer_data).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#}).Vars(buffer)\r\n\r\n    Include(export_link)\r\n\r\n    If(#buffer_value_app_id# > 0){\r\n        If(#res_type#==\"pages\"){\r\n            SetVar(pager_table, pages).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(pages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"blocks\"){\r\n            SetVar(pager_table, blocks).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(blocks, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"menu\"){\r\n            SetVar(pager_table, menu).(pager_where, \"{id: {$in: [#buffer_value_menu_id#]}}\")\r\n            Include(pager_header)\r\n            DBFind(menu, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({id: {$in: [#buffer_value_menu_id#]}}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"parameters\"){\r\n            SetVar(pager_table, app_params).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(app_params, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"languages\"){\r\n            SetVar(pager_table, languages).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(languages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"contracts\"){\r\n            SetVar(pager_table, contracts).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(contracts, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"tables\"){\r\n            SetVar(pager_table, tables).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(pager_header)\r\n            DBFind(tables, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-9){\r\n            Table(src_pages, \"ID=id,Name=name,=_cbox\")\r\n            If(#pages_count#>#pager_limit#){\r\n                Include(pager)\r\n            }\r\n        }\r\n        Div(col-md-3){\r\n            Include(export_info)\r\n        }\r\n    }\r\n\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n        padding: 8px 20px !important;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:15px;\r\n        width: 50px;\r\n        text-align:right;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "history",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\r\n    If(GetVar(type) == page){\r\n        DBFind(pages, src_res).Where({id:#id#}).Limit(1).Vars(\"res\")\r\n        SetTitle(\"Page history\": #res_name#)\r\n    }\r\n    If(GetVar(type) == block){\r\n        DBFind(blocks, src_res).Where({id:#id#}).Limit(1).Vars(\"res\")\r\n        SetTitle(\"Block history\": #res_name#)\r\n    }\r\n    If(GetVar(type) == contract){\r\n        DBFind(contracts, src_res).Where({id:#id#}).Limit(1).Vars(\"res\")\r\n        SetTitle(\"Contract history\": #res_name#)\r\n    }\r\n    If(GetVar(type) == menu){\r\n        DBFind(menu, src_res).Where({id:#id#}).Limit(1).Vars(\"res\")\r\n        SetTitle(\"Menu history\": #res_name#)\r\n    }\r\n\r\n\r\n\r\n    SetVar(admin_page, page_history)\r\n    If(#sort#==1){\r\n        SetVar(sort_name, \"id asc\")\r\n    }.ElseIf(#sort#==2){\r\n        SetVar(sort_name, \"id desc\")\r\n    }.ElseIf(#sort#==3){\r\n        SetVar(sort_name, \"name asc\")\r\n    }.ElseIf(#sort#==4){\r\n        SetVar(sort_name, \"name desc\")\r\n    }.Else{\r\n        SetVar(sort, \"1\")\r\n        SetVar(sort_name, \"id asc\")\r\n    }\r\n\r\n    If(GetVar(type) == page){\r\n        GetHistory(Source: src_history, Name:pages, Id: #id#)\r\n    }\r\n    If(GetVar(type) == block){\r\n        GetHistory(Source: src_history, Name: blocks, Id: #id#)\r\n    }\r\n    If(GetVar(type) == contract){\r\n        GetHistory(Source: src_history, Name: contracts, Id: #id#)\r\n    }\r\n    If(GetVar(type) == menu){\r\n        GetHistory(Source: src_history, Name: menu, Id: #id#)\r\n    }\r\n\r\n\r\n    If(Or(#width#==12,#width#==6,#width#==4)){\r\n    }.Else{\r\n        SetVar(width, \"12\")\r\n    }\r\n\r\n    Form(){\r\n        Div(clearfix){\r\n            Div(pull-right){\r\n                If(#width#==12){\r\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n                If(#width#==6){\r\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n                If(#width#==4){\r\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                ForList(Source: src_history){\r\n                    Div(col-md-#width# col-sm-12){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-1){\r\n                                    Span(Class: h5, Body: \"#src_history_index#\")\r\n                                }\r\n                                Div(col-md-3){\r\n                                    Span(Class: h5, Body: \"#name#\")\r\n                                }\r\n                                Div(col-md-4){\r\n                                    Span(Class: h5, Body: \"#conditions#\")\r\n                                }\r\n                                Div(col-md-4){\r\n                                    Div(pull-right){\r\n                                        Button(Body: Em(Class: fa fa-recycle), Class: btn btn-primary, Page: history, PageParams: \"width=#width#,id=#id#,type=#type#\", Contract: @1Restore, Params: \"Id=#id#,IdHistory=#src_history_index#,Type=#type#\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_app",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(buffer_data).Columns(\"id,value->name,value->data\").Where({key:import, member_id:#key_id#}).Vars(import)\r\n    DBFind(buffer_data).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#}).Vars(info)\r\n\r\n    SetTitle(\"Import - #info_value_app_name#\")\r\n    Data(data_info, \"DataName,DataCount,DataInfo\"){\r\n        Pages,\"#info_value_pages_count#\",\"#info_value_pages#\"\r\n        Blocks,\"#info_value_blocks_count#\",\"#info_value_blocks#\"\r\n        Menu,\"#info_value_menu_count#\",\"#info_value_menu#\"\r\n        Parameters,\"#info_value_parameters_count#\",\"#info_value_parameters#\"\r\n        Language resources,\"#info_value_languages_count#\",\"#info_value_languages#\"\r\n        Contracts,\"#info_value_contracts_count#\",\"#info_value_contracts#\"\r\n        Tables,\"#info_value_tables_count#\",\"#info_value_tables#\"\r\n    }\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Your data that you can import\")\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        ForList(data_info){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-10 mc-sm text-left){\r\n                        Span(Class: text-bold, Body: \"#DataName#\")\r\n                    }\r\n                    Div(col-md-2 mc-sm text-right){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: text-bold, Body: \"(#DataCount#)\")\r\n                        }.Else{\r\n                            Span(Class: text-muted, Body: \"(0)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-12 mc-sm text-left){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: h6, Body: \"#DataInfo#\")\r\n                        }.Else{\r\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#import_id# > 0){\r\n            Div(list-group-item text-right){\r\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(@1Import, \"#import_value_data#\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_upload",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(\"Import\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(list-group-item){\r\n            Input(Name: input_file, Type: file)\r\n        }\r\n        Div(list-group-item text-right){\r\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: import_app)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(application_id)){}.Else{\r\n    DBFind(buffer_data).Columns(\"value->app_id\").Where({key: export, member_id:#key_id#}).Vars(buffer)\r\n    If(#buffer_value_app_id#>0){\r\n        SetVar(application_id,#buffer_value_app_id#)\r\n    }.Else{\r\n        SetVar(application_id,1)\r\n    }\r\n}\r\nIf(GetVar(name)){}.Else{\r\n    SetVar(name,)\r\n}\r\nDiv(content-wrapper){\r\n    SetTitle(\"Language resources\")\r\n    Div(Class: breadcrumb){\r\n        LinkPage(\"Language resources\", app_langres)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: \"Create\")\r\n    }\r\n\r\n    Form(panel panel-default){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Label(\"Name\")\r\n                    Input(Name:Name, Value:#name#)\r\n                }\r\n            }\r\n            Div(row text-muted){\r\n                Div(col-md-1 mt-lg){\r\n                    Label(){Locale}\r\n                }\r\n                Div(col-md-10 mt-lg){\r\n                    Label(){Value}\r\n                }\r\n                Div(col-md-1 mt-lg){\r\n                    Label(){Action}\r\n                }\r\n            }\r\n            If(GetVar(cs)==\"\"){\r\n                SetVar(cs,0)\r\n            }\r\n            If(#del# == 1){\r\n                SetVar(cs,Calculate(#cs# - 1))\r\n            }.Else{\r\n                SetVar(cs,Calculate(#cs# + 1))\r\n            }\r\n            Range(params_range, 0, #cs#)\r\n            ForList(Source: params_range){\r\n                Div(row mt-sm){\r\n                    Div(col-md-1){\r\n                        Input(Name:LocaleArr)\r\n                    }.Style(input {padding: 6px;text-align:center;})\r\n                    Div(col-md-10){\r\n                        Input(Name:ValueArr)\r\n                    }\r\n                    Div(col-md-1){\r\n                        If(And(#cs#==#params_range_index#,#cs#>1)){\r\n                            Button(Class:fa fa-trash btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: langres_add)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    LinkPage(Body: \"Add localization\", Page: langres_add, PageParams:\"cs=#cs#,application_id=#application_id#\")\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: \"Save\", Class: btn btn-primary, Contract: @1NewLangJoint, Page: app_langres, Params: \"ApplicationId=#application_id#\")\r\n        }\r\n    }\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(\"Language resources\")\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage(\"Language resources\", app_langres)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: \"Edit\")\r\n\t}\r\n\t\r\n\tForm(panel panel-default){\r\n\t\tDiv(panel-body){\r\n\t\t\tDBFind(languages, src_leng).Vars(pre).WhereId(#lang_id#)\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12){\r\n\t\t\t\t\tLabel(\"Name\")\r\n\t\t\t\t\tInput(Name: LangName, Disabled: \"true\", Value: #pre_name#)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-1 mt-lg){\r\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Locale\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-10 mt-lg){\r\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Value\")\r\n\t\t\t\t}\r\n\t\t\t\tDiv(col-md-1 mt-lg){\r\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tJsonToSource(pv, #pre_res#)\r\n\t\t\tForList(Source: pv, Index:s_ind){\r\n\t\t\t\tSetVar(max_sec, #s_ind#)\r\n\t\t\t}\r\n\t\t\tIf(GetVar(cs)==\"\"){\r\n\t\t\t\tSetVar(cs, #max_sec#)\r\n\t\t\t}\r\n\t\t\tIf(Or(#del_flag#==1,#del_data#>0)){\r\n\t\t\t\tSetVar(cs, Calculate(Exp:#cs#-1, Type: int))\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSetVar(next_sec, Calculate(Exp:#cs#+1, Type: int))\r\n\t\t\tSetVar(data_sec, Calculate(Exp:#cs#-#max_sec#, Type: int))\r\n\r\n\t\t\tForList(Source: pv, Index:s_ind){\r\n\t\t\t\tIf(#s_ind#>#cs#){\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\t\tInput(Name: LocaleArr, Value: `#key#`)\r\n\t\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\r\n\t\t\t\t\t\tDiv(col-md-10 mt-sm){\r\n\t\t\t\t\t\t\tInput(Name: ValueArr, Value: `#value#`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\t\tIf(And(#s_ind#>1,#s_ind#==#cs#)){\r\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_data=#s_ind#\", Page: langres_edit)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tRange(params_range, #max_sec#, #cs#)\r\n\t\t\tForList(Source: params_range, Index:s_ind){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\tInput(Name:LocaleArr)\r\n\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\r\n\t\t\t\t\tDiv(col-md-10 mt-sm){\r\n\t\t\t\t\t\tInput(Name:ValueArr)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\tIf(#s_ind#==#data_sec#){\r\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_flag=1\", Page: langres_edit)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(row){\r\n\t\t\t\tDiv(col-md-12 mt-lg){\r\n\t\t\t        LinkPage(Body: \"Add localization\", Page: langres_edit, PageParams: \"lang_id=#lang_id#,cs=#next_sec#\")\r\n                }\r\n            }\r\n\t\t}\r\n\t\tDiv(panel-footer text-right){\r\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditLangJoint, Params: \"Id=#lang_id#\", Page: app_langres)\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "menus_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle(\"Menu\")\r\n    AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menus\")\r\n\t}\r\n\r\n    DBFind(menu, src_menus).Limit(250).Order(\"id\").Custom(action){\r\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\r\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\r\n    }\r\n\r\n    Table(src_menus, \"ID=id,Name=name,Title=title,Conditions=conditions,=action\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tIf(#stylesheet# == stylesheet){\r\n\t\tDBFind(parameters, src_params).Where({name: #stylesheet#}).Vars(\"param\")\r\n\t}.Else{\r\n\t\tIf(#id#>0){\r\n\t\t\tDBFind(parameters, src_params).WhereId(#id#).Vars(\"param\")\r\n\t\t}.Else{\r\n\t\t\tSetVar(param_name, \"New\")\r\n\t\t}\r\n\t}\r\n\r\n\tSetTitle(\"Ecosystem parameters\")\r\n    Div(Class: breadcrumb){\r\n        LinkPage(\"Ecosystem parameters\", params_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #param_name#)\r\n    }\r\n\t\r\n\tForm(){\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Name\")\r\n\t\t\tIf(#param_id#>0){\r\n\t\t\t\tInput(Name: name, Value: #param_name#, Disabled: \"true\")\r\n\t\t\t}.Else{\r\n\t\t\t\tInput(Name: name)\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tIf(#param_id#>0){\r\n\t\t\t\tInput(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\r\n\t\t\t}.Else{\r\n\t\t\t\tInput(Type: textarea, Name: value).Style(height: 500px !important;)\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Change conditions\")\r\n\t\t\tIf(#param_id#>0){\r\n\t\t\t\tInput(Name: conditions, Value: #param_conditions#)\r\n\t\t\t}.Else{\r\n\t\t\t\tInput(Name: conditions)\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(form-group text-right){\r\n\t\t\tIf(#param_id#>0){\r\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\r\n\t\t\t}.Else{\r\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle(\"Ecosystem parameters\")\r\n    AddToolButton(Title: \"Manage stylesheet\", Page: params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\r\n    AddToolButton(Title: \"Create\", Page: params_edit, Icon: icon-plus)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\r\n    }\r\n\r\n    DBFind(parameters, src_appparameters).Order(\"id\").Custom(custom_actions){\r\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: params_edit, PageParams: \"id=#id#\")\r\n    }\r\n\r\n    Table(src_appparameters, \"ID=id,Name=name,Value=value,Conditions=conditions,=custom_actions\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc;\r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr > *:first-child {\r\n            padding-left:20px;\r\n            width: 80px;\r\n        }\r\n        tr > *:last-child {\r\n            padding-right:30px;\r\n            text-align:right;\r\n            width: 100px;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        }\r\n    )\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "properties_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\r\n\tSetTitle(\"Edit properties\")\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tIf(#type# == page){\r\n\t\t\t\tLinkPage(\"Pages\", app_pages)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(\"Edit page\", text-muted)\r\n\t\t\t\tDBFind(Name: pages, Source: src_page).WhereId(#edit_property_id#).Vars(item)\r\n\t\t\t\tDBFind(menu, src_menus)\r\n\t\t\t}\r\n\t\t\tIf(#type# == contract){\r\n\t\t\t\tDBFind(Name: contracts, Source: src_contract).Columns(\"id,name,value,wallet_id,token_id,active,conditions,app_id,confirmation,confirmation->title,confirmation->params\").WhereId(#edit_property_id#).Vars(item)\r\n\t\t\t\tIf(#sig# == 1){\r\n\t\t\t\t\tLinkPage(\"Contracts\", app_contracts)\r\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\t\r\n\t\t\t\t\tLinkPage(\"Edit contract\",properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\")\r\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\t\tSpan(\"Signature\", text-muted)\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tAddToolButton(Title: \"Signature\", Page: properties_edit, Icon: icon-plus, PageParams: \"edit_property_id=#edit_property_id#,type=#type#,sig=1\")\r\n\t\t\t\t\tLinkPage(\"Contracts\", app_contracts)\r\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\t\tSpan(\"Edit contract\", text-muted)\r\n\t\t\t\t}\r\n\t\t\t}\r\n            If(#type# == block){\r\n\t\t\t\tLinkPage(\"Blocks\", app_blocks)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(\"Edit block\", text-muted)\r\n\t\t\t\tDBFind(Name: blocks, Source: src_block).WhereId(#edit_property_id#).Vars(item)\r\n\t\t\t}\r\n\t\t\tIf(#type# == menu){\r\n\t\t\t\tLinkPage(\"Menu\", menus_list)\r\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\t\tSpan(\"Edit menu\", text-muted)\r\n\t\t\t\tDBFind(Name: menu, Source: src_menu).WhereId(#edit_property_id#).Vars(item)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    Form(){\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Name\")\r\n\t\t\tInput(Name: Name, Value: #item_name#, Disabled: \"true\")\r\n\t\t}\r\n\t\tIf(#type# == page){\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Menu\")\r\n\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group text-right){\r\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_pages, Contract: @1EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#type# == contract){\r\n\t\t\tIf(#sig# == 1){\r\n\t\t\t\tDiv(form-group){\r\n\t\t\t\t\tIf(#item_confirmation#){\r\n\t\t\t\t\t\tLabel(\"Title of confirmation\")\r\n\t\t\t\t\t\tInput(Name: Title, Value: #item_confirmation_title#)\r\n\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\tLabel(\"Title of confirmation\")\r\n\t\t\t\t\t\tInput(Name: Title, Placeholder: \"Title\")\r\n\t\t\t\t\t}\r\n            \t}\r\n\t\t\t\tIf(And(#item_confirmation#,#item_confirmation# !=\"{}\")){\r\n\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\tLabel(\"Parameters\")\r\n\t\t\t\t\t\tInput(Name: Parameter, Value: #item_confirmation_params#)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-12 mt-lg){\r\n\t\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary pull-right, Contract: @1EditSignJoint, Page: properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\",Params: \"Id=#item_id#\")\r\n\t\t\t\t\t\t\tButton(Body: \"Delete confirmation\", Class: btn btn-danger pull-left, Contract: @1NewSign, Page: properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\",Params: \"Value={}\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-4){\r\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Parameter\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-7){\r\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Value\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-1){\r\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Action\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tIf(GetVar(cs)==\"\"){\r\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tIf(#del# == 1){\r\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\r\n\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\r\n\t\t\t\t\t}\r\n\t\t\t\t\tRange(params_range, 0, #cs#)\r\n\t\t\t\t\tForList(Source: params_range){\r\n\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\tDiv(col-md-4 mt-sm){\r\n\t\t\t\t\t\t\t\tInput(Name:ParamArr)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-7 mt-sm){\r\n\t\t\t\t\t\t\t\tInput(Name:ValueArr)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#,#cs#>1)){\r\n\t\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,edit_property_id=#edit_property_id#,type=#type#,sig=1\", Page: properties_edit)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-12 mt-lg){\r\n\t\t\t\t\t\t\tLinkPage(Body: \"Add parameter\", Page: properties_edit, PageParams:\"cs=#cs#,edit_property_id=#edit_property_id#,type=#type#,sig=1\")\r\n\t\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary pull-right, Contract: @1NewSignJoint, Page: properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}.Else{\r\n\t\t\t\tDiv(form-group){\r\n\t\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\r\n\t\t\t\t}\r\n\t\t\t\tDiv(form-group){\r\n\t\t\t\t\tLabel(\"Wallet\")\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-10){\r\n\t\t\t\t\t\t\tSetVar(address_item_wallet_id, Address(#item_wallet_id#))\r\n\t\t\t\t\t\t\tInput(Name: Wallet,Value: #address_item_wallet_id#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-2){\r\n\t\t\t\t\t\t\tIf(#item_active# == 0){\r\n\t\t\t\t\t\t\t\tButton(Body: \"Bind\", Class: btn btn-primary btn-block, Contract: @1ActivateContract, Params: \"Id=#edit_property_id#\", Page:app_contracts)\r\n\t\t\t\t\t\t\t}.Else{\r\n\t\t\t\t\t\t\t\tButton(Body: \"Unbind\", Class: btn btn-primary btn-block, Contract: @1DeactivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDiv(form-group text-right){\r\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_contracts, Contract: @1EditContract, Params: \"Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#type# == block){\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group text-right){\r\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_blocks, Contract: @1EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tIf(#type# == menu){\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Menu title\")\r\n\t\t\t\tInput(Name: Title, Value: #item_title#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group){\r\n\t\t\t\tLabel(\"Change conditions\")\r\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\r\n\t\t\t}\r\n\t\t\tDiv(form-group text-right){\r\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: menus_list, Contract: @1EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_access",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(sections).WhereId(#id#).Vars(section)\r\nDiv(content-wrapper){\r\n\tSetTitle(\"Access Rights\")\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage(\"Sections\", section_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: #section_title#)\r\n\t}\r\n\tForm(){\r\n\t\tDiv(form-group){\r\n            Label(\"Roles access\")\r\n            DBFind(roles,src_roles).Where({deleted:0}).Columns(\"id,role_name\").Order(id)\r\n            Div(input-group mb-sm){\r\n                Select(Name: access_rid, Source:src_roles, NameColumn:role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n\t\t\t\t\tButton(Class: btn btn-primary fa fa-plus, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=Val(access_rid),operation=add\")\r\n                }\r\n            }\r\n            DBFind(\"sections\").Where({\"id\":#section_id#}).Columns(\"roles_access\").Vars(json)\r\n                If(#json_roles_access#==\"[]\"){\r\n                    Span(Body: \"This section is avaliable for everyone\", Class: m0 text-muted)\r\n                }.Else{\r\n                    DBFind(roles,src_roles_access).Where({id:{\"$in\":#json_roles_access#}}).Columns(\"id,role_name\")\r\n                    ForList(src_roles_access){\r\n                        If(#role_id#==1){\r\n                            Button(Class: btn btn-info mr-sm mb-sm, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\r\n                        }.Else{\r\n                            Button(Class: btn btn-default mr-sm mb-sm, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\r\n                        }\r\n                    }\r\n                }\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(\"New section\")\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage(\"Sections\", section_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: \"New section\")\r\n\t}\r\n\t\r\n\tForm(){\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Title\")\r\n\t\t\tInput(Name: title)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tData(src_status, \"name,value\",\r\n\t\t\t\tHidden section,0\r\n\t\t\t\tRegular section,1\r\n\t\t\t\tMain section,2\r\n\t\t\t)\r\n\t\t\tLabel(\"Status\")\r\n\t\t\tSelect(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\r\n\t\t\tSpan(Body: \"Section with \"\"Main section\"\" status must be only one\", Class: m0 text-muted)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Link\")\r\n\t\t\tInput(Name: urlname)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Main page\")\r\n\t\t\tInput(Name: page)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1NewSection, Page: section_list)\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(sections).WhereId(#id#).Vars(section)\r\nDiv(content-wrapper){\r\n\tSetTitle(\"Edit section\")\r\n\tDiv(Class: breadcrumb){\r\n\t\tLinkPage(\"Sections\", section_list)\r\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\tSpan(Class: text-muted, Body: #section_title#)\r\n\t}\r\n\t\r\n\tForm(){\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Title\")\r\n\t\t\tInput(Name: title, Value: #section_title#)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tData(src_status, \"name,value\",\r\n\t\t\t\tHidden section,0\r\n\t\t\t\tRegular section,1\r\n\t\t\t\tMain section,2\r\n\t\t\t)\r\n\t\t\tLabel(\"Status\")\r\n\t\t\tSelect(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\r\n\t\t\tSpan(Body: \"Section with \"\"Main section\"\" status must be only one\", Class: m0 text-muted)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Link\")\r\n\t\t\tInput(Name: urlname, Value: #section_urlname#)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tLabel(\"Main page\")\r\n\t\t\tInput(Name: page, Value: #section_page#)\r\n\t\t}\r\n\t\tDiv(form-group){\r\n\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditSection, Page: section_list, Params: \"id=#section_id#\")\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n\tSetTitle(\"Sections\")\r\n\tAddToolButton(Title: \"Create\", Page: section_add, Icon: icon-plus)\r\n\tDiv(breadcrumb){\r\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the sections\")\r\n\t}\r\n\r\n\tDBFind(sections, src_sections).Limit(250).Order(\"id\").Custom(custom_status){\r\n\t\tIf(#status# == 0){\r\n\t\t\tHidden section\r\n\t\t}\r\n\t\tIf(#status# == 1){\r\n\t\t\tRegular section\r\n\t\t}\r\n\t\tIf(#status# == 2){\r\n\t\t\tMain section\r\n\t\t}\r\n\t}.Custom(custom_order){\r\n\t\tButton(Body: Em(Class: fa fa-arrow-down), Class: btn btn-link, Page: section_list, Contract: @1SectionLevelDown, Params: \"id=#id#\")\r\n\t\tButton(Body: Em(Class: fa fa-arrow-up), Class: btn btn-link, Page: section_list, Contract: @1SectionLevelUp, Params: \"id=#id#\")\r\n\t}.Custom(custom_action){\r\n\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: section_access, PageParams: \"id=#id#\")).Style(margin-right: 20px;)\r\n\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: section_edit, PageParams: \"id=#id#\"))\r\n\t}\r\n    \r\n\tTable(src_sections, \"ID=id,Name=name,Title=title,Link=urlname,Section page=page,Status=custom_status,=custom_order,=custom_action\").Style(\r\n\ttbody > tr:nth-of-type(odd) {\r\n\t\tbackground-color: #fafbfc; \r\n\t}\r\n\ttbody > tr > td {\r\n\t\tword-break: break-all;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 13px;\r\n\t\tcolor: #666;\r\n\t\tborder-top: 1px solid #eee;\r\n\t\tvertical-align: middle;\r\n\t}\r\n\ttr  > *:first-child {\r\n\t\tpadding-left:20px;\r\n\t\twidth: 80px;\r\n\t}\r\n\ttr  > *:last-child {\r\n\t\tpadding-right:30px;\r\n\t\ttext-align:right; \r\n\t\twidth: 100px;\r\n\t}\r\n\tthead {\r\n\t\tbackground-color: #eee;\r\n\t})\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_create",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tSetTitle(\"Create table\")\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tLinkPage(\"Tables\", app_tables)\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tSpan(\"Create\", text-muted)\r\n\t\t}\r\n\t}\r\n\r\n\tData(src_type,\"type,name\"){\r\n\t\ttext,\"Text\"\r\n\t\tnumber,\"Number\"\r\n\t\tvarchar,\"Varchar\"\r\n\t\tdatetime,\"Date/Time\"\r\n\t\tmoney,\"Money\"\r\n\t\tdouble,\"Double\"\r\n\t\tcharacter,\"Character\"\r\n\t\tjson,\"JSON\"\r\n\t}\r\n\tForm(){\r\n\t\tDiv(panel panel-default){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(col-md-12){\r\n\t\t\t\t\t\tLabel(\"Name\")\r\n\t\t\t\t\t\tInput(Name:Name)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(col-md-4 mt-lg){\r\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Columns\")\r\n\t\t\t\t\t\tInput(Name:disinp, Disabled: true, Value: id)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-7 mt-lg){\r\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Type\")\r\n\t\t\t\t\t\tInput(Name: disinp, Disabled: true, Value: Number)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-1 mt-lg){\r\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIf(GetVar(cs)==\"\"){\r\n\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\r\n\t\t\t\t}\r\n\t\t\t\tIf(#del# == 1){\r\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\r\n\t\t\t\t}.Else{\r\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\r\n\t\t\t\t}\r\n\t\t\t\tRange(params_range, 0, #cs#)\r\n\t\t\t\tForList(Source: params_range){\r\n\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\tDiv(col-md-4 mt-sm){\r\n\t\t\t\t\t\t\tInput(Name:ColumnsArr)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-7 mt-sm){\r\n\t\t\t\t\t\t\tSelect(Name: TypesArr, Source: src_type, NameColumn: name, ValueColumn: type)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\r\n\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#, #cs# > 1)){\r\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: table_create)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer text-right){\r\n\t\t\t\tButton(Body: \"Add column\", Class: btn btn-primary, Page: table_create, PageParams: \"cs=#cs#,application_id=#application_id#\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(row){\r\n\t\t\tDiv(col-md-6){\r\n\t\t\t\tDiv(panel panel-default){\r\n\t\t\t\t\tDiv(panel-heading, Body: \"Write permissions\")\r\n\t\t\t\t\tDiv(panel-body){\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(Insert)\r\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Value: ContractConditions(\"MainCondition\"))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(Update)\r\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Value: ContractConditions(\"MainCondition\"))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(New column)\r\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Value: ContractConditions(\"MainCondition\"))\r\n\t\t\t\t\t\t}\r\n                        Div(form-group){\r\n\t\t\t\t\t\t\tLabel(Read)\r\n\t\t\t\t\t\t\tInput(Name: ReadPerm, Value: \"true\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(panel-footer  text-right){\r\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewTableJoint, Page: app_tables, Params: \"ApplicationId=#application_id#\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column,permissions->read\").Vars(pre).WhereId(#tabl_id#)\r\n\t\r\n\tSetTitle(\"Tables\")\r\n\tDiv(breadcrumb){\r\n\t\tDiv(){\r\n\t\t\tLinkPage(\"Tables\", app_tables)\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tLinkPage(#pre_name#, table_view,, \"tabl_id=#tabl_id#\")\r\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\r\n\t\t\tSpan(\"Edit\", text-muted)\r\n\t\t}\r\n\t}\r\n\r\n\tForm(){\r\n\t\tDiv(panel panel-default){\r\n\t\t\tDiv(panel-body){\r\n\t\t\t\tDiv(row){\r\n\t\t\t\t\tDiv(col-md-3 h4){\r\n\t\t\t\t\t\tLabel(\"Name\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-2 h4){\r\n\t\t\t\t\t\tLabel(\"Type\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-5 h4){\r\n\t\t\t\t\t\tLabel(\"Conditions\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(col-md-2 h4 text-right){\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tJsonToSource(src_columns, #pre_columns#)\r\n\t\t\t\tForList(src_columns){\r\n\t\t\t\t\tDiv(list-group-item){\r\n\t\t\t\t\t\tDiv(row){\r\n\t\t\t\t\t\t\tDiv(col-md-3 h5){\r\n\t\t\t\t\t\t\t\tSpan(#key#)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-2 h5){\r\n\t\t\t\t\t\t\t\tSetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n\t\t\t\t\t\t\t\tIf(#col_type# == text){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Text\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == number){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Number\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == money){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Money\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == varchar){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Varchar\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == datetime){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Date/Time\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == double){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Double\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == character){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Character\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == json){\r\n\t\t\t\t\t\t\t\t\tSpan(\"JSON\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == bytea){\r\n\t\t\t\t\t\t\t\t\tSpan(\"Binary Data\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tIf(#col_type# == uuid){\r\n\t\t\t\t\t\t\t\t\tSpan(\"UUID\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-5 h5){\r\n\t\t\t\t\t\t\t\tSpan(`#value#`)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tDiv(col-md-2 text-right){\r\n\t\t\t\t\t\t\t\tButton(Body: \"Edit\", Class: btn btn-primary, Page: column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(panel-footer text-right){\r\n\t\t\t\tButton(Body: \"Add Column\", Class: btn btn-primary, Page: column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tDiv(row){\r\n\t\t\tDiv(col-md-6){\r\n\t\t\t\tDiv(panel panel-default){\r\n\t\t\t\t\tDiv(panel-heading){Write permissions}\r\n\t\t\t\t\tDiv(panel-body){\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(\"Insert\")\r\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Type: text, Value: #pre_permissions_insert#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(\"Update\")\r\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Type: text, Value: #pre_permissions_update#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tLabel(\"New column\")\r\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Type: text, Value: #pre_permissions_new_column#)\r\n\t\t\t\t\t\t}\r\n                        Div(form-group){\r\n\t\t\t\t\t\t\tLabel(\"Read\")\r\n\t\t\t\t\t\t\tInput(Name: ReadPerm, Type: text, Value: #pre_permissions_read#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tDiv(panel-footer text-right){\r\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditTable, Page: app_tables, Params: \"Name=#pre_name#\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tDiv(col-md-6){\r\n\t\t\t\tDiv(panel panel-default){\r\n\t\t\t\t\tDiv(panel-heading){Conditions for changing permissions}\r\n\t\t\t\t\tDiv(panel-body){\r\n\t\t\t\t\t\tDiv(form-group){\r\n\t\t\t\t\t\t\tInput(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(tables).WhereId(#tabl_id#).Columns(\"id,name\").Vars(pre)\r\n\r\n    SetTitle(\"Tables\")\r\n    Div(breadcrumb){\r\n        LinkPage(\"Tables\", app_tables)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(#pre_name#, text-muted)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        LinkPage(Body:\"Edit\", Page: table_edit, PageParams: \"tabl_id=#tabl_id#\")\r\n    }\r\n\r\n    DBFind(#pre_name#).Count(count)\r\n    If(#page#>0){\r\n        SetVar(prev_page,Calculate(#page#-1)\r\n    }.Else{\r\n        SetVar(page,0).(prev_page,0)\r\n    }\r\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\r\n    If(#count#>Calculate(#off#+#per_page#)){\r\n        SetVar(next_page,Calculate(#page#+1)\r\n    }\r\n    Div(button-group){\r\n        If(#page#>0){\r\n            Button(Body:\"1\", Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=0\")\r\n        }.Else{\r\n            Button(Body:\"1\", Class:btn btn-default disabled)\r\n        }\r\n        If(#page#>1){\r\n            Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#prev_page#\")\r\n        }\r\n        If(And(#page#>0,#page#<#last_page#)){\r\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\r\n        }\r\n        If(#next_page#<#last_page#){\r\n            Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#next_page#\")\r\n        }\r\n        If(#page#<#last_page#){\r\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#last_page#\")\r\n        }.ElseIf(#last_page#>0){\r\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\r\n        }\r\n    }\r\n    Div(panel panel-default){\r\n        Div(panel-body){\r\n            Div(table-responsive){\r\n                DBFind(#pre_name#, src_mem).Offset(#off#).Order(id)\r\n                Table(src_mem)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ActivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ActivateContract {\r\n\tdata {\r\n\t\tId  int\r\n\t}\r\n\tconditions {\r\n\t\t$cur = DBFind(\"contracts\").Columns(\"id,conditions,active,wallet_id\").WhereId($Id).Row()\r\n\t\tif !$cur {\r\n\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\r\n\t\t}\r\n\t\tif Int($cur[\"active\"]) == 1 {\r\n\t\t\terror Sprintf(\"The contract %d has been already activated\", $Id)\r\n\t\t}\r\n\t\tEval($cur[\"conditions\"])\r\n\t\tif $key_id != Int($cur[\"wallet_id\"]) {\r\n\t\t\terror Sprintf(\"Wallet %d cannot activate the contract\", $key_id)\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tDBUpdate(\"contracts\", $Id, {\"active\": 1})\r\n\t\tActivate($Id, $ecosystem_id)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendMenu {\r\n\tdata {\r\n\t\tId     int\r\n\t\tValue      string\r\n\t}\r\n\tconditions {\r\n\t\tConditionById(\"menu\", false)\r\n\t}\r\n\taction {\r\n\t\tvar row map\r\n\t\trow = DBFind(\"menu\").Columns(\"value\").WhereId($Id).Row()\r\n        var val string\r\n        val = row[\"value\"] + \"\\r\\n\" + $Value\r\n\t\tDBUpdate(\"menu\", $Id, {\"value\": val})\r\n\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendPage {\r\n\tdata {\r\n\t\tId         int\r\n\t\tValue      string\r\n\t}\r\n\tconditions {\r\n\t\tRowConditions(\"pages\", $Id, false)\r\n\t}\r\n\taction {\r\n\t\tvar value string\r\n\t\tvar row map\r\n\t\trow = DBFind(\"pages\").Columns(\"value\").WhereId($Id).Row()\r\n\t\tvalue = row[\"value\"]\r\n\t\tif Contains(value, \"PageEnd:\") {\r\n\t\t\tvalue = Replace(value, \"PageEnd:\", $Value) + \"\\r\\nPageEnd:\"\r\n\t\t} else {\r\n\t\t\tvalue = value + \"\\r\\n\" + $Value\r\n\t\t}\r\n\t\tDBUpdate(\"pages\", $Id, {\"value\":  value })\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CallDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CallDelayedContract {\r\n\tdata {\r\n\t\tId int\r\n\t}\r\n\tconditions {\r\n\t\tvar rows array\r\n\t\trows = DBFind(\"delayed_contracts\").Where({id: $Id, deleted: \"false\"} )\r\n\r\n\t\tif !Len(rows) {\r\n\t\t\terror Sprintf(\"Delayed contract %d does not exist\", $Id)\r\n\t\t}\r\n\t\t$cur = rows[0]\r\n\r\n\t\tif $key_id != Int($cur[\"key_id\"]) {\r\n\t\t\terror \"Access denied\"\r\n\t\t}\r\n\r\n\t\tif $block < Int($cur[\"block_id\"]) {\r\n\t\t\terror Sprintf(\"Delayed contract %d must run on block %s, current block %d\", $Id, $cur[\"block_id\"], $block)\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tvar limit, counter, block_id int\r\n\r\n\t\tlimit = Int($cur[\"limit\"])\r\n\t\tcounter = Int($cur[\"counter\"])+1\r\n\t\tblock_id = $block\r\n\r\n\t\tif limit == 0 || limit > counter {\r\n\t\t\tblock_id = block_id + Int($cur[\"every_block\"])\r\n\t\t}\r\n\t\tDBUpdate(\"delayed_contracts\", $Id, {\"counter\": counter, \"block_id\": block_id})\r\n\r\n\t\tvar params map\r\n\t\tCallContract($cur[\"contract\"], params)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CheckNodesBan",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CheckNodesBan {\r\n\taction {\r\n\t\tUpdateNodesBan($block_time)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeactivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DeactivateContract {\r\n\tdata {\r\n\t\tId         int\r\n\t}\r\n\tconditions {\r\n\t\t$cur = DBFind(\"contracts\").Columns(\"id,conditions,active,wallet_id\").WhereId($Id).Row()\r\n\t\tif !$cur {\r\n\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\r\n\t\t}\r\n\t\tif Int($cur[\"active\"]) == 0 {\r\n\t\t\terror Sprintf(\"The contract %d has been already deactivated\", $Id)\r\n\t\t}\r\n\t\tEval($cur[\"conditions\"])\r\n\t\tif $key_id != Int($cur[\"wallet_id\"]) {\r\n\t\t\terror Sprintf(\"Wallet %d cannot deactivate the contract\", $key_id)\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tDBUpdate(\"contracts\", $Id, {\"active\": 0})\r\n\t\tDeactivate($Id, $ecosystem_id)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\r\n\tdata {\r\n\t\tApplicationId int\r\n\t\tValue int \"optional\"\r\n\t}\r\n    \r\n\tconditions {\r\n\t\tif $Value < 0 || $Value > 1 {\r\n\t\t\terror \"Incorrect value\"\r\n\t\t}\r\n\t\tRowConditions(\"applications\", $ApplicationId, false)\r\n\t}\r\n    \r\n\taction {\r\n\t\tDBUpdate(\"applications\", $ApplicationId, {\"deleted\": $Value})\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"app_params\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"app_params\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\r\n    data {\r\n        ApplicationId int\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && false\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"applications\", $ApplicationId, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"applications\", $ApplicationId, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlock {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"blocks\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"blocks\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditDelayedContract {\r\n\tdata {\r\n\t\tId int\r\n\t\tContract string\r\n\t\tEveryBlock int\r\n\t\tConditions string\r\n\t\tBlockID int \"optional\"\r\n\t\tLimit int \"optional\"\r\n\t\tDeleted int \"optional\"\r\n\t}\r\n\tconditions {\r\n\t\tConditionById(\"delayed_contracts\", true)\r\n\r\n\t\tif !HasPrefix($Contract, \"@\") {\r\n\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\r\n\t\t}\r\n\r\n\t\tif GetContractByName($Contract) == 0 {\r\n\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\r\n\t\t}\r\n\r\n\t\tif $BlockID == 0 {\r\n\t\t\t$BlockID = $block + $EveryBlock\r\n\t\t}\r\n\r\n\t\tif $BlockID <= $block {\r\n\t\t\terror \"The blockID must be greater than the current blockID\"\r\n\t\t}\r\n\t}\r\n\taction {\r\n        DBUpdate(\"delayed_contracts\", $Id, {\"contract\": $Contract,\"key_id\": $key_id,\r\n          \"block_id\": $BlockID,\"every_block\": $EveryBlock,\r\n          \"counter\": 0,\"limit\": $Limit, \"deleted\": $Deleted,\"conditions\": $Conditions})\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\r\n    data {\r\n        TableName string\r\n        Name string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n    }\r\n\r\n    conditions {\r\n        var permissions map\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        $Permissions = permissions\r\n        ColumnCondition($TableName, $Name, \"\", JSONEncode($Permissions))\r\n    }\r\n\r\n    action {\r\n        PermColumn($TableName, $Name, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditContract {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n        WalletId string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$WalletId\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"contracts\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $cur = DBFind(\"contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").WhereId($Id).Row()\r\n        if !$cur {\r\n            error Sprintf(\"Contract %d does not exist\", $Id)\r\n        }\r\n        if $Value {\r\n            ValidateEditContractNewValue($Value, $cur[\"value\"])\r\n        }\r\n        if $WalletId != \"\" {\r\n            $recipient = AddressToId($WalletId)\r\n            if $recipient == 0 {\r\n                error Sprintf(\"New contract owner %s is invalid\", $WalletId)\r\n            }\r\n            if Int($cur[\"active\"]) == 1 {\r\n                error \"Contract must be deactivated before wallet changing\"\r\n            }\r\n        } else {\r\n            $recipient = Int($cur[\"wallet_id\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        UpdateContract($Id, $Value, $Conditions, $WalletId, $recipient, $cur[\"active\"], $cur[\"token_id\"])\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditBlockCron",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlockCron {\r\n    data {\r\n        Id int\r\n        ContName string\r\n        EveryBlock int\r\n        Conditions string\r\n        StartBlock int\r\n        Limit int\r\n        Deleted int \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if Size($ContName) == 0 {\r\n            error \"Contract not found\"\r\n        }\r\n\r\n        if $EveryBlock < 1 {\r\n            error \"Interval can not be less 1\"\r\n        }\r\n\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n        \r\n        if $StartBlock < $block {\r\n            error Sprintf(\"Start block can not be less than the current block number. Current block number %d\", $block)\r\n        }\r\n\r\n        if $Limit < 0 {\r\n            error \"Limit can not be less 0\"\r\n        }\r\n        \r\n        if !$Deleted {\r\n            $Deleted = 0\r\n        }\r\n    }\r\n\r\n    action {\r\n        EditDelayedContract(\"Id,Contract,EveryBlock,Conditions,BlockID,Limit,Deleted\", $Id, $ContName, $EveryBlock, $Conditions, $StartBlock, $Limit, $Deleted)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditEcosystemName",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditEcosystemName {\r\n\tdata {\r\n\t\tEcosystemID int\r\n\t\tNewName string\r\n\t}\r\n\tconditions {\r\n\t\tvar rows array\r\n\t\trows = DBFind(\"@1_ecosystems\").Where({id: $EcosystemID})\r\n\t\tif !Len(rows) {\r\n\t\t\terror Sprintf(\"Ecosystem %d does not exist\", $EcosystemID)\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tEditEcosysName($EcosystemID, $NewName)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\r\n    data {\r\n        Id int\r\n        Trans string\r\n    }\r\n\r\n    conditions {\r\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n        $lang = DBFind(\"languages\").Where({id: $Id}).Row()\r\n    }\r\n\r\n    action {\r\n        EditLanguage($Id, $lang[\"name\"], $Trans, Int($lang[\"app_id\"]))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLangJoint {\r\n    data {\r\n        Id int\r\n        ValueArr array\r\n        LocaleArr array\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($LocaleArr) {\r\n            if Size($LocaleArr[i]) == 0 {\r\n                info(\"Locale is empty\")\r\n            }\r\n            if Size($ValueArr[i]) == 0 {\r\n                info(\"Value is empty\")\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var Trans map\r\n        while i < Len($LocaleArr) {\r\n            Trans[$LocaleArr[i]] = $ValueArr[i]\r\n            i = i + 1\r\n        }\r\n        var params map\r\n        params[\"Id\"] = $Id \r\n        params[\"Trans\"] = JSONEncode(Trans)\r\n        CallContract(\"EditLang\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditMenu {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Title string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$Title\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"menu\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Title {\r\n            pars[\"title\"] = $Title\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"menu\", $Id, pars)\r\n        }            \r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditPage {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Menu string \"optional\"\r\n        Conditions string \"optional\"\r\n        ValidateCount int \"optional\"\r\n        ValidateMode string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$Menu && !$ValidateCount \r\n    }\r\n    func preparePageValidateCount(count int) int {\r\n        var min, max int\r\n        min = Int(EcosysParam(\"min_page_validate_count\"))\r\n        max = Int(EcosysParam(\"max_page_validate_count\"))\r\n        if count < min {\r\n            count = min\r\n        } else {\r\n            if count > max {\r\n                count = max\r\n            }\r\n        }\r\n        return count\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"pages\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $ValidateCount = preparePageValidateCount($ValidateCount)\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Menu {\r\n            pars[\"menu\"] = $Menu\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if $ValidateCount {\r\n            pars[\"validate_count\"] = $ValidateCount\r\n        }\r\n        if $ValidateMode {\r\n            if $ValidateMode != \"1\" {\r\n                $ValidateMode = \"0\"\r\n            }\r\n            pars[\"validate_mode\"] = $ValidateMode\r\n        }\r\n        if pars {\r\n            DBUpdate(\"pages\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"parameters\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n\t\t$Name = DBFind(\"parameters\").WhereId($Id).One(\"name\")\r\n\t\tif $Name == \"founder_account\" {\r\n\t\t\tif !DBFind(\"members\").Where({id:$Value}).One(\"id\") {\r\n\t\t\t\t warning Sprintf(\"User %v not found\", $Value)\r\n\t\t\t}\r\n\t\t}\r\n        if $Name == \"max_block_user_tx\" || $Name == \"money_digit\" || $Name == \"max_sum\" || $Name == \"min_page_validate_count\" || $Name == \"max_page_validate_count\" {\r\n\t\t\tif Size($Value) == 0 {\r\n\t\t\t\twarning \"Value was not received\"\r\n\t\t\t}\r\n            if Int($Value) <= 0 {\r\n\t\t\t\twarning \"Value must be greater than zero\"\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"parameters\", $Id, pars)\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "EditSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSection {\r\n    data {\r\n\t\tid int\r\n\t\ttitle string\r\n\t\tstatus int\r\n\t\turlname string\r\n\t\tpage string\r\n    }\r\n\t\r\n    conditions {\r\n\t\tif $status < 0 || $status > 2 {\r\n\t\t\twarning \"Status must be in range 0..2\"\r\n\t\t}\r\n\t\tif !DBFind(\"sections\").Columns(\"id\").WhereId($id) {\r\n\t\t\twarning Sprintf(\"Section with id '%v' not exists\", $id)\r\n\t\t}\r\n\t}\r\n\t\r\n    action {\r\n\t\tif $status == 2 && DBFind(\"sections\").Columns(\"id\").Where({\"status\":{\"$eq\": 2}}).Order(\"id\"){\r\n\t\t\tDBUpdate(\"sections\",$id, {\"value\": \"1\"})\r\n\t\t}\r\n\t\tDBUpdate(\"sections\", $id, {\"title\":$title,\"status\":$status,\"urlname\":$urlname,\"page\":$page}) \r\n\t}\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "EditSign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSign {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && false\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"contracts\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"confirmation\"] = $Value\r\n        }\r\n        if pars {\r\n            DBUpdate(\"contracts\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditSignJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSignJoint {\r\n    data {\r\n        Id int\r\n        Title string\r\n        Parameter string\r\n    }\r\n\r\n    conditions {\r\n        if !$Title {\r\n            info(\"Title is empty\")\r\n        }\r\n        if !$Parameter {\r\n            info(\"Parameter is empty\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var Value map\r\n        Value[\"title\"] = $Title \r\n        Value[\"params\"] = $Parameter\r\n\r\n        var params map\r\n        params[\"Id\"] = $Id \r\n        params[\"Value\"] = JSONEncode(Value)\r\n        CallContract(\"EditSign\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\r\n    data {\r\n        Name string\r\n        InsertPerm string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n        NewColumnPerm string\r\n    }\r\n\r\n    conditions {\r\n        if !$InsertPerm {\r\n            info(\"Insert condition is empty\")\r\n        }\r\n        if !$UpdatePerm {\r\n            info(\"Update condition is empty\")\r\n        }\r\n        if !$ReadPerm {\r\n            info(\"Read condition is empty\")\r\n        }\r\n        if !$NewColumnPerm {\r\n            info(\"New column condition is empty\")\r\n        }\r\n\r\n        var permissions map\r\n        permissions[\"insert\"] = $InsertPerm\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        permissions[\"new_column\"] = $NewColumnPerm\r\n        $Permissions = permissions\r\n        TableConditions($Name, \"\", JSONEncode($Permissions))\r\n    }\r\n\r\n    action {\r\n        PermTable($Name, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UploadBinary",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Data bytes \"file\"\r\n        DataMimeType string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where({app_id: $ApplicationId,\r\n            member_id: $key_id, name: $Name}).One(\"id\"))\r\n\r\n        if $Id == 0 {\r\n            if $ApplicationId == 0 {\r\n                warning \"Application id cannot equal 0\"\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        var str_hash string\r\n        str_hash = Hash($Data)\r\n\r\n        if $DataMimeType == \"\" {\r\n            $DataMimeType = \"application/octet-stream\"\r\n        }\r\n\r\n        if $Id != 0 {\r\n            DBUpdate(\"binaries\", $Id, {\"data\": $Data,\"hash\": str_hash,\"mime_type\": $DataMimeType})\r\n        } else {\r\n            $Id = DBInsert(\"binaries\", {\"app_id\": $ApplicationId,\"member_id\": $key_id,\r\n               \"name\": $Name,\"data\": $Data,\"hash\": str_hash, \"mime_type\": $DataMimeType})\r\n        }\r\n\r\n        $result = $Id\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ExportNewApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExportNewApp {\r\n    data {\r\n        ApplicationId int\r\n    }\r\n\r\n    conditions {\r\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where({id: $ApplicationId}).Row()\r\n        if !$app_map{\r\n            warning \"Application not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Menu search------------------------------------------------------\r\n        var i int\r\n        var pages_array array\r\n        var menu_name_array array\r\n        var menu_id_array array\r\n\r\n        i = 0\r\n        var pages_ret array\r\n        pages_ret = DBFind(\"pages\").Where({app_id: $ApplicationId})\r\n        while i < Len(pages_ret) {\r\n            var page_map map\r\n            page_map = pages_ret[i]\r\n\r\n            pages_array = Append(pages_array, Sprintf(\"%v\", Str(page_map[\"menu\"])))\r\n            i = i + 1\r\n        }\r\n\r\n        if Len(pages_array) > 0 {\r\n            var where_for_menu map\r\n            where_for_menu[\"name\"] = {\"$in\" : pages_array}\r\n\r\n            i = 0\r\n            var menu_ret array\r\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\r\n            while i < Len(menu_ret) {\r\n                var menu_map map\r\n                menu_map = menu_ret[i]\r\n\r\n                menu_name_array = Append(menu_name_array, Str(menu_map[\"name\"]))\r\n                menu_id_array = Append(menu_id_array, Str(menu_map[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }\r\n\r\n        //=====================================================================================================\r\n        //------------------------------------Creating settings------------------------------------------------\r\n\r\n        var value map\r\n        value[\"app_id\"] = Str($ApplicationId)\r\n        value[\"app_name\"] = Str($app_map[\"name\"])\r\n\r\n        if Len(menu_name_array) > 0 {\r\n            value[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\r\n            value[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\r\n            value[\"count_menu\"] = Str(Len(menu_name_array))\r\n        } else {\r\n            value[\"menu_id\"] = \"0\"\r\n            value[\"menu_name\"] = \"\"\r\n            value[\"count_menu\"] = \"0\"\r\n        }\r\n\r\n        $buffer_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"export\"}).One(\"id\")\r\n        if !$buffer_id {\r\n            DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"export\", \"value\": value})\r\n        } else {\r\n            DBUpdate(\"buffer_data\", Int($buffer_id), {\"value\": value})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Import",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\r\n    data {\r\n        Data string\r\n    }\r\n    func decodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = ToUpper(\"#\" + prefix + r + \"#\")\r\n            to = \"#\" + r + \"#\"\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $Data = decodeGlobals($Data)\r\n        $ApplicationId = 0\r\n        var app_map map\r\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\", member_id: $key_id}).Row()\r\n\r\n        if app_map{\r\n            var app_id int ival string\r\n            ival = Str(app_map[\"value.app_name\"])\r\n            app_id = DBFind(\"applications\").Columns(\"id\").Where({name: ival}).One(\"id\")\r\n            if app_id {\r\n                $ApplicationId = Int(app_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var editors, creators map\r\n        editors[\"pages\"] = \"EditPage\"\r\n        editors[\"blocks\"] = \"EditBlock\"\r\n        editors[\"menu\"] = \"EditMenu\"\r\n        editors[\"app_params\"] = \"EditAppParam\"\r\n        editors[\"languages\"] = \"EditLang\"\r\n        editors[\"contracts\"] = \"EditContract\"\r\n        editors[\"tables\"] = \"\" // nothing\r\n\r\n        creators[\"pages\"] = \"NewPage\"\r\n        creators[\"blocks\"] = \"NewBlock\"\r\n        creators[\"menu\"] = \"NewMenu\"\r\n        creators[\"app_params\"] = \"NewAppParam\"\r\n        creators[\"languages\"] = \"NewLang\"\r\n        creators[\"contracts\"] = \"NewContract\"\r\n        creators[\"tables\"] = \"NewTable\"\r\n\r\n        var dataImport array\r\n        dataImport = JSONDecode($Data)\r\n        var i int\r\n        while i < Len(dataImport){\r\n            var item cdata map type name string\r\n            cdata = dataImport[i]\r\n            if cdata {\r\n                cdata[\"ApplicationId\"] = $ApplicationId\r\n                type = cdata[\"Type\"]\r\n                name = cdata[\"Name\"]\r\n                // Println(Sprintf(\"import %v: %v\", type, cdata[\"Name\"]))\r\n\r\n                item = DBFind(type).Where({name: name}).Row()\r\n                var contractName string\r\n                if item {\r\n                    contractName = editors[type]\r\n                    cdata[\"Id\"] = Int(item[\"id\"])\r\n                    if type == \"contracts\" {\r\n                        if item[\"conditions\"] == \"false\"{\r\n                            // ignore updating impossibled\r\n                            contractName = \"\"\r\n                        }\r\n                    } elif type == \"menu\"{\r\n                        var menu menuItem string\r\n                        menu = Replace(item[\"value\"], \" \", \"\")\r\n                        menu = Replace(menu, \"\\n\", \"\")\r\n                        menu = Replace(menu, \"\\r\", \"\")\r\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\r\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\r\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\r\n                        if Contains(menu, menuItem) {\r\n                            // ignore repeated\r\n                            contractName = \"\"\r\n                        }else{\r\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\r\n                        }\r\n                    }\r\n                } else {\r\n                    contractName = creators[type]\r\n                }\r\n\r\n                if contractName != \"\"{\r\n                    CallContract(contractName, cdata)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // Println(Sprintf(\"> time: %v\", $time))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ImportUpload",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\r\n    data {\r\n        input_file string \"file\"\r\n    }\r\n    func encodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = \"#\" + r + \"#\"\r\n            to = ToUpper(\"#\" + prefix + r + \"#\")\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $input_file = BytesToString($input_file)\r\n        $input_file = encodeGlobals($input_file)\r\n        $limit = 10 // data piece size of import\r\n\r\n        // init buffer_data, cleaning old buffer\r\n        var initJson map\r\n        $import_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import\"}).One(\"id\")\r\n        if $import_id {\r\n            $import_id = Int($import_id)\r\n            DBUpdate(\"buffer_data\", $import_id, {\"value\": initJson})\r\n        } else {\r\n            $import_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import\",\r\n            \"value\": initJson})\r\n        }\r\n\r\n        $info_id = DBFind(\"buffer_data\").Where({member_id:$key_id, key: \"import_info\"}).One(\"id\")\r\n        if $info_id {\r\n            $info_id = Int($info_id)\r\n            DBUpdate(\"buffer_data\", $info_id, {\"value\": initJson})\r\n        } else {\r\n            $info_id = DBInsert(\"buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\",\r\n            \"value\": initJson})\r\n        }\r\n    }\r\n\r\n    action {\r\n        var input map arrData array\r\n        input = JSONDecode($input_file)\r\n        arrData = input[\"data\"]\r\n\r\n        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array\r\n\r\n        // import info\r\n        var i lenArrData int item map\r\n        lenArrData = Len(arrData)\r\n        while i < lenArrData{\r\n            item = arrData[i]\r\n\r\n            if item[\"Type\"] == \"pages\" {\r\n                pages_arr = Append(pages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"blocks\" {\r\n                blocks_arr = Append(blocks_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"menu\" {\r\n                menu_arr = Append(menu_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"app_params\" {\r\n                parameters_arr = Append(parameters_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"languages\" {\r\n                languages_arr = Append(languages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"contracts\" {\r\n                contracts_arr = Append(contracts_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"tables\" {\r\n                tables_arr = Append(tables_arr, item[\"Name\"])\r\n            }\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        var inf map\r\n        inf[\"app_name\"] = input[\"name\"]\r\n        inf[\"pages\"] = Join(pages_arr, \", \")\r\n        inf[\"pages_count\"] = Len(pages_arr)\r\n        inf[\"blocks\"] = Join(blocks_arr, \", \")\r\n        inf[\"blocks_count\"] = Len(blocks_arr)\r\n        inf[\"menu\"] = Join(menu_arr, \", \")\r\n        inf[\"menu_count\"] = Len(menu_arr)\r\n        inf[\"parameters\"] = Join(parameters_arr, \", \")\r\n        inf[\"parameters_count\"] = Len(parameters_arr)\r\n        inf[\"languages\"] = Join(languages_arr, \", \")\r\n        inf[\"languages_count\"] = Len(languages_arr)\r\n        inf[\"contracts\"] = Join(contracts_arr, \", \")\r\n        inf[\"contracts_count\"] = Len(contracts_arr)\r\n        inf[\"tables\"] = Join(tables_arr, \", \")\r\n        inf[\"tables_count\"] = Len(tables_arr)\r\n\r\n        if 0 == inf[\"pages_count\"] + inf[\"blocks_count\"] + inf[\"menu_count\"] + inf[\"parameters_count\"] + inf[\"languages_count\"] + inf[\"contracts_count\"] + inf[\"tables_count\"] {\r\n            warning \"Invalid or empty import file\"\r\n        }\r\n\r\n        // import data\r\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\r\n        var sliced contracts array\r\n        i = 0\r\n        while i <lenArrData{\r\n            var items array l int item map\r\n            while l < $limit && (i + l < lenArrData) {\r\n                item = arrData[i + l]\r\n                if item[\"Type\"] == \"contracts\" {\r\n                    contracts = Append(contracts, item)\r\n                }else{\r\n                    items = Append(items, item)\r\n                }\r\n                l = l + 1\r\n            }\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(items)\r\n            sliced = Append(sliced, batch)\r\n            i = i + $limit\r\n        }\r\n        if Len(contracts) > 0{\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(contracts)\r\n            sliced = Append(sliced, batch)\r\n        }\r\n        input[\"data\"] = sliced\r\n\r\n        // storing\r\n        DBUpdate(\"buffer_data\", $import_id, {\"value\": input})\r\n        DBUpdate(\"buffer_data\", $info_id, {\"value\": inf})\r\n\r\n        var name string\r\n        name = Str(input[\"name\"])\r\n\t\tvar cndns string\r\n\t\tcndns = Str(input[\"conditions\"])\r\n\t\t\r\n        if !DBFind(\"applications\").Columns(\"id\").Where({name:name}).One(\"id\") {\r\n            DBInsert(\"applications\", {\"name\": name, \"conditions\": cndns})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ItemChangeAppId",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ItemChangeAppId {\r\n    data {\r\n        Table string\r\n        AppId int\r\n        Id int\r\n    }\r\n\r\n    conditions {\r\n        $item = DBFind($Table).Where({id: $Id}).Row()\r\n        if !$item{\r\n            warning \"Item not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate($Table, Int($item[\"id\"]), {\"app_id\": $AppId})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MainCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MainCondition {\r\n\tconditions {\r\n\t\tif EcosysParam(\"founder_account\")!=$key_id\r\n\t\t{\r\n\t\t\twarning \"Sorry, you do not have access to this action.\"\r\n\t\t}\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MoneyTransfer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MoneyTransfer {\r\n\tdata {\r\n\t\tRecipient string\r\n\t\tAmount    string\r\n\t\tComment     string \"optional\"\r\n\t}\r\n\tconditions {\r\n\t\t$recipient = AddressToId($Recipient)\r\n\t\tif $recipient == 0 {\r\n\t\t\terror Sprintf(\"Recipient %s is invalid\", $Recipient)\r\n\t\t}\r\n\t\tvar total money\r\n\t\t$amount = Money($Amount) \r\n\t\tif $amount <= 0 {\r\n\t\t\terror \"Amount must be greater then zero\"\r\n\t\t}\r\n\r\n        var row map\r\n        var req money\r\n\t\trow = DBFind(\"keys\").Columns(\"amount\").WhereId($key_id).Row()\r\n        total = Money(row[\"amount\"])\r\n        req = $amount + Money(100000000000000000) \r\n        if req > total {\r\n\t\t\terror Sprintf(\"Money is not enough. You have got %v but you should reserve %v\", total, req)\r\n\t\t}\r\n\t}\r\n\taction {\r\n\t\tDBUpdate(\"keys\", $key_id, {\"-amount\": $amount})\r\n\t\tif DBFind(\"keys\").Columns(\"id\").WhereId($recipient).One(\"id\") == nil {\r\n\t\t\tDBInsert(\"keys\", {\"id\": $recipient,\"amount\": $amount})\r\n\t\t} else {\r\n\t\t\tDBUpdate(\"keys\", $recipient, {\"+amount\": $amount})\r\n\t\t}\r\n        DBInsert(\"history\", {\"sender_id\": $key_id,\"recipient_id\": $recipient,\r\n             \"amount\":$amount,\"comment\": $Comment,\"block_id\": $block,\"txhash\": $txhash})\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n\r\n        if DBFind(\"app_params\").Columns(\"id\").Where({\"name\":$Name}).One(\"id\") {\r\n            warning Sprintf( \"Application parameter %s already exists\", $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"app_params\", {\"app_id\": $ApplicationId, \"name\": $Name, \"value\": $Value,\r\n              \"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\r\n    data {\r\n        Name string\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if Size($Name) == 0 {\r\n            warning \"Application name missing\"\r\n        }\r\n\r\n        if DBFind(\"applications\").Columns(\"id\").Where({name:$Name}).One(\"id\") {\r\n            warning Sprintf( \"Application %s already exists\", $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        $result = DBInsert(\"applications\", {\"name\": $Name,\"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBadBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBadBlock {\r\n\tdata {\r\n\t\tProducerNodeID int\r\n\t\tConsumerNodeID int\r\n\t\tBlockID int\r\n\t\tTimestamp int\r\n\t\tReason string\r\n\t}\r\n\taction {\r\n        DBInsert(\"@1_bad_blocks\", {\"producer_node_id\": $ProducerNodeID,\"consumer_node_id\": $ConsumerNodeID,\r\n            \"block_id\": $BlockID, \"timestamp block_time\": $Timestamp, \"reason\": $Reason})\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n\r\n        if DBFind(\"blocks\").Columns(\"id\").Where({name:$Name}).One(\"id\") {\r\n            warning Sprintf( \"Block %s already exists\", $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"blocks\", {\"name\": $Name, \"value\": $Value, \"conditions\": $Conditions,\r\n              \"app_id\": $ApplicationId})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewDelayedContract {\r\n\tdata {\r\n\t\tContract string\r\n\t\tEveryBlock int\r\n\t\tConditions string\r\n\t\tBlockID int \"optional\"\r\n\t\tLimit int \"optional\"\r\n\t}\r\n\tconditions {\r\n\t\tValidateCondition($Conditions, $ecosystem_id)\r\n\r\n\t\tif !HasPrefix($Contract, \"@\") {\r\n\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\r\n\t\t}\r\n\r\n\t\tif GetContractByName($Contract) == 0 {\r\n\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\r\n\t\t}\r\n\r\n\t\tif $BlockID == 0 {\r\n\t\t\t$BlockID = $block + $EveryBlock\r\n\t\t}\r\n\r\n\t\tif $BlockID <= $block {\r\n\t\t\terror \"The blockID must be greater than the current blockID\"\r\n\t\t}\r\n\t}\r\n\taction {\r\n        DBInsert(\"delayed_contracts\", {\"contract\": $Contract, \"key_id\": $key_id, \"block_id\": $BlockID,\r\n            \"every_block\": $EveryBlock, \"limit\": $Limit, \"conditions\": $Conditions})\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\r\n    data {\r\n        TableName string\r\n        Name string\r\n        Type string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n    }\r\n    conditions {\r\n    var permissions map\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        $Permissions = permissions\r\n        ColumnCondition($TableName, $Name, $Type, JSONEncode($Permissions))\r\n    }\r\n    action {\r\n        CreateColumn($TableName, $Name, $Type, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\r\n    data {\r\n        ApplicationId int\r\n        Value string\r\n        Conditions string\r\n        Wallet string \"optional\"\r\n        TokenEcosystem int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n\r\n        $walletContract = $key_id\r\n        if $Wallet {\r\n            $walletContract = AddressToId($Wallet)\r\n            if $walletContract == 0 {\r\n                error Sprintf(\"wrong wallet %s\", $Wallet)\r\n            }\r\n        }\r\n\r\n        $contract_name = ContractName($Value)\r\n\r\n        if !$contract_name {\r\n            error \"must be the name\"\r\n        }\r\n\r\n        if !$TokenEcosystem {\r\n            $TokenEcosystem = 1\r\n        } else {\r\n            if !SysFuel($TokenEcosystem) {\r\n                warning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        $result = CreateContract($contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBlockCron",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlockCron {\r\n    data {\r\n        ContName string\r\n        EveryBlock int\r\n        Conditions string\r\n        StartBlock int\r\n        Limit int \r\n    }\r\n\r\n    conditions {\r\n        if Size($ContName) == 0 {\r\n            error \"Contract not found\"\r\n        }\r\n\r\n        if $EveryBlock < 1 {\r\n            error \"Interval can not be less 1\"\r\n        }\r\n\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n        \r\n        if $StartBlock < $block {\r\n            error Sprintf(\"Start block can not be less than the current block number. Current block number %d\", $block)\r\n        }\r\n\r\n        if $Limit < 0 {\r\n            error \"Limit can not be less 0\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        NewDelayedContract(\"Contract,EveryBlock,Conditions,BlockID,Limit\", $ContName, $EveryBlock, $Conditions, $StartBlock, $Limit)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewEcosystem {\r\n\tdata {\r\n\t\tName  string\r\n\t}\r\n\taction {\r\n\t\t$result = CreateEcosystem($key_id, $Name)\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Trans string\r\n    }\r\n\r\n    conditions {\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n\r\n        if DBFind(\"languages\").Columns(\"id\").Where({name: $Name, app_id: $ApplicationId}).One(\"id\") {\r\n            warning Sprintf( \"Language resource %s already exists\", $Name)\r\n        }\r\n\r\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\r\n    }\r\n\r\n    action {\r\n        CreateLanguage($Name, $Trans, $ApplicationId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLangJoint {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        ValueArr array\r\n        LocaleArr array\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($LocaleArr) {\r\n            if Size($LocaleArr[i]) == 0 {\r\n                info(\"Locale is empty\")\r\n            }\r\n            if Size($ValueArr[i]) == 0 {\r\n                info(\"Value is empty\")\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var Trans map\r\n        while i < Len($LocaleArr) {\r\n            Trans[$LocaleArr[i]] = $ValueArr[i]\r\n            i = i + 1\r\n        }\r\n        var params map\r\n        params[\"ApplicationId\"] = $ApplicationId \r\n        params[\"Name\"] = $Name\r\n        params[\"Trans\"] = JSONEncode(Trans)\r\n        CallContract(\"NewLang\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Title string \"optional\"\r\n        Conditions string\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if DBFind(\"menu\").Columns(\"id\").Where({name: $Name}).One(\"id\") {\r\n            warning Sprintf( \"Menu %s already exists\", $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"menu\", {\"name\":$Name,\"value\": $Value, \"title\": $Title, \"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Menu string\r\n        Conditions string\r\n        ValidateCount int \"optional\"\r\n        ValidateMode string \"optional\"\r\n    }\r\n    func preparePageValidateCount(count int) int {\r\n        var min, max int\r\n        min = Int(EcosysParam(\"min_page_validate_count\"))\r\n        max = Int(EcosysParam(\"max_page_validate_count\"))\r\n\r\n        if count < min {\r\n            count = min\r\n        } else {\r\n            if count > max {\r\n                count = max\r\n            }\r\n        }\r\n        return count\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n\r\n        if DBFind(\"pages\").Columns(\"id\").Where({name: $Name}).One(\"id\") {\r\n            warning Sprintf( \"Page %s already exists\", $Name)\r\n        }\r\n\r\n        $ValidateCount = preparePageValidateCount($ValidateCount)\r\n\r\n        if $ValidateMode {\r\n            if $ValidateMode != \"1\" {\r\n                $ValidateMode = \"0\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"pages\", {\"name\": $Name,\"value\": $Value, \"menu\": $Menu,\r\n             \"validate_count\":$ValidateCount,\"validate_mode\": $ValidateMode,\r\n             \"conditions\": $Conditions,\"app_id\": $ApplicationId})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n    }\r\n    \r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n        \r\n        if DBFind(\"parameters\").Columns(\"id\").Where({name: $Name}).One(\"id\") {\r\n            warning Sprintf(\"Parameter %s already exists\", $Name)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBInsert(\"parameters\", {\"name\": $Name, \"value\":$Value, \"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSection {\r\n\tdata {\r\n\t\ttitle string\r\n\t\tstatus int\r\n\t\turlname string\r\n\t\tpage string\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tif $status < 0 || $status > 2 {\r\n\t\t\twarning \"Status must be in range 0..2\"\r\n\t\t}\r\n\t\tif DBFind(\"sections\").Where({\"urlname\":$urlname}) {\r\n\t\t\twarning Sprintf(\"Section with url name '%s' already exists\", $urlname)\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tDBInsert(\"sections\", {\"title\":$title, \"status\":$status, \"urlname\":$urlname, \"page\":$page})\r\n\t}\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "NewSign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSign {\r\n    data {\r\n        Name string\r\n        Value string\r\n    }\r\n    conditions {\r\n        //ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n\t\t$contract_map = DBFind(\"contracts\").Columns(\"id,name,confirmation\").Where({name: $Name}).Row()\r\n        /*if $contract_map[\"confirmation\"] {\r\n            warning Sprintf(\"The signature %s already exists\", $Name)\r\n        }*/\r\n\t\t\r\n    }\r\n    action {\r\n\t\tDBUpdate(\"contracts\",Int($contract_map[\"id\"]),{\"confirmation\": $Value}) \r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSignJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSignJoint {\r\n    data {\r\n        Name string\r\n        Title string \"optional\"\r\n        ParamArr array \"optional\"\r\n        ValueArr array \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($ParamArr) {\r\n            if Size($ParamArr[i]) == 0 {\r\n                info(\"Parameter is empty\")\r\n            }\r\n            if Size($ValueArr[i]) == 0 {\r\n                info(\"Value is empty\")\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var par_arr array\r\n\r\n        var i int\r\n        while i < Len($ParamArr) {\r\n            var par_map map\r\n            par_map[\"name\"] = $ParamArr[i]\r\n            par_map[\"text\"] = $ValueArr[i]\r\n            par_arr = Append(par_arr, JSONEncode(par_map))\r\n            i = i + 1\r\n        }\r\n\r\n        var params map\r\n        params[\"Name\"] = $Name \r\n        params[\"Value\"] = Sprintf(`{\"title\":\"%v\",\"params\":[%v]}`, $Title, Join(par_arr, \",\"))\r\n        CallContract(\"NewSign\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Columns string\r\n        Permissions string\r\n    }\r\n    conditions {\r\n        if $ApplicationId == 0 {\r\n            warning \"Application id cannot equal 0\"\r\n        }\r\n        TableConditions($Name, $Columns, $Permissions)\r\n    }\r\n    \r\n    action {\r\n        CreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTableJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTableJoint {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        ColumnsArr array\r\n        TypesArr array\r\n        InsertPerm string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n        NewColumnPerm string\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($ColumnsArr) {\r\n            if Size($ColumnsArr[i]) == 0 {\r\n                info(\"Columns is empty\")\r\n            }\r\n            if Size($TypesArr[i]) == 0 {\r\n                info(\"Type is empty\")\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var col_arr array\r\n        while i < Len($ColumnsArr) {\r\n            var col_map map\r\n            col_map[\"name\"] = $ColumnsArr[i]\r\n            col_map[\"type\"] = $TypesArr[i]\r\n            col_map[\"conditions\"] = \"true\"\r\n            col_arr[i] = JSONEncode(col_map)\r\n            i = i + 1\r\n        }\r\n\r\n        var Permissions map\r\n        Permissions[\"insert\"] = $InsertPerm \r\n        Permissions[\"update\"] = $UpdatePerm\r\n        Permissions[\"read\"] = $ReadPerm\r\n        Permissions[\"new_column\"] = $NewColumnPerm\r\n\r\n        var params map\r\n        params[\"ApplicationId\"] = $ApplicationId \r\n        params[\"Name\"] = $Name\r\n        params[\"Columns\"] = JSONEncode(col_arr)\r\n        params[\"Permissions\"] = JSONEncode(Permissions)\r\n        CallContract(\"NewTable\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewUser",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewUser {\r\n\tdata {\r\n\t\tNewPubkey string\r\n\t}\r\n\tconditions {\r\n\t\t$newId = PubToID($NewPubkey)\r\n\t\tif $newId == 0 {\r\n\t\t\terror \"Wrong pubkey\"\r\n\t\t}\r\n\t\tif DBFind(\"keys\").Columns(\"id\").WhereId($newId).One(\"id\") != nil {\r\n\t\t\terror \"User already exists\"\r\n\t\t}\r\n\r\n        $amount = Money(1000) * Money(1000000000000000000)\r\n\t}\r\n\taction {\r\n        NewMoney($newId, Str($amount), \"New user deposit\")\r\n        SetPubKey($newId, StringToBytes($NewPubkey))\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeOwnerCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeOwnerCondition {\r\n\tconditions {\r\n        $raw_full_nodes = SysParamString(\"full_nodes\")\r\n        if Size($raw_full_nodes) == 0 {\r\n            ContractConditions(\"MainCondition\")\r\n        } else {\r\n            $full_nodes = JSONDecode($raw_full_nodes)\r\n            var i int\r\n            while i < Len($full_nodes) {\r\n                $fn = $full_nodes[i]\r\n                if $fn[\"key_id\"] == $key_id {\r\n                    return true\r\n                }\r\n                i = i + 1\r\n            }\r\n            warning \"Sorry, you do not have access to this action.\"\r\n        }\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Restore",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Restore {\r\n    data {\r\n        Id int\r\n        Type string\r\n        IdHistory int\r\n    }\r\n    conditions {\r\n        var allowed map\r\n        allowed[\"page\"] = 1\r\n        allowed[\"block\"] = 1\r\n        allowed[\"menu\"] = 1\r\n        allowed[\"contract\"] = 1\r\n        if allowed[$Type] != 1 {\r\n            warning \"Wrong type\"\r\n        }\r\n\r\n        if $Type == \"page\" {\r\n            $history = GetHistory(\"pages\", $Id)\r\n        }elif $Type == \"block\" {\r\n            $history = GetHistory(\"blocks\", $Id)\r\n        }elif $Type == \"menu\" {\r\n            $history = GetHistory(\"menu\", $Id)\r\n        }elif $Type == \"contract\" {\r\n            $history = GetHistory(\"contracts\", $Id)\r\n        }\r\n    }\r\n    action {\r\n        var rec params map\r\n        rec = $history[$IdHistory]\r\n        params[\"Id\"] = $Id\r\n        params[\"Value\"] = rec[\"value\"]\r\n        params[\"Conditions\"] = rec[\"conditions\"]\r\n\r\n        if $Type == \"page\" {\r\n            params[\"Menu\"] = rec[\"menu\"]\r\n            CallContract(\"@1EditPage\", params)\r\n        }elif $Type == \"block\" {\r\n            CallContract(\"@1EditBlock\", params)\r\n        }elif $Type == \"menu\" {\r\n            CallContract(\"@1EditMenu\", params)\r\n        }elif $Type == \"contract\" {\r\n            CallContract(\"@1EditContract\", params)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelDown",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelDown {\r\n   \tdata {\r\n\t\tid int\r\n    }\r\n\t\r\n    conditions {\r\n\t\tif !DBFind(\"sections\").Columns(\"id\").Where({\"id\":$id}) {\r\n\t\t    warning Sprintf(\"Section with id '%v' not exists\", $id)\r\n\t\t}\r\n\t\t$next = DBFind(\"sections\").Columns(\"id\").Where({\"id\":{\"$gt\":$id}})\r\n        \tif !$next {\r\n\t\t    warning \"Section already at bottom\"\r\n\t\t}\r\n    }\r\n\t\r\n\taction {\r\n\t\tvar next_id int\r\n\t\tvar last_id int\r\n\t\tnext_id = $id + 1\r\n\t\t$max_id = DBFind(\"sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\r\n\t\tlast_id = $max_id + 1\r\n\t\tDBUpdate(\"sections\", next_id, {\"id\":last_id})\r\n\t\tDBUpdate(\"sections\", $id, {\"id\":next_id})\r\n\t\tDBUpdate(\"sections\", last_id, {\"id\":$id})\r\n\t}\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelUp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelUp {\r\n\tdata {\r\n\t\tid int\r\n\t}\r\n\t\r\n\tconditions {\r\n\t\tif !DBFind(\"sections\").Columns(\"id\").Where({\"id\":$id}) {\r\n\t\t    warning Sprintf(\"Section with id '%v' not exists\", $id)\r\n\t\t}\r\n\t\t$next = DBFind(\"sections\").Columns(\"id\").Where({\"id\":{\"$lt\":$id}})\r\n\t\tif !$next {\r\n\t\t    warning \"Section already at bottom\"\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tvar next_id int\r\n\t\tvar last_id int\r\n\t\tnext_id = $id - 1\r\n\t\t$max_id = DBFind(\"sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\r\n\t\tlast_id = $max_id + 1\r\n\t\tDBUpdate(\"sections\", next_id, {\"id\":last_id})\r\n\t\tDBUpdate(\"sections\", $id, {\"id\":next_id})\r\n\t\tDBUpdate(\"sections\", last_id, {\"id\":$id})\r\n\t}\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "SectionRoles",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionRoles {\r\n\tdata {\r\n\t\tid int\r\n\t\trid int\r\n\t\toperation string\r\n\t}\r\n\r\n\tconditions {\r\n\t\tif $operation == \"add\" {\r\n\t\t\tvar roles_id map\r\n\t\t\tvar json array\r\n\t\t\tvar i int\r\n\t\t\ti = 0\r\n\t\t\troles_id = DBFind(\"sections\").Where({\"id\":$id}).Columns(\"roles_access\").Row()\r\n\t\t\tjson = JSONDecode(roles_id[\"roles_access\"])\r\n\t\t\twhile i < Len(json) {\r\n\t\t\t\tif (json[i]==$rid) {\r\n\t\t\t\t\twarning \"This role is already have permission\"\r\n\t\t\t\t}\r\n\t\t\t\ti = i + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\taction {\r\n\t\tvar roles_array array\r\n\t\troles_array = DBFind(\"sections\").Where({\"id\":$id}).Columns(\"roles_access\").One(\"roles_access\")\r\n\t\tif $operation == \"add\" {\r\n\t\t\tif (roles_array==\"[]\") {\t\t\t\r\n\t\t\t\tvar roles_id array\r\n\t\t\t\troles_id[0] = $rid\r\n\t\t\t\troles_id = JSONEncode(roles_id)\r\n\t\t\t\tDBUpdate(\"sections\", $id, {\"roles_access\":roles_id})\r\n\t\t\t} else {\r\n\t\t\t\tvar roles_id map\r\n\t\t\t\tvar json array\r\n\t\t\t\troles_id = DBFind(\"sections\").Where({\"id\":$id}).Columns(\"roles_access\").Row()\r\n\t\t\t\tjson = JSONDecode(roles_id[\"roles_access\"])\r\n\t\t\t\tjson = Append(json, $rid)\r\n\t\t\t\tjson = JSONEncode(json)\r\n\t\t\t\tDBUpdate(\"sections\", $id, {\"roles_access\":json})\r\n\t\t\t}\r\n\t\t} \r\n\t\tif $operation == \"remove\" {\r\n\t\t\t\tvar roles_id map\r\n\t\t\t\tvar json array\r\n\t\t\t\tvar buffer string\r\n\t\t\t\troles_id = DBFind(\"sections\").Where({\"id\":$id}).Columns(\"roles_access\").Row()\r\n\t\t\t\tjson = JSONDecode(roles_id[\"roles_access\"])\r\n\t\t\t\tbuffer = Join(json, \",\")\r\n\t\t\t\tif Contains(buffer, Str($rid)) {\r\n\t\t\t\t\tbuffer = Replace(buffer, `,` + Str($rid), ``)\r\n\t\t\t\t}\r\n\t\t\t\tif HasPrefix(buffer, Str($rid)) {\r\n\t\t\t\t\tbuffer = Replace(buffer, Str($rid) + `,`, ``)\r\n\t\t\t\t}\r\n\t\t\t\tjson = Split(buffer, \",\")\r\n\t\t\t\tjson = JSONEncode(json)\r\n\t\t\t\tDBUpdate(\"sections\", $id, {\"roles_access\":json})\r\n\t\t}   \r\n\t}\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "SelectApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SelectApp {\r\n    data {\r\n        ApplicationId int\r\n    }\r\n\r\n    conditions {\r\n        $app = DBFind(\"applications\").Columns(\"id,name\").Where({id: $ApplicationId}).Row()\r\n        if !$app{\r\n            warning \"Application not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var value map bufferId int\r\n        value[\"app_id\"] = Str($ApplicationId)\r\n        value[\"app_name\"] = $app[\"name\"]\r\n\r\n        bufferId = Int(DBFind(\"buffer_data\").Where({member_id: $key_id,key: \"export\"}).One(\"id\"))\r\n        if bufferId >0 {\r\n            DBUpdate(\"buffer_data\", bufferId, {\"value\": value})\r\n        } else {\r\n            DBInsert(\"buffer_data\", {\"member_id\": $key_id,\"key\": \"export\",\"value\": value})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UpdateMetrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UpdateMetrics {\r\n\tconditions {\r\n\t\tContractConditions(\"MainCondition\")\r\n\t}\r\n\taction {\r\n\t\tvar values array\r\n\t\tvalues = DBCollectMetrics()\r\n\r\n\t\tvar i, id int\r\n\t\tvar v map\r\n\t\twhile (i < Len(values)) {\r\n            var inmap map\r\n\r\n            v = values[i]\r\n            inmap[\"time\"] = v[\"time\"]\r\n            inmap[\"key\"] = v[\"key\"]\r\n            inmap[\"metric\"] = v[\"metric\"]\r\n            \r\n            id = Int(DBFind(\"metrics\").Columns(\"id\").Where(inmap).One(\"id\"))\r\n            var ival int\r\n\t\t\tif id != 0 {\r\n                ival = Int(v[\"value\"])\r\n\t\t\t\tDBUpdate(\"metrics\", id, {\"value\": ival})\r\n\t\t\t} else {\r\n                inmap[\"value\"] = Int(v[\"value\"])\r\n\t\t\t\tDBInsert(\"metrics\", inmap )\r\n\t\t\t}\r\n\t\t\ti = i + 1\r\n\t\t}\r\n\t}\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Export",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\r\n    data {}\r\n\r\n    func createExport(items array) string {\r\n        var res map\r\n        res[\"name\"] = $AppName\r\n        res[\"conditions\"] = $AppConditions\r\n        res[\"data\"] = items\r\n        return JSONEncodeIndent(res, \"    \")\r\n    }\r\n    func mapping(res map, resKey string, item map itemKey string){\r\n        if item[itemKey] {\r\n            res[resKey] = Str(item[itemKey])\r\n        }\r\n    }\r\n    func prepareItem(item map, type string) string {\r\n        var res map\r\n        res[\"Type\"] = type\r\n        mapping(res, \"Name\", item, \"name\")\r\n        mapping(res, \"Value\", item, \"value\")\r\n        mapping(res, \"Conditions\", item, \"conditions\")\r\n        mapping(res, \"Menu\", item, \"menu\")\r\n        mapping(res, \"Title\", item, \"title\")\r\n        mapping(res, \"Trans\", item, \"res\")\r\n        mapping(res, \"Columns\", item, \"columns\")\r\n        mapping(res, \"Permissions\", item, \"permissions\")\r\n        mapping(res, \"Confirmation\", item, \"confirmation\")\r\n        return res\r\n    }\r\n\r\n    func getColumnsWithType(table_name string, columnsJSON string) string {\r\n        var colsMap map result columns array\r\n        colsMap = JSONDecode(columnsJSON)\r\n        columns = GetMapKeys(colsMap)\r\n        var i int\r\n        while i < Len(columns){\r\n            if Size(columns[i]) > 0 {\r\n                var col map\r\n                col[\"name\"] = columns[i]\r\n                col[\"conditions\"] = colsMap[col[\"name\"]]\r\n                col[\"type\"] = GetColumnType(table_name, col[\"name\"])\r\n                result = Append(result, col)\r\n            }\r\n            i = i + 1\r\n        }\r\n        return JSONEncode(result)\r\n    }\r\n\r\n    func exportTable(type string, result array) array {\r\n        var items array limit offset i lenItems int item map\r\n        limit = 250\r\n        while true{\r\n            var rows array where map\r\n            if type == \"menu\" {\r\n                if Len($menus_names) > 0 {\r\n                    where[\"name\"] = {\"$in\": $menus_names}\r\n                }\r\n            }else{\r\n                where[\"app_id\"] = $AppID\r\n            }\r\n            if where {\r\n                rows = DBFind(type).Limit(limit).Offset(offset).Where(where)\r\n            }\r\n            if Len(rows) > 0{\r\n                i = 0\r\n                while i < Len(rows){\r\n                    items = Append(items, rows[i])\r\n                    i = i + 1\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset + limit\r\n        }\r\n        i = 0\r\n        lenItems = Len(items)\r\n        while i < lenItems {\r\n            item = items[i]\r\n            if type == \"tables\" {\r\n                item[\"columns\"] = getColumnsWithType(item[\"name\"], item[\"columns\"])\r\n            }\r\n            result = Append(result, prepareItem(item, type))\r\n            if type == \"pages\" {\r\n                $menus_names = Append($menus_names, Sprintf(\"'%v'\", item[\"menu\"]))\r\n            }\r\n            i = i + 1\r\n        }\r\n        return result\r\n    }\r\n\r\n    conditions {\r\n        var buf app map\r\n        buf = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where({member_id:$key_id, key: \"export\"}).Row()\r\n        if !buf{\r\n            warning \"Application not selected\"\r\n        }\r\n        $AppID = Int(buf[\"value.app_id\"])\r\n        $AppName = Str(buf[\"value.app_name\"])\r\n\r\n        app = DBFind(\"applications\").Columns(\"id,conditions\").Where({id:$AppID}).Row()\r\n        if !app{\r\n            warning \"Application not found\"\r\n        }\r\n        $AppConditions = app[\"conditions\"]\r\n\r\n        $menus_names = []\r\n    }\r\n\r\n    action {\r\n        var exportJSON string items array\r\n        items = exportTable(\"pages\", items)\r\n        items = exportTable(\"contracts\", items)\r\n        items = exportTable(\"blocks\", items)\r\n        items = exportTable(\"languages\", items)\r\n        items = exportTable(\"app_params\", items)\r\n        items = exportTable(\"tables\", items)\r\n        items = exportTable(\"menu\", items)\r\n\r\n        exportJSON = createExport(items)\r\n        UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", \"export\", exportJSON, 1, \"application/json\")\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}