{
    "name": "Basic application",
    "data": [
        {
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\n\tMenuItem(Title:Voting templates, Page:voting_templates_list, Icon:\"fa icon-pin\")\n    MenuItem(Title:Platform parameter,Page:sysparams_list, Icon:\"fa icon-settings\")\n    MenuItem(Title:Candidate for validators, Page: sysparams_candidates_list, Icon:\"icon-list\")\n    MenuItem(Title:Ecosystems list, Page: sysparams_ecosystems_list, Icon:\"icon-list\")\n    MenuItem(Title:Tokens refund list, Page:tokenrefund_list, Icon:\"icon-list\")\n\tMenuItem(Title:Ecosystems, Page: membership_ecosystems_list, Icon:\"fa fa-list-ul\")\n}",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "laws",
            "Columns": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"page\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_template_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "membership_requests",
            "Columns": "[{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"ecosystem_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"request_status\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"membership_accept\\\", \\\"membership_decline\\\")\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\n    {\n        \"name\": \"commission_address\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"comment\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"host_ip\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"description\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"commission_pub\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidate_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"victim_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"attacker_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"validator_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\n    {\n        \"name\": \"voters\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidates\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_participants\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"init_contract\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"title\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"quorum\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"subject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_voting\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"volume\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"vacancies\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_accept\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"accept_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_reject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"reject_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"false\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Name": "catalog_ecosystems_freetype",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Name": "catalog_ecosystems_type",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Name": "first_node",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "investors_number",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Name": "tokenrefund_result",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Name": "tokenrefund_status",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_sysparams_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_tokenrefund_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_validators_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Name": "voting_ves_template_id",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name: ecosystems, Source: src_num)\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(appication)\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\n    Data(section1, \"name,type,res,req,src\"){\n        Ecosystem_number,select_validate,ecosystem,*,src_num\n        Ecosystem_name,input,catalog_ecosystems_name,*,\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\n    }\n    Data(section2, \"name,type,res,req,src\"){\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\n    }\n    Data(section3, \"name,type,res,req,src\"){\n        Description,textarea,catalog_ecosystems_description,*,\n        Conditions,textarea,catalog_ecosystems_conditions,*,\n    }\n    Data(section4, \"name,type,res,req,src\"){\n        Vde_page,input,vde_page,,\n        Vde_form_address,input,vde_form_desc,,\n    }\n    Data(section5, \"name,type,res,req,src\"){\n        Web_page,input,web_page,,\n        Web_form_address,input,web_form_desc,,\n    }\n    Data(section6, \"name,type,res,req,src\"){\n        Email,input,catalog_ecosystems_contact_email,,\n        Phone,input,catalog_ecosystems_contact_phone,,\n    }\n    Data(sections, \"section_name\"){\n        section1\n        section2\n        section3\n        section4\n        section5\n        section6\n    }\n\n    SetTitle($catalog_ecosystems_form$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\n    }\n\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    ForList(sections){\n                        Div(list-group-item){\n                            ForList(#section_name#){\n                                Div(row){\n                                    Div(col-md-5 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(#res#))\n                                            If(#req#==*){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-7 mb-sm text-left){\n                                        If(#type#==select_validate){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\n                                            InputErr(Name: #name#, required: need)\n                                        }\n                                        If(#type#==select){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                        If(#type#==image){\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\n                                        }\n                                        If(#type#==input){\n                                            Input(Name: #name#)\n                                        }\n                                        If(#type#==textarea){\n                                            Input(Name: #name#, Type:textarea)\n                                        }\n                                        If(#type#==radio){\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_list)\n                    Button(Contract: catalog_ecosystems_Add, Class: btn btn-primary, Page: catalog_ecosystems_list, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Name": "catalog_ecosystems_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(appication)\n    SetTitle($catalog_ecosystems$)\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_create, Icon: icon-plus)\n\n    If(#param_flag_free#==0){\n        SetVar(Name: v_where, Value: \"deleted=0\")\n    }.ElseIf(#param_flag_free#==1){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=1\")\n    }.ElseIf(#param_flag_free#==2){\n        SetVar(Name: v_where, Value: \"deleted=0 and flag_free=2\")\n    }.Else{\n        SetVar(Name: v_where, Value: \"deleted=0\")\n        SetVar(Name: param_flag_free, Value: 0)\n    }\n\n    Div(row){\n        Div(col-md-12 text-left){\n            Div(btn-group){\n                If(#param_flag_free#==0){\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==1){\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==2){\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\n                }\n            }.Custom(custom_type){\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\n            }.Custom(custom_free){\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\n            }.Custom(custom_ecosystem){\n                Span(Class: h5, Body: #ecosystem_number#)\n            }.Where(#v_where#).Order(\"ecosystem_number\")\n\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_catalog, Columns:\"$id$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\n                }\n            }\n        }\n    }\n}",
            "Name": "catalog_ecosystems_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(app)\r\n    DBFind(Name: catalog_ecosystems, Source: src_catalog).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Where(\"id=#v_id#\").Vars(prefix)\r\n    \r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n                                    DBFind(Name: binaries, Source: src_binaries).Columns(\"data\").Where(\"id=#prefix_image_id#\").Vars(img)\r\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "catalog_ecosystems_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($name$)\n        Input(Placeholder: Name of Ecosystem, Name:Name)\n    }\n    Div(form-group){\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: membership_ecosystems_list)\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: membership_ecosystems_list)\n    }\n}",
            "Name": "ecosystem_new",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->request_id,sender->image_id,sender->member_id,sender->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n   \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n\t\t\t\t\t\t\t\tDiv(m0 h3 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n\t\t\t\t\tDiv(list-group-item text-center){\r\n                        Button(Class: btn btn-danger, Body: Reject, Contract: \"membership_decide\", Page: default_page, Params: \"notific_id=#notific_id#,Accept=1\")\r\n\t\t\t\t\t\tButton(Class: btn btn-success, Body: Accept, Contract: \"membership_decide\", Page: default_page, Params: \"notific_id=#notific_id#,Accept=0\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_admin_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(Ecosystems)\n    Div(breadcrumb){\n        Div(row){\n            Div(col-md-10){\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\n            }\n            Div(col-md-2){\n                Button(Body: $create$, Class: pull-right, Page: ecosystem_new).Popup(Header: $create$, Width: \"30\")\n            }\n        }\n    }\n\n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and id != 1\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"id != 1\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(name)\n                        }\n                        Input(Name: Search, Value: #v_Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: membership_ecosystems_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#v_Where#\").Custom(custom_id){\n                Span(#id#)\n            }.Custom(custom_name){\n                Span(#name#)\n            }.Custom(custom_actions){\n                SetVar(req_id, \"\")\n                SetVar(k_id, \"\")\n                DBFind(notifications, src_notifications).Where(\"sender->member_id = '#key_id#' and page_params->ecosystem_id = '#id#' and closed = 0\").Count(notific_count)\n                DBFind(keys, src_keys).Where(\"id = #key_id#\").Ecosystem(#id#).Limit(1).Vars(\"k\")\n\n                If(And(#notific_count# == 0, GetVar(k_id) == \"\")){\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"membership_send_request\", Page: membership_ecosystems_list, Params: \"ecosystem_num=#id#\")\n                }\n            }\n\t\t\t\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_ecosystems, Columns: \"ID=custom_id,$name$=custom_name,=custom_actions\")\n                }\n            }\n\t\t\t\n            If(GetVar(isSearch) == 1){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: membership_ecosystems_list, PageParams: \"isSearch=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "membership_ecosystems_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\t\r\n\tDBFind(Name: notifications, Source: src_notific).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name\").Where(\"id = #notific_id#\").Vars(notific)\r\n    \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: text-success h3){\r\n                                Request is accepted!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=default_page\")\r\n                        }\r\n                    }.Else{\r\n                       Div(list-group-item text-center){\r\n                            Span(Class: text-danger h3){\r\n                                Request is rejected!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            Button(Class: btn btn-primary, Body: OK, Contract: \"notifications_Close\", Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                        } \r\n                    }\r\n\t\t\t\t\t\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "membership_user_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n\n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates$, sysparams_candidates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n\n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n                Div(panel-footer text-right){\n                    Div(pull-left){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates_list)\n                    }\n                    Button(Contract: sysparams_CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates_list, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Name": "sysparams_candidate_validators_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\n    SetTitle($sysparams_candidates$)\n\n    DBFind(Name:sysparams_candidate, Source: src_candidates).Where(\"deleted=0\").Custom(_actions){\n        If(#template_id#>0){\n            Div(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n                Button(Contract: voting_TemplateRun, Page: voting_list, Class: btn btn-default fa fa-play)\n            }\n        }.Else{\n            Span($voting_template_not_found$,text-muted)\n        }\n\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }\n\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates$)\n    }\n\n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                Form(table-responsive){\n                    Input(Name: Duration, Type: hidden, Value: 14)\n                    Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $add$, Class: btn btn-primary, Page: sysparams_candidate_validators_create)\n                }\n            }\n        }\n    }\n}",
            "Name": "sysparams_candidates_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\nDBFind(buffer_data).Where(\"member_id=#key_id# and key='metrics'\").Vars(m)\nJsonToSource(src_metrics,#m_value#)\n\nSetTitle($sysparams_ecos$)\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\n    Div(text-right){\n        If(#template_id#>0){\n            If(#is_valued#==0){\n                Input(Name: RowId, Type: hidden, Value: #id#)\n                Input(Name: NewValue, Type: hidden, Value: 1)\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecosystems_list, Contract: voting_TemplateRun)\n            }\n        }.Else{\n            Span(voting id template not found in parameters, text-muted)\n        }\n    }\n}.Custom(_valued){\n    If(#is_valued#==1){\n        is valued\n    }\n}.Custom(_metrics){\n    If(#m_id#>0){\n        SetVar(eco_id,#id#)\n        ForList(src_metrics){\n            If(#key#==#eco_id#){\n                LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\n            }\n        }\n    }\n}\n\nData(form, \"Name,Type,Src\"){\n    Interval,number,\n    Aggregate,select,aggregates\n}\nData(aggregates, \"id,name\"){\n    max,Maximum\n    min,Minimum\n    avg,Average\n}\n\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        Div(panel-body){\n            ForList(form){\n                Div(row form-group){\n                    Div(col-sm-3 text-right){\n                        Label(For:#Name#){\n                            LangRes(#Name#)\n                        }\n                    }\n                    Div(col-sm-9){\n                        If(#Type#==datetime){\n                            Input(Name:#Name#, Type:date)\n                        }.ElseIf(#Type#==select){\n                            Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\n                        }.Else{\n                            Input(Name:#Name#, Type:#Type#)\n                        }\n                    }\n                }\n            }\n        }\n        Div(panel-footer text-right){\n            Button(Body: LangRes(udpate_metrics), Page: sysparams_ecosystems_list, Class:btn btn-primary, Contract:sysparams_UpdateMetrics)\n        }\n    }\n    Form(panel panel-primary){\n        Div(panel-body){\n            Form(table-responsive){\n                Input(Name: TableWritten, Type: hidden, Value: ecosystems)\n                Input(Name: ColumnName, Type: hidden, Value: is_valued)\n                Input(Name: Duration, Type: hidden, Value: 3)\n                Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\n            }\n        }\n    }\n}\n",
            "Name": "sysparams_ecosystems_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetTitle(Platform parameters)\nJsonToSource(nodes){\n    SysParam(full_nodes)\n}\nForList(nodes){\n    Div(#key_id#)\n}\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\n    DBFind(contracts).Where(\"name='#name#'\").Columns(id).Vars(sp)\n    If(#sp_id#>0){\n        If(#name#==\"full_nodes\"){\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\n        }.Else{\n            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\n        }\n    }.Else{\n        condition contract not found\n    }\n}.Custom(_val){\n    Div(){\n        #value#\n    }.Style(max-width: 500px;overflow: hidden;)\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Div(Class:text-muted, Body: \"Parameters for configuring nodes, transactions, blocks, and payment for network resources.\")\n        Div(Class:text-muted, Body: \"Parameters change only by voting of different roles.\")\n    }\n    DBFind(Name: roles_participants, Source: roles).Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0\").Vars(validator)\n    If(#validator_id#>0){\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Div(panel panel-primary text-center){\n                    Div(panel-heading){$validator_removing$}\n                    Div(panel-body text-center){$validator_removing_desc$}\n                    Div(panel-footer text-right){\n                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                    }\n                }\n            }\n        }\n    }\n    Div(table-responsive){\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\n    }\n}",
            "Name": "sysparams_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: LangRes(sysparams_ecos), Page: sysparams_ecosystems_list)\n        Span(\"/\",mh-sm)\n        Span(LangRes(sysparams_metrics), text-muted)\n    }\n    SetVar(title,\"LangRes(sysparams_metrics)\")\n    SetTitle(#title#)\n    Div(container){\n        If(GetVar(Id)){\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\n            SetTitle(#title#)\n            Data(tables, \"Name,Metric\"){\n                pages,ecosystem_pages\n                members,ecosystem_members\n                tx,ecosystem_tx\n            }\n            ForList(tables){\n                DBFind(metrics,src_metric).Where(\"key='#Id#' and metric='#Metric#'\").Order(\"time\").Count(count)\n                If(#count#>0){\n                    Div(h3){LangRes(#Name#)}\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\n                }\n            }\n        }.Else{\n            Div(alert alert-warning){\n                Ecosystem id not found\n            }\n        }\n    }\n}",
            "Name": "sysparams_metrics",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\nSetTitle($voting$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\n        DBFind(system_parameters).Where(\"name='#param_name#'\").Vars(param)\n        DBFind(voting_templates).Columns(\"title\").Where(\"id=#template_id#\").Vars(template)\n        SetTitle(#template_title#)\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                If(#param_name#!=\"full_nodes\"){\n                    Form(panel panel-primary){\n                        Div(panel-heading h3){#param_name#}\n                        Data(params, \"Name,Type,Val\"){\n                            OldValue,plain,#param_value#\n                            NewValue,textarea,\n                        }\n                        Div(panel-body){\n                            Input(Name:Duration, Type:hidden, Value:21)\n                            Input(Name:TemplateId, Type:hidden, Value:#template_id#)\n                            Input(Name:ColumnName, Type:hidden, Value:#param_name#)\n\n                            ForList(params){\n                                If(#Type#==hidden){\n                                    Input(Name: #Name#, Type:#Type#, Value:#Val#)\n                                }.Else{\n                                    Div(row form-group){\n                                        Div(col-md-3 text-right mt-sm){\n                                            Label(For: #Name#){LangRes(#Name#)}\n                                        }\n                                        Div(col-md-9 text-left){\n                                            If(#Type#==plain){\n                                                Div(list-group-item){\n                                                    #Val#\n                                                }\n                                            }.Else{\n                                                Input(Name: #Name#, Type:#Type#, Value:#Val#)\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Div(pull-left){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                            }\n                            Button(Body: LangRes(voting), Class: btn btn-primary, Contract: voting_TemplateRun, Page: voting_list)\n                        }\n                    }\n                }.Else{\n                    SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(App:#application_id#, Name: first_node)).(first_node_set,)\n                    Form(panel panel-primary){\n                        Div(panel-heading text-center h3){\n                            Span(#param_name#, text-uppercase): Span($add$ $new_value$, text-lowercase)\n                        }\n                        If(`#full_nodes#`==\"\"){\n                            JsonToSource(src_first_node,#first_node#)\n                            ForList(src_first_node){\n                                If(#value#==\"\"){\n                                    SetVar(first_node_set,error)\n                                }\n                            }\n                            If(#first_node_set#==error){\n                                Div(panel-body text-center){\n                                    ForList(src_first_node){\n                                        If(#value#==\"\"){\n                                            Div(){first node: '#key#' empty}\n                                        }\n                                    }\n                                }\n                                Div(panel-footer text-center){\n                                    DBFind(app_params).Where(\"name='first_node'\").Vars(first_node_param)\n                                    Button(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#\"){\n                                        Install the first node before adding the new\n                                    }\n                                }\n                            }\n                        }\n                        If(#first_node_set#!=error){\n                            Data(new_node_form, \"Name,Type,Placeholder,Value\"){\n                                TcpAddress,text,tcp address,\"\"\n                                ApiAddress,text,api address,\"\"\n                                KeyId,number,key id,#key_id#\n                                PubKey,text,public key,\"\"\n                            }\n                            Div(panel-body){\n                                Input(Name:Duration, Type:hidden, Value:21)\n                                ForList(new_node_form){\n                                    Div(row form-group){\n                                        Div(col-md-3 text-right){\n                                            Label(For: #Name#){LangRes(#Name#)}\n                                        }\n                                        Div(col-md-9 text-left){\n                                            Input(Name: #Name#, Placeholder: #Placeholder#, Type: #Type#, Value: #Value#)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(panel-footer text-right){\n                                Div(pull-left){\n                                    Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                                }\n                                Button(Body: LangRes(voting), Class: btn btn-primary, Contract: sysparams_StartNodeAdd, Page: voting_list)\n                            }\n                        }\n                    }\n                    AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\n                    SetVar(node_owner,)\n                    ForList(nodes_keys){\n                        If(#name#==\"key_id\"){\n                            SetVar(node_owner, 1)\n                        }\n                    }\n\n                    If(#node_owner#==1){\n                        Form(panel panel-primary){\n                            Div(panel-heading text-center h3){$delete_node$}\n                            Div(panel-body text-center){$delete_node_desc$}\n                            Div(panel-footer text-right){\n                                Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_RemoveNode)\n                            }\n                        }\n                    }\n                    If(`#full_nodes#`!=\"\"){\n                        Div(panel panel-primary){\n                            Div(panel-heading text-center h3){LangRes(full_nodes)}\n                            Div(panel-body text-center){\n                                Div(col-sm-12 text-center){\n                                    #full_nodes#\n                                }.Style(word-break: break-all;)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 text-danger text-center text-bold){\n            If(#param_index#>0){}.Else{\n                Div(){LangRes(attention)}\n            }\n            If(#template_id#>0){}.Else{\n                Div(mb-sm){\n                    LangRes(voting_template_not_found)\n                }\n                DBFind(app_params).Where(\"name='voting_sysparams_template_id'\").Vars(template_param)\n                LinkPage(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#template_param_id#\"){\n                    Set the template ID\n                }\n            }\n        }\n    }\n}",
            "Name": "sysparams_voting",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->tokenrefund_id\").Vars(note)\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\n\n    Data(inputs,\"Name,Type,Res,Value\"){\n        Amount,number,amount,#tr_amount#\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\n        Note,textarea,description,#tr_note#\n    }\n    Div(content-wrapper){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading, Body: $tokenrefund_start$)\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-sm-4){LangRes(#Res#)}\n                                Div(col-sm-8){\n                                    If(#Type#==textarea){\n                                        #Value#\n                                    }.Else{\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Button(Body: $approve$, Contract: tokenrefund_Accept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "tokenrefund_accept",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\n    Amount,number,amount,\"\"\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\n    Note,textarea,description,\"\"\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $tokenrefund_start$)\n                Div(panel-body){\n                    ForList(Source: inputs){\n                        Div(row form-group){\n                            Div(col-sm-4){LangRes(#res#)}\n                            Div(col-sm-8){\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $start_refund$, Contract: tokenrefund_Start, Page: tokenrefund_list, Class: btn btn-primary)\n                    Div(pull-left){\n                         Button(Body: LangRes(back), Class: btn btn-default, Page: tokenrefund_list)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "tokenrefund_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\n    SetTitle($tokenrefund_list$)\n\n    DBFind(Name: tokenrefund, Source: src).Order(id desc).Custom(_status){\n        If(#status#>0){\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\n            LangRes(#sta#)\n        }.Else{\n            $tokenrefund_status0$\n        }\n    }.Custom(_result){\n        If(#result#>0){\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\n            LangRes(#res#)\n        }.Else{\n            $tokenrefund_result0$\n        }\n    }.Custom(_blocked){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n    }.Custom(_closed){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n    }.Custom(_accounts){\n        Div(){$tokenrefund_victim$: #victim_key_id#}\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\n    }.Custom(_voting){\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\n    }\n\n    Div(panel panel-primary){\n        Div(table-responsive){\n            Table(Source: src, Columns: \"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\n        }\n\n        Form(panel-footer text-right){\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_create)\n        }\n    }\n}\n\n",
            "Name": "tokenrefund_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\nSetTitle($template_create$)\n\nIf(#TemplateId#>0){\n    DBFind(voting_templates, template).Where(id=#TemplateId#).Vars(template)\n    SetVar(title, #template_title#)\n    SetVar(typevoting, #template_type_voting#)\n    SetVar(volume, #template_volume#)\n    SetVar(subj, #template_subject#)\n    SetVar(quorum, #template_quorum#)\n    SetVar(voters, #template_voters#)\n    SetVar(candidates, #template_voters#)\n    SetVar(vacancies, #template_vacancies#)\n    SetVar(contract_init, #template_init_contract#)\n    SetVar(contract_accept, #template_contract_accept#)\n    SetVar(accept_params, #template_accept_params#)\n    SetVar(contract_reject, #template_contract_reject#)\n    SetVar(reject_params, #template_reject_params#)\n\n}.Else{\n    SetVar(template_id, 0)\n    SetVar(title, New voting)\n    SetVar(typevoting, 0)\n    SetVar(volume, 50)\n    SetVar(quorum, 51)\n    SetVar(subj, \"\")\n    SetVar(voters, \"\")\n    SetVar(candidates, \"\")\n    SetVar(vacancies, 1)\n    SetVar(contract_init, \"\")\n    SetVar(contract_accept, \"\")\n    SetVar(accept_params, \"\")\n    SetVar(contract_reject, \"\")\n    SetVar(reject_params, \"\")\n\n}\nIf(#TypeDecision#>0){\n    SetVar(typedec,#TypeDecision#)\n}.Else{\n    SetVar(typedec,0)\n}\nIf(#TypeParticipants#>0){\n    SetVar(typepart,#TypeParticipants#)\n}.Else{\n    SetVar(typepart,0)\n}\nAppParam(App:#application_id#, Name: type_voting_participants, Source: src_typepart)\nAppParam(App:#application_id#, Name: type_voting, Source: src_typevoting)\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: src_typedec)\nDBFind(Name: roles, Source: src_roles).Where(\"deleted=0\").Order(id).Custom(name){\n    #role_name#\n}\n\nIf(#typedec#>0){\n    Data(data_inputs, \"data\"){\n        commons_req\n        decisions\n        participants\n        commons\n    }\n    Data(commons_req, \"name,type,res,star,value,control,src,desc\"){\n        Title,text,name,*,#title#,input,\"\",\"\"\n        TypeParticipants,text,participants,*,#typepart#,disabled,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #typepart#)\",\"\"\n        TypeDecision,text,decision,*,#typedec#,disabled,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #typedec#)\",\"\"\n        TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,\"\"\n        Volume,number,voting_volume,*,#volume#,validate,\"\",$voting_volume_desc$\n        Quorum,number,voting_quorum,*,#quorum#,validate,\"\",$voting_quorum_desc$\n        Subject,text,voting_subject,*,#subj#,input,\"\",\"\"\n    }\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\n        InitContract,text,voting_init_contract,\"\",#contract_init#,input,\"\",$voting_init_contract_desc$\n        ContractAccept,text,voting_contract_accept,\"\",#contract_accept#,contract,ParamsAccept,#accept_params#\n        ContractReject,text,voting_contract_reject,\"\",#contract_reject#,contract,ParamsReject,#reject_params#\n    }\n    If(Or(#typedec#==1,#typedec#==2)){\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){\n            Vacancies,number,vacancies,\"*\",#vacancies#,input,\"\",\"\"\n            Candidates,text,candidates_role,\"*\",#voters#,select,src_roles,\"\"\n        }\n    }.Else{\n        Data(decisions, \"name,type,res,star,value,control,src,desc\"){}\n    }\n    If(#typepart#==3){\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){\n            Voters,text,voters_role,\"*\",#voters#,select,src_roles,\"\"\n        }\n    }.Else{\n        Data(participants,\"name,type,res,star,value,control,src,desc\"){}\n    }\n}.Else{\n    Data(data_inputs, \"data\"){\n        commons\n    }\n    Data(commons, \"name,type,res,star,value,control,src,desc\"){\n        TypeDecision,text,decision,*,#template_type_decision#,radio,src_typedec,\"\"\n        TypeParticipants,text,participants,*,#template_type_participants#,select,src_typepart,\"\"\n    }\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $template_create$)\n    }\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(voting_params)}\n                Div(panel-body){\n                    ForList(data_inputs){\n                        ForList(#data#){\n                            Div(row form-group){\n                                Div(col-md-4 mt-sm text-right){\n                                    Label(For: #name#){\n                                        LangRes(#res#)\n                                        If(#star#==\"*\"){\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                }\n                                Div(col-md-8 text-left){\n                                    If(#control#==\"select\"){\n                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)\n                                    }.ElseIf(#control#==\"disabled\"){\n                                        #src#\n                                        Input(Name: #name#, Type: hidden, Value: #value#)\n                                    }.ElseIf(#control#==\"input\"){\n                                        Input(Name: #name#, Value: #value#, Type: #type#)\n                                    }.ElseIf(#control#==\"validate\"){\n                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)\n                                        InputErr(Name: #name#, minLength: Please enter #name#)\n                                    }.ElseIf(#control#==\"contract\"){\n                                        Div(row){\n                                            Div(col-md-6){\n                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)\n                                            }\n                                            Div(col-md-6){\n                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)\n                                            }\n                                        }\n                                    }.ElseIf(#control#==\"radio\"){\n                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)\n                                    }\n                                    If(And(#desc#!=\"\",#desc#!=\"NULL\")){\n                                        P(Class: m0 text-muted, Body: #desc#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                Div(panel-footer text-right){\n                    Div(pull-left){\n                        If(#typedec#>0){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        }.Else{\n                            If(#TemplateId#>0){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\n                            }.Else{\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates_list)\n                            }\n                        }\n                    }\n                    If(#typedec#>0){\n                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates_list, Contract: voting_TemplateStore)\n                    }.Else{\n                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "voting_template_create",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(Name:applications, Source:src_app).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\n    SetTitle($voting_start$)\n    If(#TemplateId#>0){\n        DBFind(Name:voting_templates, Source: templates).Where(id=#TemplateId#).Vars(template)\n        If(#template_voters#>0){\n            DBFind(Name:roles, Source: vid_roles).Columns(\"role_name\").Where(\"id=#template_voters#\").Vars(vid)\n            SetVar(v_role, \"#vid_role_name#\")\n        }.Else{\n            SetVar(v_role, \"\")\n        }\n\n        If(#template_candidates#>0){\n            DBFind(Name:roles, Source: cid_roles).Columns(\"role_name\").Where(\"id=#template_candidates#\").Vars(cid)\n            SetVar(c_role, \"#cid_role_name#\")\n        }.Else{\n            SetVar(c_role, \"\")\n        }\n        Data(inputs, \"res,value\"){\n            name,\"#template_title#\"\n            participants,\"AppParam(App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\"\n            voting_type,\"AppParam(App:#application_id#, Name: type_voting, Index: #template_type_voting#)\"\n            decision,\"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\"\n            voting_volume,\"#template_volume#\"\n            voting_quorum,\"#template_quorum#\"\n            voting_subject,\"#template_subject#\"\n            voters,\"#v_role#\"\n            candidates,\"#c_role#\"\n            vacancies,\"#template_vacancies#\"\n            init_contract,\"#template_init_contract#\"\n            voting_contract_accept,\"#template_contract_accept#(#template_accept_params#)\"\n            voting_contract_reject,\"#template_contract_reject#(#template_reject_params#)\"\n            duration,\"Input(Name:Duration, Type:number, Value:3)\"\n        }\n\n        If(#template_type_decision#==3){\n            Data(decision_inputs, \"name,type,res,star,value,control\"){\n                TextDocument,textarea,text_document,*,\"\",textarea\n            }\n        }.ElseIf(#template_type_decision#==4){\n            If(#template_type_voting#==2){\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\n                    ColumnName,text,system_param,*,\"\",input\n                    NewValue,text,value,*,\"\",input\n                }\n            }.Else{\n                Data(decision_inputs,\"name,type,res,star,value,control\"){\n                    TableWritten,text,table_to_written,*,\"\",input\n                    RowId,number,row_id,*,\"\",input\n                    ColumnName,text,column_name,*,\"\",input\n                    NewValue,text,value,*,\"\",input\n                }\n            }\n        }.Else{\n            Data(decision_inputs, \"name,type,res,star,value,control\"){}\n        }\n    }\n    Div(breadcrumb){\n        LinkPage($voting_templates$, voting_templates)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting_start$)\n    }\n\n    If(#TemplateId#>0){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_params)}\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-md-4 text-right){\n                                    Strong(LangRes(#res#))\n                                }\n                                Div(col-md-8 text-left){\n                                    If(\"#value#\"!=\"()\"){\n                                        #value#\n                                    }\n                                }\n                            }\n                        }\n                        ForList(decision_inputs){\n                            Div(row form-group){\n                                If(#control#!=\"textarea\"){\n                                    Div(col-md-4 mt-sm text-right){\n                                        Label(For: #name#){\n                                            LangRes(#res#)\n                                            If(#star#==\"*\"){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-8 text-left){\n                                        If(#control#==\"input\"){\n                                            Input(Name: #name#, Value: #value#, Type: #type#)\n                                        }\n                                    }\n                                }\n                                If(#control#==\"textarea\"){\n                                    Div(col-md-12){\n                                        Label(For: #name#){LangRes(#res#)}\n                                        Input(Name: #name#, Type: textarea, Value: #value#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates_list)\n                        }\n                        Div(text-right){\n                            Button(Class: fa fa-copy btn btn-default, Page: voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: voting_list, Contract: voting_TemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Name": "voting_template_start",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where(\"name='Basic application'\").Vars(application)\nDBFind(voting_templates, src_templates).Custom(_participants){\n    AppParam(App:#application_id#, Name:type_voting_participants, #type_participants#)\n}.Custom(_decision){\n    AppParam(App:#application_id#, Name:type_voting_decisions, #type_decision#)\n}.Custom(_type){\n    AppParam(App:#application_id#, Name:type_voting, #type_voting#)\n}.Custom(_buttons){\n    Button(Class: btn btn-default fa fa-eye, Page: voting_template_start, PageParams: \"TemplateId=#id#\")\n}.Custom(_contracts){\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n        Div(){#init_contract#}\n    }\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n        Div(){#contract_accept#}\n    }\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n        Div(){#contract_reject#}\n    }\n}.Custom(_vq){\n    #volume#/#quorum#\n}.Custom(_vacancies){\n    If(#vacancies#>0){\n        #vacancies#\n    }\n}.Order(\"id desc\").Count(template_count)\n\nSetTitle($voting_templates$)\nIf(#template_count#>0){\n    AddToolButton(Title: $create$, Page: voting_template_create, Icon: icon-plus)\n}\n\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        If(#template_count#>0){\n            Div(panel-body){\n                Div(table-responsive){\n                    Table(Source: src_templates, Columns:\"$id$=id,$title$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=_vacancies,$contracts$=_contracts,=_buttons\")\n                }\n            }\n        }.Else{\n            Div(panel-body text-center h3){\n                Button(Body: $install_default_templates$, Class: btn btn-primary, Page: voting_templates_list, Contract: voting_InstallTemplates)\n            }\n        }\n    }\n}",
            "Name": "voting_templates_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract catalog_ecosystems_Add {\n    data {\n        Ecosystem_name string\n        Ecosystem_number int\n        Ecosystem_type int\n        Description string\n        Conditions string\n        Flag_free int\n        Vde_form_address string \"optional\"\n        Vde_page string \"optional\"\n        Web_form_address string \"optional\"\n        Web_page string \"optional\"\n        Email string \"optional\"\n        Phone string \"optional\"\n    }\n    conditions {\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\n        FOUNDER_ACCOUNT = \"founder_account\"\n        DELEGATE_ACCOUNT = \"delegate_account\"\n        \n        if Size($Email) > 0 {\n            var emailParts int\n            emailParts = Split($Email, \"@\")\n            if Len(emailParts) != 2 {\n                warning \"Invalid email\"\n            }\n        }\n        \n        var ecoExists map\n        ecoExists = DBFind(\"catalog_ecosystems\").Where(\"ecosystem_number=? and deleted=0\", $Ecosystem_number).Row()\n        if ecoExists {\n            info \"The ecosystem with same number already added\"\n        }\n\n        var isFounder, isDelegate bool\n        var founder, delegate map\n        founder = DBFind(\"parameters\").Where(\"name=?\", FOUNDER_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        isFounder = founder[\"value\"] == $key_id\n        \n        delegate = DBFind(\"parameters\").Where(\"name=?\", DELEGATE_ACCOUNT).Ecosystem($Ecosystem_number).Row()\n        if delegate {\n            isDelegate = delegate[\"value\"] == $key_id\n        }\n        if !(isFounder || isDelegate) {\n            warning \"Sorry, you can not add this ecosystem\"\n        }\n    }\n    \n    action {\n        var ecosystem_info map\n        ecosystem_info[\"description\"] = $Description\n        ecosystem_info[\"conditions\"] = $Conditions\n        ecosystem_info[\"email\"] = $Email\n        ecosystem_info[\"phone\"] = $Phone\n        \n        var url_address map\n        url_address[\"web_page\"] = $Web_page\n        url_address[\"web_form_address\"] = $Web_form_address\n        url_address[\"vde_page\"] = $Vde_page\n        url_address[\"vde_form_address\"] = $Vde_form_address\n        \n        DBInsert(\"catalog_ecosystems\", \"ecosystem_name,ecosystem_number,ecosystem_type,image_id,ecosystem_info,url_address,flag_free\",\n        $Ecosystem_name, $Ecosystem_number, $Ecosystem_type, 0, ecosystem_info, url_address, $Flag_free)\n    }\n}",
            "Name": "catalog_ecosystems_Add",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_decide {\r\n    data {\r\n        notific_id int\r\n        Accept int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Where(\"id = ?\", $notific_id).Row()\r\n       \r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem(Int($request[\"page_params.ecosystem_id\"])).One(\"value\")\r\n       \r\n        if founder_id != $key_id {\r\n            warning \"You are not the founder of the ecosystem\"\r\n        }\r\n    }\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if ($Accept == 0){\r\n            params[\"status\"] = 1\r\n  \r\n            var table_name string\r\n            table_name = Sprintf(\"@%v_keys\", $request[\"page_params.ecosystem_id\"]) \r\n\r\n            var pub string\r\n            pub = DBFind(\"keys\").Where(\"id = ?\", $request[\"sender.member_id\"]).One(\"pub\")\r\n            DBInsert(table_name, \"id,pub\", $request[\"sender.member_id\"], pub)\r\n        }\r\n        else{   \r\n            params[\"status\"] = 0\r\n        }\r\n        \r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, \"icon icon-user-follow\", \"Request is accepted\", \"Your request for membership is accepted\", \"membership_user_view\", params)\r\n        notifications_Close(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Name": "membership_decide",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract membership_send_request {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n    \r\n    conditions {\r\n        \r\n    }\r\n    \r\n    action {\r\n\r\n        $found = DBFind(\"notifications\").Where(\"page_params->ecosystem_id = ? and sender->member_id = ? and closed = 0 and page_name = 'membership_admin_view'\", $ecosystem_num, $key_id)\r\n        \r\n        if Len($found) > 0 {\r\n            warning \"Request already sent\"\r\n        }\r\n\r\n        var notific_params map\r\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where(\"name = 'founder_account'\").Ecosystem($ecosystem_num).One(\"value\")\r\n\r\n        notifications_Send(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n    }\r\n}",
            "Name": "membership_send_request",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_AcceptValidator{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func conditions{\n        var prev string stack array\n        stack = JSONDecode(JSONEncode($stack))\n        prev = stack[0]\n        if Len(stack)>2{\n            prev = stack[Len(stack)-2]\n        }\n        if prev != \"@1voting_CheckDecision\"{\n            warning \"This contract allow starts only from @1voting_CheckDecision\"\n        }\n\n        var app_id templateId int params map\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        templateId = Int(AppParam(app_id,\"voting_validators_template_id\"))\n        if !DBFind(\"voting_templates\").Where(\"id=?\", templateId).One(\"id\"){\n            warning \"Voting template not found\"\n        }\n        if $VotingTemplateId != templateId{\n            warning \"Incorrect template\"\n        }\n        \n        var candidateId oldRoleId roleId int roleName string\n        oldRoleId = 4 // must be \"Candidate for validators\"\n        roleId = 5 \n        roleName = \"Validator\"\n        \n        candidateId = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=?\", $KeyId).One(\"candidate_key_id\")\n        if !candidateId {\n            warning \"Candidate key id not found\"\n        }\n        $rowId = Int(DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", oldRoleId, candidateId).One(\"id\"))\n        \n        $roleId = Int(DBFind(\"roles\").Where(\"id=? and role_name=? and deleted=0\", roleId, roleName).One(\"id\"))\n        if $roleId == 0 {\n            warning \"Validator role not found\"\n        }\n    }\n    \n    func action{\n        if $rowId > 0 {\n            Roles_Unassign(\"row_id\", $rowId)\n        }\n        Roles_Assign(\"rid,member_id\", $roleId, Int($KeyId))\n    }\n}",
            "Name": "sysparams_AcceptValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n    \n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n        \n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n        \n        return false\n    }\n    \n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n        \n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").Where(\"id=?\", $CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n        \n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string, roleId int, role map\n        roleName = \"Candidate for validators\"\n        roleId = 4\n        role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", roleName, roleId).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        Roles_Assign(\"rid,member_id\", roleId, $key_id)\n    }\n    \n    action{\n        \n        DBInsert(\"sysparams_candidate\", \"host_ip,commission_pub,commission_address,description,comment,candidate_key_id,timestamp date_created,deleted\", $HostIp, \"\", $CommissionAddress, $Description, $Comment, $key_id, $block_time, 0)\n        \n    }\n    \n}",
            "Name": "sysparams_CandidateValidatorRequest",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_CandidateValidator_Delete{\n    data{\n        Id int\n    }\n    conditions{\n        var candidateId, roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").Where(\"id=?\",$Id).One(\"candidate_key_id\")\n        \n        $role = DBFind(\"roles_participants\").Where(\"deleted=0 and role->id=? and member->member_id=?\", roleId, candidateId).Row()\n        if !$role {\n            warning \"Candidate role not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, \"deleted\", 1)\n        Roles_Unassign(\"row_id\", Int($role[\"id\"]))\n    }\n}",
            "Name": "sysparams_CandidateValidator_Delete",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i< Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n\n    conditions{\n        MainCondition()\n\n        var ROLE_NAME string ROLE_ID int\n        ROLE_NAME = \"Delegate\"\n        ROLE_ID = 7\n\n        // get role Id and Type\n        $role = DBFind(\"roles\").Where(\"role_name=? and id=? and deleted=0\", ROLE_NAME, ROLE_ID).Row()\n        if !$role{\n            warning Sprintf(\"Role %q not found\", ROLE_NAME)\n        }\n    }\n\n    action{\n        // get delegates ids\n        var delegateIds currentDelegates ecosystems array\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\n        var i ecoId int\n        while i < Len(ecosystems) {\n            var eco delegateParam map\n            eco = ecosystems[i]\n            ecoId = Int(eco[\"id\"])\n            delegateParam = DBFind(\"parameters\").Where(\"name='delegate_account'\").Ecosystem(ecoId).Row()\n            if !delegateParam{\n                delegateParam = DBFind(\"parameters\").Where(\"name='founder_account'\").Ecosystem(ecoId).Row()\n            }\n\n            if NotInArray(delegateParam[\"value\"], delegateIds){\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\n            }\n            i = i + 1\n        }\n\n        // remove old role assigns\n        currentDelegates = DBFind(\"roles_participants\").Columns(\"id,member->member_id\").Where(\"role->id=? and deleted=0\", $role[\"id\"])\n        i = 0\n        while i < Len(currentDelegates){\n            var delegate map\n            delegate = currentDelegates[i]\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\n                var id int\n                id = Int(delegate[\"id\"])\n                Roles_Unassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n\n        // assign new roles\n        i = 0\n        while i < Len(delegateIds) {\n            var delegateId int\n            delegateId = Int(delegateIds[i])\n            var key map\n            key = DBFind(\"keys\").Where(\"id=?\",delegateId).Row()\n            if key {\n                // check role dup\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=? and deleted=0\", delegateId, $role[\"id\"]).Row()\n                if !assigned{\n                    Roles_Assign(\"rid,member_id\", Int($role[\"id\"]), Int(key[\"id\"]))\n                }\n            }\n            i=i+1\n        }\n    }\n}",
            "Name": "sysparams_DelegateRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InitVoting{\n    data{\n        Name string\n        Value string\n    }\n\n    conditions{\n        if GetContractByName($Name){\n            var params map\n            params[\"Value\"] = $Value\n            CallContract($Name, params)\n        } else {\n            warning \"System parameter not found\"\n        }\n        // sysparams_InvestorRefresh()\n    }\n}",
            "Name": "sysparams_InitVoting",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_InvestorRefresh {\n    func NotInArray(val string, arr array) bool{\n        var i int\n        while i< Len(arr){\n            if val == Str(arr[i]){\n                return false\n            }\n            i=i+1\n        }\n        return true\n    }\n    conditions{\n        if $role_id != 3 {\n            // warning \"You not Validator. You can not to run this\"\n        }\n\n        // roles:id == 4 Investor with voting rights\n        $roleId = Int(DBFind(\"roles\").Where(\"id=4 and deleted=0\").One(\"id\"))\n        if !$roleId{\n            warning \"Investor role not found or deleted\"\n        }\n        var appId int\n        appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        $limitInvestors = Int(AppParam(appId,\"investors_number\"))\n        if $limitInvestors == 0 {\n            warning \"Investors number not set in application params\"\n        }\n    }\n\n    action{\n        // get investors ids\n        var keysInvestors assignedInvestors investorsIds assignedIds array\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order(\"amount desc, id\").Limit($limitInvestors)\n        assignedInvestors = DBFind(\"roles_participants\").Columns(\"member->member_id\").Where(\"role->id=? and deleted=0\", $roleId)\n\n        // get ids\n        var i int\n        while i < Len(keysInvestors) {\n            var inv map\n            inv = keysInvestors[i]\n            investorsIds[i] = inv[\"id\"]\n            i = i + 1\n        }\n        i=0\n        while i < Len(assignedInvestors) {\n            var inv map\n            inv = assignedInvestors[i]\n            assignedIds[i] = inv[\"member.member_id\"]\n            i = i + 1\n        }\n\n        // remove old investors\n        i=0\n        while i < Len(assignedIds) {\n            if NotInArray(assignedIds[i], investorsIds){\n                var assigned map\n                assigned = DBFind(\"roles_participants\").Where(\"member->member_id=? and role->id=?\", assignedIds[i], $roleId).Row()\n                if assigned {\n                    Roles_Unassign(\"row_id\", Int(assigned[\"id\"]))\n                }\n            }\n            i = i+1\n        }\n        // add new investors\n        i=0\n        while i < Len(investorsIds) {\n            if NotInArray(investorsIds[i], assignedIds){\n                if DBFind(\"keys\").Where(\"id=?\",investorsIds[i]).Row(){\n                    Roles_Assign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\n                }\n            }\n            i = i+1\n        }\n    }\n}",
            "Name": "sysparams_InvestorRefresh",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_RemoveNode{\n    data{}\n    func nodesRemove(keyId int) array{\n        var nodesJSON string\n        var nodes, res array\n        nodesJSON = SysParamString(\"full_nodes\")\n        if !HasPrefix(nodesJSON, \"[\") {\n            // empty string nodes\n            return res\n        }\n        nodes = JSONDecode(nodesJSON)\n        var i, i_res int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            if node[\"key_id\"] != keyId {\n                res[i_res] = node\n                i_res = i_res+1\n            }\n            i=i+1\n        }\n        return res\n    }\n    conditions{\n        if $original_contract != \"sysparams_ValidatorResign\"{\n            warning \"Unknown contract\"\n        }\n    }\n    \n    action{\n        var nodes array\n        nodes = nodesRemove($key_id)\n        var fullNodes string\n        fullNodes = JSONEncode(nodes)\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\n    }\n}",
            "Name": "sysparams_RemoveNode",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateRun{\n    data{\n        TemplateId int\n        Duration int\n\n        KeyId int \"optional\"\n        TableWritten string \"optional\"\n        RowId string \"optional\"\n        ColumnName string \"optional\"\n        NewValue string \"optional\"\n        TextDocument string \"optional\"\n    }\n    func checkInput(value, name string){\n        if Size(value) == 0 || value == \"NULL\" {\n            warning Sprintf(\"%q not found\", name)\n        }\n    }\n    func emptyOrValue(value string) string{\n        if value == \"NULL\" {\n            value = \"\"\n        }\n        return value\n    }\n\n    conditions{\n        var template map\n        template = DBFind(\"voting_templates\").Where(\"id=?\",$TemplateId).Row()\n        if !template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").Where(\"id=?\", $KeyId).Row()\n            if !$keyFind{\n                warning \"Key id not found\"\n            }\n        }\n        if $Duration <= 0{\n            $Duration = 3\n        }\n \n        var initContract string\n        initContract = template[\"init_contract\"]\n        $voters = template[\"voters\"]\n        $candidates = template[\"candidates\"]\n        $votingName = Sprintf(\"%v [template id:%v]\", template[\"title\"], $TemplateId)\n        $volume = Int(template[\"volume\"])\n        $quorum = Int(template[\"quorum\"])\n        $type_voting = Int(template[\"type_voting\"])\n        $participants = Int(template[\"type_participants\"])\n        $decision = Int(template[\"type_decision\"])\n        $vacancies = Int(template[\"vacancies\"])\n\n        if initContract != \"\" && initContract != \"NULL\"{\n            var initParam map\n            if $decision == 4 && $type_voting == 2 {\n                // voting for new value of sysparam\n                initParam[\"Name\"] = $ColumnName\n                initParam[\"Value\"] = $NewValue\n            }else{\n                initParam[\"KeyId\"] = $KeyId\n            }\n            CallContract(initContract, initParam)\n        }\n\n        $desc = Sprintf(\"template #%v\", $TemplateId)\n        if $type_voting < 1 || $type_voting > 2 {\n            warning \"Invalid type of voting\"\n        }\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\n\n        if $decision == 1 || $decision == 2 {\n            // role-candidates\n            checkInput($candidates, \"Candidate role\")\n            var candidate map\n            candidate = DBFind(\"roles\").Where(\"id=? and deleted=0\", $candidates).Row()\n            if !candidate {\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\n            }\n            $candidateId = Int(candidate[\"id\"])\n        }\n\n        if $decision == 3 {\n            // document approval\n            checkInput($TextDocument, \"TextDocument\")\n        }\n\n        if $decision == 4 {\n            // formal decision\n            // in the system vote need only a field and a value\n            checkInput($ColumnName, \"ColumnName\")\n            checkInput($NewValue, \"NewValue\")\n            if $type_voting == 2{\n                $desc = Sprintf(\"Parameter: %v, Value: %v\", $ColumnName, $NewValue)\n            }\n\n            if $type_voting == 1{\n                checkInput($TableWritten, \"TableWritten\")\n                checkInput($RowId, \"RowId\")\n                $desc = Sprintf(\"Table: %v, Column: %v, ID: %v, Value: %v\", $TableWritten, $ColumnName, $RowId, $NewValue)\n            }\n            if $RowId == \"\" || $RowId == \"NULL\"{\n                $RowId = 0\n            }\n\n        }\n        // check duplicated\n        if DBFind(\"votings\").Where(\"voting->name=? and flags->decision not in ('1', '-1') and deleted=0\", $votingName).Row(){\n            error \"Same voting already created\"\n        }\n\n\n        if $participants == 3 {\n            // if the type of the participants \"in role\" - check the role\n            var role map\n            role = DBFind(\"roles\").Where(\"id=? and deleted=0\", $voters).Row()\n            if !role {\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\n            }\n            $roleId = Int(role[\"id\"])\n        }\n    }\n\n    action{\n        var votingId int\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration)\n\n        if votingId == 0 {\n            warning \"votingId is zero\"\n        }\n        // the default argument for Contract\n        var defaultParams string\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\n\n        if Size($acceptParams) == 0{\n            $acceptParams = defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = defaultParams\n        }\n\n        if $decision == 1 || $decision == 2{\n            // 1. Role candidates with the registration of participants on request\n            // 2. Role candidates with manual registration of the participants\n            voting_SubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\n            voting_SubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        }\n        if $decision == 3 {\n            // Document approval\n            voting_SubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n\n        if $decision == 4 {\n            // Formal decision\n            voting_SubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n\n        }\n\n        if $decision == 5 {\n            // Execution of the contract\n            voting_SubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n        if $participants == 3 {\n            // participants: \"by role\"\n            voting_Invite(\"votingID,var_id\", votingId, $roleId)\n        }\n        if $participants == 1 {\n            // if the participants are \"all\", the invite has already occurred in \"voting_CreateNew\"\n        }\n    }\n}",
            "Name": "voting_TemplateRun",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartVotingValidator{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where(\"candidate_key_id=? and deleted=0\", $KeyId).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        sysparams_DelegateRefresh()\n    }\n}",
            "Name": "sysparams_StartVotingValidator",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateFullNodesKeysList{\n    data{}\n    conditions{\n        var appId int\n        appId = Int(DBFind(\"applications\").Where(\"name='Basic application' and deleted=0\").One(\"id\"))\n        $FULL_NODES_KEYS = \"full_nodes_keys\"\n        $FULL_NODES = \"full_nodes\"\n        $paramId = Int(DBFind(\"app_params\").Where(\"app_id=? and name=?\", appId, $FULL_NODES_KEYS).One(\"id\"))\n    }\n\n    action{\n        var nodesJson string\n        nodesJson = SysParamString($FULL_NODES)\n        var nodes keys array\n        if HasPrefix(nodesJson, \"[\"){\n            nodes = JSONDecode(nodesJson)\n        }\n\n        var i int\n        while i<Len(nodes){\n            var node map\n            node = nodes[i]\n            keys[i] = node[\"key_id\"]\n            i=i+1\n        }\n        var keysList cond string\n        keysList = Join(keys, \",\")\n        cond = `ContractConditions(\"MainCondition\")`\n        if $paramId > 0 {\n            DBUpdate(\"app_params\", $paramId, \"value,conditions\", keysList, cond)\n        }else{\n            DBInsert(\"app_params\", \"name,value,conditions\", $FULL_NODES_KEYS, keysList, cond)\n        }\n    }\n}",
            "Name": "sysparams_UpdateFullNodesKeysList",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_UpdateMetrics{\n    data{\n        Interval string\n        Aggregate string\n    }\n    func mapping(items array)map{\n        var mapout map, i int\n        while i<Len(items){\n            var k v string, item map\n            item = items[i]\n            k = item[\"key\"]\n            v = item[\"value\"]\n            mapout[k] = v\n            i=i+1\n        }\n        return mapout\n    }\n    conditions{\n        if $Interval <= 0 {\n            $Interval = 1\n        }\n        var current_year int\n        current_year = 2018\n        if $Interval > (current_year - 1970)*365 {\n            warning \"Interval too big\"\n        }\n        $interval = Sprintf(\"%v days\", $Interval)\n    }\n\n    action{\n        var pages members txs array, metrics map\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\n        var mPages mMembers mTxs map\n        mPages = mapping(pages)\n        mMembers = mapping(members)\n        mTxs = mapping(txs)\n        var i int\n        while i<Len(pages){\n            var t map, k string\n            t = pages[i]\n            k = t[\"key\"]\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\n            i=i+1\n        }\n\n        if Len(pages)>0{\n            buffer_Manager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\n        }\n    }\n}",
            "Name": "sysparams_UpdateMetrics",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_ValidatorResign{\n    data{}\n\n    conditions{\n        $assigned = DBFind(\"roles_participants\").Columns(\"id,member->member_id,role->id,role->name,deleted\").Where(\"member->member_id=? and role->id='3' and role->name='Validator' and deleted=0\", $key_id).One(\"id\")\n        if !$assigned {\n            warning \"You are not a validator\"\n        }\n    }\n\n    action{\n        Roles_Unassign(\"row_id\", Int($assigned))\n        sysparams_RemoveNode()\n    }\n}",
            "Name": "sysparams_ValidatorResign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Transfer {\n    data {\n        SenderId string \"optional\"\n        RecipientId string\n        Amount string\n    }\n    \n    conditions {\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"voting_AcceptDecision\" || $original_contract == \"tokenrefund_Accept\"))) {\n            error \"sender id error\"\n        }\n        var addressLen int\n        addressLen = 24\n        \n        $amount = Money($Amount)\n        if $SenderId == \"\"{\n            $SenderId = Sprintf(\"%v\", $key_id)\n        }\n        if $amount <= 0 {\n            error \"tokenrefund_Transfer. Amount less than or equal to zero\"\n        }\n        \n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\n            // is address. convert to key id\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\n        }\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\n            // is address. convert to key id\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\n        }\n        \n        if Size($SenderId) > addressLen{\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\n        }\n        if Size($RecipientId) > addressLen{\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\n        }\n        \n        \n        var sender map\n        sender = DBFind(\"keys\").Where(\"id=?\", $SenderId).Row()\n        if !sender{\n            error \"tokenrefund_Transfer. Sender is invalid\"\n        }\n        if sender[\"blocked\"] == 1 {\n            error \"Sender blocked\"\n        }\n        if sender[\"amount\"] < $amount{\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\n        }\n    }\n    \n    action {\n        DBUpdate(\"keys\", Int($SenderId),\"-amount\", $amount)\n        DBUpdate(\"keys\", Int($RecipientId),\"+amount\", $amount)\n    }\n}",
            "Name": "tokenrefund_Transfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_AcceptAdminNotification{\n    data{\n        Id string\n    }\n\n    conditions{\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n    }\n    action{\n        // admin Notification for transfering tokens\n        // Notification role id 1 == admin\n        var roleId closureType sender int\n        roleId = 1 // admin\n        closureType = 2 // multiple\n        sender = 1\n        var icon header body page string\n        icon = \"icon-envelope\"\n        header = \"tokenrefund: Accept decision\"\n        body = \"A vote for a return token is successfully completed\"\n        page = \"tokenrefund_accept\"\n        var params map\n        params[\"tokenrefund_id\"] = $Id\n\n        notifications_Send(\"rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map,member_id\", roleId, closureType, sender, icon, header, body, page, JSONEncode(params),0)\n    }\n}",
            "Name": "tokenrefund_AcceptAdminNotification",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_CheckCSSF{\n    conditions{\n        var isValid bool\n        if $role_id == 12 {\n            // Financial institution\n            isValid = true\n        }\n        if $role_id == 1 {\n            // Apla Consensus asbl\n            isValid = true\n        }\n        if !isValid {\n            error \"Condition is not valid\"\n        }\n    }\n    action{}\n}",
            "Name": "tokenrefund_CheckCSSF",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Reject{\n    data{\n        Id string\n    }\n    \n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\n    }\n    \n    conditions{\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        // status 3: closed; 1: return cancelled\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,1)\n    }\n}",
            "Name": "tokenrefund_Reject",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Start{\n    data{\n        VictimAccount string\n        SuspectAccount string\n        Amount int\n        Note string\n    }\n    func blockAccounts(victimId, attackerId int){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        if DBFind(\"keys\").Where(\"blocked=1 and (id=? or id=?)\", victimId, attackerId).Row(){\n            error \"Accounts already blocked\"\n        }\n        DBUpdate(\"keys\", victimId, \"blocked\", 1)\n        DBUpdate(\"keys\", attackerId, \"blocked\", 1)\n    }\n    func getKeyId(test string) int{\n        if Len(Split(test, \"-\")) > 1 {\n            // probably it is address\n            return AddressToId(test)\n        }\n        if \"invalid\" != IdToAddress(Int(test)){\n            // probably it is key_id\n            return Int(test)\n        }\n        return 0\n    }\n\n    conditions{\n        if $Amount <= 0{\n            error \"Amount not valid\"\n        }\n        if Size($Note) == 0{\n            error \"Please add description\"\n        }\n        var victim attacker int\n        victim = getKeyId($VictimAccount)\n        attacker = getKeyId($SuspectAccount)\n        if victim == 0{\n            error \"Victim address not valid\"\n        }\n        if attacker == 0{\n            error \"Suspect address not valid\"\n        }\n        $victimId = victim\n        $attackerId = attacker\n\n        var app_id template_id int\n        app_id = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\n        if template_id <= 0 {\n            warning \"Template id not found\"\n        }\n\n        $template = DBFind(\"voting_templates\").Where(\"id=?\", template_id).Row()\n        $votersRoleId = Int($template[\"voters\"])\n        $votingName = $template[\"title\"]\n        $typeParticipants = Int($template[\"type_participants\"])\n        $typeDecision = Int($template[\"type_decision\"])\n        $typeVoting = Int($template[\"type_voting\"])\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $contractAccept = $template[\"contract_accept\"]\n        $contractReject = $template[\"contract_reject\"]\n        var initContract string\n        initContract = $template[\"init_contract\"]\n        if Size(initContract) > 4 { // greater then \"NULL\"\n            var m map\n            CallContract(initContract, m)\n        }\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\n\n        if !DBFind(\"roles_participants\").Where(\"role->id=? and deleted=0\", $votersRoleId).One(\"id\") {\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\n        }\n    }\n\n    action{\n        blockAccounts($victimId,$attackerId)\n        var votingId status result int, params map, paramsJSON interval_days string\n        interval_days = \"3\"\n        votingId = voting_CreateNew(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\n\n        status = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\n        result = 0 // 0. discussion and voting 1. cancelled 2. the tokens returned\n        params[\"Id\"] = DBInsert(\"tokenrefund\", \"victim_key_id,attacker_key_id,amount,note,validator_key_id,blocked_at,voting_id,status,result\", $victimId, $attackerId, $Amount, $Note, $key_id, BlockTime(), votingId,status,result)\n        paramsJSON = JSONEncode(params)\n\n        voting_SubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\n\n        voting_Invite(\"votingID,var_id\", votingId, $votersRoleId)\n    }\n}",
            "Name": "tokenrefund_Start",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract tokenrefund_Accept{\n    data{\n        Id string\n    }\n    func closeNotes(){\n        var notes array\n        notes = DBFind(\"notifications\").Where(\"page_name='voting_view' and page_params->voting_id=?\", $votingID)\n        var i int\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            var noteId int\n            noteId = Int(note[\"id\"])\n            notifications_Close(\"notific_id\", noteId)\n            i=i+1\n        }\n    }\n    func refundAmount(victimId, attackerId, amount string){\n        tokenrefund_Transfer(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\n    }\n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), \"blocked\", 0)\n        DBUpdate(\"keys\", Int(attackerId), \"blocked\", 0)\n    }\n\n    conditions{\n        $tokenrefund = DBFind(\"tokenrefund\").Where(\"id=?\", $Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n        $votingID = $tokenrefund[\"voting_id\"]\n    }\n\n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        closeNotes()\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\n            return\n        }\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\n        // status 3: closed; result 2: the tokens returned\n        DBUpdate(\"tokenrefund\", Int($tokenrefund[\"id\"]), \"status,result\", 3,2)\n    }\n}",
            "Name": "tokenrefund_Accept",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_InstallTemplates{\n    data{}\n    func applyTemplate(t map){\n        var i int columns values array\n        columns = SortedKeys(t)\n        while i<Len(columns){\n            values = Append(values, t[columns[i]])\n            i=i+1\n        }\n        DBInsert(\"voting_templates\", Join(columns, \",\"), ...values)\n    }\n    conditions{}\n\n    action{\n        var template map\n        // common\n        template[\"quorum\"] = 51\n        template[\"volume\"] = 70\n        template[\"accept_params\"] = \"\"\n        template[\"reject_params\"] = \"\"\n        template[\"type\"] = \"law\"\n        template[\"voters\"] = 3 // Role: Apla Consensus asbl\n        template[\"type_participants\"] = 3 // by Role\n\n        // validator\n        template[\"title\"] = \"Voting for Validator\"\n        template[\"init_contract\"] = \"sysparams_StartVotingValidator\"\n        template[\"contract_accept\"] = \"sysparams_AcceptValidator\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 1\n        template[\"candidates\"] = 5 // Role: Validator\n        template[\"type_decision\"] = 2\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Validator\"\n        applyTemplate(template)\n\n        // sysparam\n        template[\"title\"] = \"Voting for System param value\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"System param\"\n        applyTemplate(template)\n\n        // valued ecosystem\n        template[\"title\"] = \"Voting for Valued Ecosystem\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 1\n        template[\"subject\"] = \"Valued ecosystem\"\n        applyTemplate(template)\n\n        // tokenrefund\n        template[\"title\"] = \"Token Refund\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"tokenrefund_Accept\"\n        template[\"contract_reject\"] = \"tokenrefund_Reject\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 5\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Token refund\"\n        applyTemplate(template)\n    }\n}",
            "Name": "voting_InstallTemplates",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract sysparams_StartNodeAdd{\n    data{\n        TcpAddress string\n        ApiAddress string\n        KeyId int\n        PubKey string\n        Duration int\n    }\n    func warn(name, detail string){\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\n    }\n    func checkApiAddress(addr string){\n        var name string\n        name = \"API Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\n            warn(name, \"protocol\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        addr = Replace(addr, \"http://\", \"\")\n        addr = Replace(addr, \"https://\", \"\")\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n    }\n    func checkTcpAddress(addr string){\n        var name string\n        name = \"TCP Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n        }\n    }\n    func checkPub(pub string){\n        if PubToID(pub) == 0 {\n            warning \"Public key invalid\"\n        }\n    }\n    func checkKeyId(keyid int){\n        var existed map\n        existed = DBFind(\"keys\").Where(\"id=?\", keyid).Row()\n        if !existed {\n            warning \"Key id not found\"\n        }\n    }\n    func getNodesJSON() string{\n        var nodes string\n        nodes = SysParamString(\"full_nodes\")\n        if Size(nodes) < 100 {\n            nodes = \"[]\"\n        }\n        return nodes\n    }\n    func appendFirstNode(nodes array) array{\n        var first string firstNode map\n        first = AppParam($appId,\"first_node\")\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\n            warning \"Application parameter first_node not valid\"\n        }\n        firstNode = JSONDecode(first)\n        checkTcpAddress(firstNode[\"tcp_address\"])\n        checkApiAddress(firstNode[\"api_address\"])\n        checkKeyId(Int(firstNode[\"key_id\"]))\n        checkPub(firstNode[\"public_key\"])\n\n        nodes = Append(nodes, firstNode)\n        return nodes\n    }\n    conditions{\n        $appId = Int(DBFind(\"applications\").Columns(\"name,id\").Where(\"name='Basic application'\").One(\"id\"))\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\"))\n        if $templateId == 0 {\n            warning \"Template id not found\"\n        }\n        checkKeyId($KeyId)\n        checkPub($PubKey)\n        checkApiAddress($ApiAddress)\n        checkTcpAddress($TcpAddress)\n    }\n\n    action{\n        var nodes array node map\n        node[\"tcp_address\"] = $TcpAddress\n        node[\"api_address\"] = $ApiAddress\n        node[\"key_id\"] = Str($KeyId)\n        node[\"public_key\"] = $PubKey\n        nodes = JSONDecode(getNodesJSON())\n        if Len(nodes) == 0 {\n            nodes = appendFirstNode(nodes)\n        }\n        nodes = Append(nodes, node)\n        voting_TemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\n    }\n}",
            "Name": "sysparams_StartNodeAdd",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract voting_TemplateStore{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string \"optional\" // role of participant\n        Candidates string \"optional\" // role of candidate\n        InitContract string \"optional\" // Execute before the vote\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n    \n    func conditions{\n        if $TypeParticipants == 3 {\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\n                warning \"Voters role not found\"\n            }\n        }\n        if Size($Title) <3 {\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100 {\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100 {\n            warning \"Wrong quorum range\"\n        }\n        \n        if $TypeDecision == 1 || $TypeDecision == 2 {\n            if $Vacancies < 1 {\n                warning \"Wrong number vacancies\"\n            }\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\n                warning \"Wrong candidate role\"\n            }\n        }\n        \n        if Size($InitContract) > 0{\n            if GetContractByName($InitContract) == 0 {\n                warning \"Init Contract not found\"\n            }\n        }\n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning \"Contract for accepted decision not found\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning \"Contract for rejected decision not found\"\n            }\n        }\n    }\n    \n    func action{\n        $result = DBInsert(\"voting_templates\", \"title,subject,voters,candidates,init_contract,volume,quorum,type_voting,type_participants,type_decision,vacancies,contract_accept,accept_params,contract_reject,reject_params\", $Title, $Subject, $Voters, $Candidates, $InitContract, $Volume, $Quorum, $TypeVoting, $TypeParticipants, $TypeDecision, $Vacancies, $ContractAccept, $ParamsAccept, $ContractReject, $ParamsReject)\n        \n    }\n}",
            "Name": "voting_TemplateStore",
            "Type": "contracts"
        }
    ]
}