{
    "name": "Basic application",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:Platform parameters, Page:sysparams_list, Icon:\"fa icon-settings\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Ecosystems, Page: ecosystems_list, Icon:\"fa fa-list-ul\")\r\nMenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\r\n    MenuItem(Title:Candidate for validators, Page: sysparams_candidates_list, Icon:\"icon-list\")\r\n    MenuItem(Title:Tokens refund list, Page:tokenrefund_list, Icon:\"icon-list\")\r\n}",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "laws",
            "Columns": "[\r\n    {\r\n        \"name\": \"name\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"page\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting_template_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\r\n    {\r\n        \"name\": \"commission_address\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"comment\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"host_ip\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"description\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"commission_pub\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"candidate_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\r\n    {\r\n        \"name\": \"victim_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"attacker_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"amount\",\r\n        \"type\": \"money\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"note\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"validator_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"blocked_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"result\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"closed_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\r\n    DBFind(ecosystems,src_num)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\r\n    Data(section1, \"name,type,res,req,src\"){\r\n        Ecosystem_number,select_validate,ecosystem,*,src_num\r\n        Ecosystem_name,input,catalog_ecosystems_name,*,\r\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\r\n    }\r\n    Data(section2, \"name,type,res,req,src\"){\r\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\r\n    }\r\n    Data(section3, \"name,type,res,req,src\"){\r\n        Description,textarea,catalog_ecosystems_description,*,\r\n        Conditions,textarea,catalog_ecosystems_conditions,*,\r\n    }\r\n    Data(section4, \"name,type,res,req,src\"){\r\n        Vde_page,input,vde_page,,\r\n        Vde_form_address,input,vde_form_desc,,\r\n    }\r\n    Data(section5, \"name,type,res,req,src\"){\r\n        Web_page,input,web_page,,\r\n        Web_form_address,input,web_form_desc,,\r\n    }\r\n    Data(section6, \"name,type,res,req,src\"){\r\n        Email,input,catalog_ecosystems_contact_email,,\r\n        Phone,input,catalog_ecosystems_contact_phone,,\r\n    }\r\n    Data(sections, \"section_name\"){\r\n        section1\r\n        section2\r\n        section3\r\n        section4\r\n        section5\r\n        section6\r\n    }\r\n\r\n    SetTitle($catalog_ecosystems_form$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    ForList(sections){\r\n                        Div(list-group-item){\r\n                            ForList(#section_name#){\r\n                                Div(row){\r\n                                    Div(col-md-5 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(#res#))\r\n                                            If(#req#==*){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-7 mb-sm text-left){\r\n                                        If(#type#==select_validate){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\r\n                                            InputErr(Name: #name#, required: need)\r\n                                        }\r\n                                        If(#type#==select){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                        If(#type#==image){\r\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\r\n                                        }\r\n                                        If(#type#==input){\r\n                                            Input(Name: #name#)\r\n                                        }\r\n                                        If(#type#==textarea){\r\n                                            Input(Name: #name#, Type:textarea)\r\n                                        }\r\n                                        If(#type#==radio){\r\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_list)\r\n                    Button(Contract: CatalogAddEcosystem, Class: btn btn-primary pull-right, Page: catalog_ecosystems_list, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\r\n    SetTitle($catalog_ecosystems$)\r\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_create, Icon: icon-plus)\r\n\r\n    SetVar(Where,{deleted:0})\r\n    If(#param_flag_free#==0){\r\n        SetVar(Where,{deleted:0})\r\n    }.ElseIf(#param_flag_free#==1){\r\n        SetVar(Where,{deleted:0, flag_free:1})\r\n    }.ElseIf(#param_flag_free#==2){\r\n        SetVar(Where,{deleted:0, flag_free:2})\r\n    }.Else{\r\n        SetVar(param_flag_free,0)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Div(btn-group){\r\n                If(#param_flag_free#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==2){\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            DBFind(catalog_ecosystems,src_catalog).Where(#Where#).Order(\"ecosystem_number\").Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\r\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\r\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\r\n                }\r\n            }.Custom(custom_type){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\r\n            }.Custom(custom_free){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\r\n            }.Custom(custom_ecosystem){\r\n                Span(Class: h5, Body: #ecosystem_number#)\r\n            }\r\n\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_catalog, Columns:\"$id$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(app)\r\n    DBFind(catalog_ecosystems,src_catalog).WhereId(#v_id#).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Vars(prefix)\r\n    \r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n                                    DBFind(binaries).WhereId(#prefix_image_id#).Columns(\"data\").Vars(img)\r\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_new",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($name$)\r\n        Input(Placeholder: Name of Ecosystem, Name:Name)\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: ecosystems_list)\r\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: ecosystems_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where({member_id:#key_id#, key:\"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nDiv(content-wrapper){\r\n\tSetTitle($ecosystems$)\r\n    Div(breadcrumb){\r\n        Div(row){\r\n            Div(col-md-10){\r\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\r\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\r\n            }\r\n            Div(col-md-2){\r\n                Button(Body: $create$, Class: pull-right, Page: ecosystem_new).Popup(Header: $create$, Width: \"30\")\r\n                Button(Body: LangRes($update_metrics$), Page: ecosystems_metrics_update, Class: pull-right).Style(margin-right: 10px;).Popup(Header: $update_metrics$, Width: \"30\")\r\n            }\r\n        }\r\n    }\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,{name:{\"$like\":#Search#}, id:{\"$neq\":1}})\r\n    }.Else{\r\n        SetVar(Where,{id:{\"$neq\":1}})\r\n        SetVar(Search,)\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: ecosystems_list, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#Where#\").Custom(_id){\r\n                Span(#id#)\r\n            }.Custom(_name){\r\n                Span(#name#)\r\n            }.Custom(_metrics){\r\n                If(#m_id#>0){\r\n                    SetVar(eco_id,#id#)\r\n                    ForList(src_metrics){\r\n                        If(#key#==#eco_id#){\r\n                            LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\r\n                        }\r\n                    }\r\n                }\r\n            }.Custom(_votings){\r\n                Div(text-right){\r\n                    If(#template_id#>0){\r\n                        If(#is_valued#==0){\r\n                            Input(Name: RowId, Type: hidden, Value: #id#)\r\n                            Input(Name: NewValue, Type: hidden, Value: 1)\r\n                            Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecosystems_list, Contract: VotingTemplateRun)\r\n                        }\r\n                    }\r\n                }\r\n            }.Custom(_valued){\r\n                If(#is_valued#==1){\r\n                    is valued\r\n                }\r\n            }.Custom(_actions){\r\n                SetVar(k_id,)\r\n                DBFind(notifications).Where({\"sender->member_id\":#key_id#, \"page_params->ecosystem_id\":#id#, closed:0}).Count(notific_count)\r\n                DBFind(keys).WhereId(#key_id#).Ecosystem(#id#).Limit(1).Vars(\"k\")\r\n\r\n                If(And(#notific_count#==0,#k_id#==\"\")){\r\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"MembershipRequest\", Page: ecosystems_list, Params: \"ecosystem_num=#id#\")\r\n                }\r\n            }\r\n\t\t\t\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_ecosystems, Columns: \"ID=_id,$name$=_name,$metrics$=_metrics,=_valued,=_votings,=_actions\")\r\n                }\r\n            }\r\n\t\t\t\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: ecosystems_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\nForm(){\r\n    Div(row form-group){\r\n        Div(col-sm-3 text-right){\r\n            Label(For: Interval){\r\n                LangRes(Interval)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Interval, Type: number)\r\n        }\r\n    }\r\n    Div(row form-group){\r\n        Div(col-sm-3 text-right){\r\n            Label(For: Aggregate){\r\n                LangRes(Aggregate)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: ecosystems_list)\r\n        Button(Body: LangRes(update_metrics), Page: ecosystems_list, Class: btn pull-right btn-primary, Contract: MetricsUpdate)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\r\n    DBFind(notifications).Where({id:#notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Div(h3 text-bold){\r\n                        Membership Request\r\n                    }\r\n                    Div(){\r\n                        For ecosystem: \"#ecosystem_name#\" (#ecosystem_id#)\r\n                    }\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        If(#notific_closed# == 0){\r\n                            Button(Class: btn btn-danger mr-lg, Body: Reject, Contract: MembershipDecide, Page: default_page, Params: \"notific_id=#notific_id#,Accept=1\")\r\n                            Button(Class: btn btn-success, Body: Accept, Contract: MembershipDecide, Page: default_page, Params: \"notific_id=#notific_id#,Accept=0\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\r\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Div(text-success h3){\r\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is accepted!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            If(#notific_closed# == 0){\r\n                                Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=default_page\")\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: text-danger h3){\r\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is rejected!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            If(#notific_closed# == 0){\r\n                                Button(Class: btn btn-primary, Body: OK, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: default_page)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidate_validators_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($sysparams_candidate_validators_form$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($sysparams_candidates$, sysparams_candidates)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(form-group) {\r\n                        Label(LangRes(host_ip)*)\r\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\r\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\r\n                    }\r\n                    If(){\r\n                        Div(form-group) {\r\n                            Label(LangRes(commission_pub)*)\r\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\r\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\r\n                        }\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(commission_address)*)\r\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\r\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(description_equipment))\r\n                        Input(Name: Description, Type: textarea)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(comment))\r\n                        Input(Name: Comment, Type: textarea)\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates_list)\r\n                    }\r\n                    Button(Contract: CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates_list, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\r\n    SetTitle($sysparams_candidates$)\r\n\r\n    DBFind(sysparams_candidate,src_candidates).Where({deleted:0}).Custom(_actions){\r\n        If(#template_id#>0){\r\n            Div(btn-group){\r\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\r\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\r\n                Button(Contract: VotingTemplateRun, Page: voting_list, Class: btn btn-default fa fa-play)\r\n            }\r\n        }.Else{\r\n            Span($voting_template_not_found$,text-muted)\r\n        }\r\n\r\n    }.Custom(_date){\r\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n    }.Count(count)\r\n\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $sysparams_candidates$)\r\n    }\r\n    AddToolButton(Title: $add$, Icon: icon-plus, Page: sysparams_candidate_validators_create)\r\n\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(panel panel-primary){\r\n                If(#count#>0){\r\n                    Form(table-responsive){\r\n                        Input(Name: Duration, Type: hidden, Value: 14)\r\n                        Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\r\n                    }\r\n                }.Else{\r\n                    Div(h3 text-muted text-center){\r\n                        Candidates not found\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where({member_id:#key_id#, key:\"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nSetTitle($sysparams_ecos$)\r\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\r\n    Div(text-right){\r\n        If(#template_id#>0){\r\n            If(#is_valued#==0){\r\n                Input(Name: RowId, Type: hidden, Value: #id#)\r\n                Input(Name: NewValue, Type: hidden, Value: 1)\r\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecosystems_list, Contract: VotingTemplateRun)\r\n            }\r\n        }.Else{\r\n            Span(voting id template not found in parameters, text-muted)\r\n        }\r\n    }\r\n}.Custom(_valued){\r\n    If(#is_valued#==1){\r\n        is valued\r\n    }\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nData(form, \"Name,Type,Src\"){\r\n    Interval,number,\r\n    Aggregate,select,aggregates\r\n}\r\nData(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            ForList(form){\r\n                Div(row form-group){\r\n                    Div(col-sm-3 text-right){\r\n                        Label(For:#Name#){\r\n                            LangRes(#Name#)\r\n                        }\r\n                    }\r\n                    Div(col-sm-9){\r\n                        If(#Type#==datetime){\r\n                            Input(Name:#Name#, Type:date)\r\n                        }.ElseIf(#Type#==select){\r\n                            Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                        }.Else{\r\n                            Input(Name:#Name#, Type:#Type#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: LangRes(udpate_metrics), Page: sysparams_ecosystems_list, Class:btn btn-primary, Contract:MetricsUpdate)\r\n        }\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Form(table-responsive){\r\n                Input(Name: TableWritten, Type: hidden, Value: ecosystems)\r\n                Input(Name: ColumnName, Type: hidden, Value: is_valued)\r\n                Input(Name: Duration, Type: hidden, Value: 3)\r\n                Input(Name: TemplateId, Type: hidden, Value: #template_id#)\r\n                Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\r\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\r\nSetTitle(Platform parameters)\r\nJsonToSource(nodes){\r\n    SysParam(full_nodes)\r\n}\r\nForList(nodes){\r\n    Div(#key_id#)\r\n}\r\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\r\n    DBFind(contracts).Where({name:#name#}).Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        If(#name#==\"full_nodes\"){\r\n            LinkPage(Class: fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }.Else{\r\n            LinkPage(Class: fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        condition contract not found\r\n    }\r\n}.Custom(_val){\r\n    Div(){\r\n        #value#\r\n    }.Style(max-width: 500px;overflow: hidden;)\r\n}\r\nDiv(){\r\n    Div(breadcrumb){\r\n        Div(Class:text-muted, Body: \"Parameters for configuring nodes, transactions, blocks, and payment for network resources.\")\r\n        Div(Class:text-muted, Body: \"Parameters change only by voting of different roles.\")\r\n    }\r\n    DBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\n    If(#validator_id#>0){\r\n        AddToolButton(Title: $sysparams_validator_resign$, Icon: icon-pin, Page: sysparams_validator_resign)\r\n    }\r\n    Div(table-responsive){\r\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\r\n    }\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right;\r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n    table a {\r\n        font-size: 18px;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(sysparams_ecos), Page: ecosystems_list)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(sysparams_metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(sysparams_metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(GetVar(Id)){\r\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(metrics,src_metric).Where({key:#Id#, metric:#Metric#}).Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_validator_resign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\r\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\r\nDBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\nSetTitle($sysparams_validator_resign$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body:$system_params$, Page: sysparams_list)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $sysparams_validator_resign$)\r\n    }\r\n    If(#validator_id#>0){\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Div(panel panel-primary text-center){\r\n                    Div(panel-heading){\r\n                        $validator_removing$\r\n                    }\r\n                    Div(panel-body text-center){\r\n                        $validator_removing_desc$\r\n                    }\r\n                    Div(panel-footer text-left){\r\n                        Button(Body: $back$, Class: btn btn-default, Page: sysparams_list)\r\n                        Button(Body: $resign$, Class: btn btn-danger pull-right, Page: sysparams_list, Contract: ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(text-danger text-center text-bold){\r\n            LangRes(attention_not_validator)\r\n        }\r\n    }\r\n\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\r\nDBFind(voting_templates,temps).WhereId(#tid#).Vars(template)\r\nSetTitle($voting$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($system_params$, sysparams_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting$)\r\n    }\r\n\r\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\r\n        DBFind(system_parameters).Where({name:#param_name#}).Vars(param)\r\n        DBFind(voting_templates).WhereId(#template_id#).Columns(\"title,id\").Vars(template)\r\n        SetTitle(#template_title#)\r\n        If(#param_name#!=\"full_nodes\"){\r\n            Form(){\r\n                Div(form-group){\r\n                    Label(For: ColumnName){\r\n                        LangRes(name)\r\n                    }\r\n                    Input(Name: ColumnName, Value: #param_name#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: Duration){\r\n                        LangRes(duration)\r\n                    }\r\n                    Input(Name:Duration, Value:21, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: TemplateId){\r\n                        LangRes(template_id)\r\n                    }\r\n                    Input(Name: TemplateId, Value:#template_id#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: Value){\r\n                        LangRes(value)\r\n                    }\r\n                    Input(Name: Value, Value: #param_value#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(){\r\n                        LangRes(new_value)\r\n                    }\r\n                    Input(Name: NewValue, Type: textarea)\r\n                }\r\n                Div(text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                    Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingTemplateRun, Page: voting_list)\r\n                }\r\n            }\r\n        }.Else{\r\n            SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(App:#application_id#, Name: first_node)).(first_node_set,)\r\n            SetTitle(\"#param_name#: $add$ $new_value$\")\r\n            Form(){\r\n                If(`#full_nodes#`==\"\"){\r\n                    JsonToSource(src_first_node,#first_node#)\r\n                    ForList(src_first_node){\r\n                        If(#value#==\"\"){\r\n                            SetVar(first_node_set,error)\r\n                        }\r\n                    }\r\n                    If(#first_node_set#==error){\r\n                        Div(text-center){\r\n                            ForList(src_first_node){\r\n                                If(#value#==\"\"){\r\n                                    Div(){first node: '#key#' empty}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(text-center){\r\n                            DBFind(app_params).Where({name:first_node}).Vars(first_node_param)\r\n                            Button(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=sysparams_list\"){\r\n                                Install the first node before adding the new\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#first_node_set#!=error){\r\n                    Div(form-group){\r\n                        Label(For: Duration){\r\n                            LangRes(duration)\r\n                        }\r\n                        Input(Name:Duration, Value:21, Disabled: true)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: TcpAddress){\r\n                            LangRes(tcp_address)\r\n                        }\r\n                        Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: ApiAddress){\r\n                            LangRes(api_address)\r\n                        }\r\n                        Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: KeyId){\r\n                            LangRes(node_founder_key_id)\r\n                        }\r\n                        Input(Name: KeyId,Type: number, Value: #key_id#)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: PubKey){\r\n                            LangRes(node_pub_key)\r\n                        }\r\n                        Input(Name: PubKey, Type: textarea)\r\n                    }\r\n\r\n                    Div(text-left mb-lg){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\r\n                        Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingNodeAdd, Page: voting_list)\r\n                    }\r\n                }\r\n            }\r\n            AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\r\n            SetVar(node_owner,)\r\n            ForList(nodes_keys){\r\n                If(#name#==\"key_id\"){\r\n                    SetVar(node_owner, 1)\r\n                }\r\n            }\r\n\r\n            If(#node_owner#==1){\r\n                Form(text-center){\r\n                    Div(h3){$delete_node$}\r\n                    Div(){$delete_node_desc$}\r\n                    Div(text-right){\r\n                        Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: NodeRemoveByKey)\r\n                    }\r\n                }\r\n            }\r\n            If(`#full_nodes#`!=\"\"){\r\n                ArrayToSource(src_full_nodes,`#full_nodes#`)\r\n                Div(mt-lg form-group text-left text-muted){\r\n                    Label(){Nodes list}\r\n                    ForList(src_full_nodes){\r\n                        JsonToSource(src_node,`#value#`)\r\n                        Div(list-group-item){\r\n                            Label(){node #key#}\r\n                            ForList(src_node){\r\n                                Div(){\r\n                                    Strong(#key#:) #value#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(word-break: break-all;)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(text-danger text-center text-bold){\r\n            If(#param_index#>0){}.Else{\r\n                Div(){LangRes(attention)}\r\n            }\r\n            If(#tid#>0){\r\n                If(#template_id#>0){}.Else{\r\n                    Div(mb-sm){\r\n                        LangRes(voting_template_not_found)\r\n                    }\r\n                    LinkPage(Page: voting_templates_list, Class: btn btn-info){\r\n                        Set the template\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(mb-sm){\r\n                    LangRes(voting_template_id_not_found)\r\n                }\r\n                DBFind(app_params).Where({name:voting_sysparams_template_id}).Vars(template_param)\r\n                LinkPage(Page: app_params_edit, Class: btn btn-info, PageParams: \"back_page=sysparams_list,id=#template_param_id#\"){\r\n                    Set the template ID\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_accept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"id,page_params->tokenrefund_id,closed\").Vars(note)\r\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\r\n\r\n    Data(inputs,\"Name,Type,Res,Value\"){\r\n        Amount,number,amount,#tr_amount#\r\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\r\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\r\n        Note,textarea,description,#tr_note#\r\n    }\r\n    Div(content-wrapper){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading, Body: $tokenrefund_start$)\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-sm-4){LangRes(#Res#)}\r\n                                Div(col-sm-8){\r\n                                    If(#Type#==textarea){\r\n                                        #Value#\r\n                                    }.Else{\r\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#note_closed# == 0){\r\n                            Button(Body: $approve$, Contract: TokensRefundAccept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\r\n    Amount,number,amount,\"\"\r\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\r\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\r\n    Note,textarea,description,\"\"\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: $tokenrefund_start$)\r\n                Div(panel-body){\r\n                    ForList(Source: inputs){\r\n                        Div(row form-group){\r\n                            Div(col-sm-4){LangRes(#res#)}\r\n                            Div(col-sm-8){\r\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: tokenrefund_list)\r\n                    Button(Body: $start_refund$, Contract: VotingTokensRefundCreate, Page: tokenrefund_list, Class: btn btn-primary pull-right)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n    SetTitle($tokenrefund_list$)\r\n\r\n    DBFind(tokenrefund,tokenrefunds).Order({id:\"-1\"}).Custom(_status){\r\n        If(#status#>0){\r\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n            LangRes(#sta#)\r\n        }.Else{\r\n            $tokenrefund_status0$\r\n        }\r\n    }.Custom(_result){\r\n        If(#result#>0){\r\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n            LangRes(#res#)\r\n        }.Else{\r\n            $tokenrefund_result0$\r\n        }\r\n    }.Custom(_blocked){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n    }.Custom(_closed){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n    }.Custom(_accounts){\r\n        Div(){$tokenrefund_victim$: #victim_key_id#}\r\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\r\n    }.Custom(_voting){\r\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        Div(table-responsive){\r\n            Table(tokenrefunds,\"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\r\n        }\r\n\r\n        Form(panel-footer text-right){\r\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_create)\r\n        }\r\n    }\r\n}\r\n\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CandidateValidatorDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorDelete{\r\n    data{\r\n        Id int\r\n    }\r\n    conditions{\r\n        var candidateId roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"sysparams_candidate\").WhereId($Id).One(\"candidate_key_id\")\r\n        \r\n        $role = DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":roleId, \"member->member_id\":candidateId}).Row()\r\n        if !$role {\r\n            warning \"Candidate role not found\"\r\n        }\r\n    }\r\n    action{\r\n        DBUpdate(\"sysparams_candidate\", $Id, {deleted:1})\r\n        RolesUnassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorRequest{\r\n    data{\r\n        HostIp string\r\n        // CommissionPub string\r\n        CommissionAddress string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    func IsNotValidIp(ip string)bool{\r\n        var parts array\r\n        var i, lenParts, part int\r\n        parts = Split(ip, \".\")\r\n\r\n        lenParts = Len(parts)\r\n        if lenParts != 4{\r\n            return true\r\n        }\r\n        while i< lenParts {\r\n            part = Int(parts[i])\r\n            if part < 0{\r\n                return true\r\n            }\r\n            if part > 255{\r\n                return true\r\n            }\r\n            i = i+1\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    conditions{\r\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\r\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\r\n        // if $CommissionAddress != PubToID($CommissionPub) {\r\n        // info \"Address or Public key are invalid\"\r\n        // }\r\n\r\n        $CommissionAddress = AddressToId($CommissionAddress)\r\n        if !DBFind(\"keys\").WhereId($CommissionAddress).Row(){\r\n            warning \"Address not valid\"\r\n        }\r\n\r\n        if IsNotValidIp($HostIp){\r\n            warning \"Please enter a valid ip address\"\r\n        }\r\n        var roleName string, roleId int, role map\r\n        roleName = \"Candidate for validators\"\r\n        roleId = 4\r\n        role = DBFind(\"roles\").Where({role_name:roleName, id:roleId, deleted:0}).Row()\r\n        if !role{\r\n            warning Sprintf(\"Role %q not found\", roleName)\r\n        }\r\n        RolesAssign(\"rid,member_id\", roleId, $key_id)\r\n    }\r\n\r\n    action{\r\n        var m map\r\n        m[\"host_ip\"] = $HostIp\r\n        m[\"commission_pub\"] = \"\"\r\n        m[\"commission_address\"] = $CommissionAddress\r\n        m[\"description\"] = $Description\r\n        m[\"comment\"] = $Comment\r\n        m[\"candidate_key_id\"] = $key_id\r\n        m[\"date_created\"]  = BlockTime()\r\n        m[\"deleted\"] = 0\r\n        DBInsert(\"sysparams_candidate\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CatalogAddEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CatalogAddEcosystem {\r\n    data {\r\n        Ecosystem_name string\r\n        Ecosystem_number int\r\n        Ecosystem_type int\r\n        Description string\r\n        Conditions string\r\n        Flag_free int\r\n        Vde_form_address string \"optional\"\r\n        Vde_page string \"optional\"\r\n        Web_form_address string \"optional\"\r\n        Web_page string \"optional\"\r\n        Email string \"optional\"\r\n        Phone string \"optional\"\r\n    }\r\n    conditions {\r\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\r\n        FOUNDER_ACCOUNT = \"founder_account\"\r\n        DELEGATE_ACCOUNT = \"delegate_account\"\r\n\r\n        if Size($Email) > 0 {\r\n            var emailParts int\r\n            emailParts = Split($Email, \"@\")\r\n            if Len(emailParts) != 2 {\r\n                warning \"Invalid email\"\r\n            }\r\n        }\r\n\r\n        var ecoExists map\r\n        ecoExists = DBFind(\"catalog_ecosystems\").Where({ecosystem_number:$Ecosystem_number, deleted:0}).Row()\r\n        if ecoExists {\r\n            info \"The ecosystem with same number already added\"\r\n        }\r\n\r\n        var isFounder, isDelegate bool\r\n        var founder, delegate map\r\n        founder = DBFind(\"parameters\").Where({name:FOUNDER_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\r\n        isFounder = founder[\"value\"] == $key_id\r\n\r\n        delegate = DBFind(\"parameters\").Where({name:DELEGATE_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\r\n        if delegate {\r\n            isDelegate = delegate[\"value\"] == $key_id\r\n        }\r\n        if !(isFounder || isDelegate) {\r\n            warning \"Sorry, you can not add this ecosystem\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var ecosystem_info url_address m map\r\n        ecosystem_info[\"description\"] = $Description\r\n        ecosystem_info[\"conditions\"] = $Conditions\r\n        ecosystem_info[\"email\"] = $Email\r\n        ecosystem_info[\"phone\"] = $Phone\r\n\r\n        url_address[\"web_page\"] = $Web_page\r\n        url_address[\"web_form_address\"] = $Web_form_address\r\n        url_address[\"vde_page\"] = $Vde_page\r\n        url_address[\"vde_form_address\"] = $Vde_form_address\r\n\r\n        m[\"ecosystem_name\"] = $Ecosystem_name\r\n        m[\"ecosystem_number\"] = $Ecosystem_number\r\n        m[\"ecosystem_type\"] = $Ecosystem_type\r\n        m[\"image_id\"] = 0\r\n        m[\"ecosystem_info\"] = ecosystem_info\r\n        m[\"url_address\"] = url_address\r\n        m[\"flag_free\"] = $Flag_free\r\n        DBInsert(\"catalog_ecosystems\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelegateRefresh{\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        // info arr\r\n        while i < Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n    func getAppRoleId(id int, name string) int{\r\n        var rid int\r\n        rid = Int(AppParam(id, name))\r\n        if rid == 0{\r\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\r\n        }\r\n        return rid\r\n    }\r\n    conditions{\r\n        MainCondition()\r\n        var appId roleId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        if appId == 0{\r\n            warning \"Application not found\"\r\n        }\r\n        roleId = getAppRoleId(appId, \"role_delegate\")\r\n\r\n        $role = DBFind(\"roles\").Where({id:roleId, deleted:0}).Row()\r\n        if !$role{\r\n            warning \"Role not found\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\r\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"parameters\").Where({name:\"delegate_account\"}).Ecosystem(ecoId).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(ecoId).Row()\r\n            }\r\n\r\n            if NotInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        rid = Int($role[\"id\"])\r\n        currentDelegates = DBFind(\"roles_participants\").Where({\"role->id\":rid, deleted:0}).Columns(\"id,member->member_id\")\r\n        var delegate map id int\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            delegate = currentDelegates[i]\r\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\r\n                id = Int(delegate[\"id\"])\r\n                RolesUnassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        var key map delegateId int\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            delegateId = Int(delegateIds[i])\r\n            key = DBFind(\"keys\").WhereId(delegateId).Row()\r\n            if key {\r\n                // check role dup\r\n                if !DBFind(\"roles_participants\").Where({\"member->member_id\":delegateId, \"role->id\":rid, deleted:0}).Row(){\r\n                    RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract InvestorRefresh {\r\n    func NotInArray(val string, arr array) bool{\r\n        var i lenArr int\r\n        lenArr = Len(arr)\r\n        while i < lenArr{\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n    func getParamInt(id int, name string) int{\r\n        var param int\r\n        param = Int(AppParam(id, name))\r\n        if param == 0{\r\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\r\n        }\r\n        Println(\"return param\")\r\n        return param\r\n    }\r\n    conditions{\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        if appId == 0{\r\n            warning \"Application not found\"\r\n        }\r\n\r\n        var roleValidatorId roleInvestorId string\r\n\r\n        roleValidatorId = getParamInt(appId, \"role_validator\")\r\n        if $role_id != roleValidatorId {\r\n            warning \"You not Validator. You can not to run this\"\r\n        }\r\n\r\n        roleInvestorId = getParamInt(appId, \"role_investor_with_voting_rights\")\r\n        $roleId = Int(DBFind(\"roles\").Where({id:roleInvestorId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0{\r\n            warning \"Investor role not found or deleted\"\r\n        }\r\n\r\n        $limitInvestors = getParamInt(appId, \"investors_number\")\r\n    }\r\n\r\n    action{\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"roles_participants\").Where({\"role->id\":$roleId, deleted:0}).Columns(\"member->member_id\")\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i = 0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }   \r\n\r\n        // remove old investors\r\n        var assigned map mid string\r\n        i = 0\r\n        while i < Len(assignedIds) {\r\n            if NotInArray(assignedIds[i], investorsIds){\r\n                mid = assignedIds[i]\r\n                assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":mid, \"role->id\":$roleId}).Row()\r\n                if assigned {\r\n                    RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // add new investors\r\n        i = 0\r\n        while i < Len(investorsIds) {\r\n            if NotInArray(investorsIds[i], assignedIds){\r\n                if DBFind(\"keys\").WhereId(Int(investorsIds[i])).Row(){\r\n                    RolesAssign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipDecide {\r\n    data {\r\n        notific_id int\r\n        Accept int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").WhereId($notific_id).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Row()\r\n\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(Int($request[\"page_params.ecosystem_id\"])).One(\"value\")\r\n\r\n        if founder_id != $key_id {\r\n            warning \"You are not the founder of the ecosystem\"\r\n        }\r\n    }\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if ($Accept == 0){\r\n            params[\"status\"] = 1\r\n\r\n            var table_name string\r\n            table_name = Sprintf(\"@%v_keys\", $request[\"page_params.ecosystem_id\"])\r\n\r\n            var pub string mid int\r\n            mid = Int($request[\"sender.member_id\"])\r\n            pub = DBFind(\"keys\").WhereId(mid).One(\"pub\")\r\n            DBInsert(table_name, {id:mid, pub:pub})\r\n        }\r\n        else{\r\n            params[\"status\"] = 0\r\n        }\r\n\r\n        var icon header body page ecoName ecoId string\r\n        ecoId = $request[\"page_params.ecosystem_id\"]\r\n        ecoName = DBFind(\"ecosystems\").Where({id:ecoId}).One(\"name\")\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"Request is accepted\"\r\n        body = Sprintf(\"Your request to membership for ecosystem '%v' (%v) is accepted\", ecoName, ecoId)\r\n        page = \"membership_user_view\"\r\n\r\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, icon, header, body, page, params)\r\n        NotificationsClose(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipRequest {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n\r\n    conditions {\r\n        if DBFind(\"notifications\").Where({\"page_params->ecosystem_id\":$ecosystem_num, \"sender->member_id\":$key_id, closed:0, page_name:\"membership_admin_view\"}).Row(){\r\n            warning \"Request already sent\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var notific_params map founder_id int\r\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem($ecosystem_num).One(\"value\")\r\n\r\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MetricsUpdate{\r\n    data{\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n    func mapping(items array)map{\r\n        var mapout map, i int\r\n        while i<Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i=i+1\r\n        }\r\n        return mapout\r\n    }\r\n    conditions{\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = 2018\r\n        if $Interval > (current_year - 1970)*365 {\r\n            warning \"Interval too big\"\r\n        }\r\n        $interval = Sprintf(\"%v days\", $Interval)\r\n    }\r\n\r\n    action{\r\n        var pages members txs array metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n\r\n        var i lenPages int\r\n        lenPages = Len(pages)\r\n        while i<lenPages{\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i=i+1\r\n        }\r\n\r\n        if lenPages>0{\r\n            BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeRemoveByKey{\r\n    data{}\r\n    func nodesRemove(keyId int) array{\r\n        var nodesJSON string nodes res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res = Append(res, node)\r\n            }\r\n            i=i+1\r\n        }\r\n        return res\r\n    }\r\n    conditions{\r\n        if $original_contract != \"ValidatorResign\"{\r\n            warning \"Unknown contract\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        var nodes array fullNodes string\r\n        nodes = nodesRemove($key_id)\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefund",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefund {\r\n    data {\r\n        SenderId string \"optional\"\r\n        RecipientId string\r\n        Amount string\r\n    }\r\n\r\n    conditions {\r\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"VotingDecisionAccept\" || $original_contract == \"TokensRefundAccept\"))) {\r\n            error \"sender id error\"\r\n        }\r\n        var addressLen int\r\n        addressLen = 24\r\n\r\n        $amount = Money($Amount)\r\n        if $SenderId == \"\"{\r\n            $SenderId = Sprintf(\"%v\", $key_id)\r\n        }\r\n        if $amount <= 0 {\r\n            error \"TokensRefund. Amount less than or equal to zero\"\r\n        }\r\n\r\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\r\n            // is address. convert to key id\r\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\r\n        }\r\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\r\n            // is address. convert to key id\r\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\r\n        }\r\n\r\n        if Size($SenderId) > addressLen{\r\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\r\n        }\r\n        if Size($RecipientId) > addressLen{\r\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\r\n        }\r\n\r\n        $RecipientId = Int($RecipientId)\r\n        $SenderId = Int($SenderId)\r\n        var sender recipient map\r\n        sender = DBFind(\"keys\").WhereId($SenderId).Row()\r\n        if !sender{\r\n            error \"TokensRefund. Sender is invalid\"\r\n        }\r\n        if !DBFind(\"keys\").WhereId($RecipientId).Row(){\r\n            error \"TokensRefund. Recipient is invalid\"\r\n        }\r\n        if sender[\"blocked\"] == 1 {\r\n            error \"Sender blocked\"\r\n        }\r\n        if sender[\"amount\"] < $amount{\r\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"keys\", $SenderId, {\"-amount\":$amount})\r\n        DBUpdate(\"keys\", $RecipientId, {\"+amount\":$amount})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundAccept{\r\n    data{\r\n        Id string\r\n    }\r\n    func closeNotes(){\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            NotificationsClose(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n    func refundAmount(victimId, attackerId, amount string){\r\n        TokensRefund(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\r\n    }\r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\r\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\r\n    }\r\n\r\n    conditions{\r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n        $votingID = $tokenrefund[\"voting_id\"]\r\n    }\r\n\r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        closeNotes()\r\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\r\n            return\r\n        }\r\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\r\n        // status 3: closed; result 2: the tokens returned\r\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:2})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundReject{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\r\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\r\n    }\r\n    \r\n    conditions{\r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        // status 3: closed; 1: return cancelled\r\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ValidatorResign{\r\n    data{}\r\n    func getParamInt(id int, name string) int{\r\n        var param int\r\n        param = Int(AppParam(id, name))\r\n        if param == 0{\r\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\r\n        }\r\n        Println(\"return param\")\r\n        return param\r\n    }\r\n    conditions{\r\n        var roleValidatorId appId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        roleValidatorId = getParamInt(appId, \"role_validator\")\r\n        if $role_id != roleValidatorId {\r\n            warning \"You are not a Validator. You can not to run this\"\r\n        }\r\n        $assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":$key_id, \"role->id\":roleValidatorId, deleted:0}).One(\"id\")\r\n    }\r\n\r\n    action{\r\n        RolesUnassign(\"row_id\", Int($assigned))\r\n        NodeRemoveByKey()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeAdd",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNodeAdd{\r\n    data{\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        Duration int\r\n    }\r\n    func warn(name, detail string){\r\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\r\n    }\r\n    func checkApiAddress(addr string){\r\n        var name string\r\n        name = \"API Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n    func checkTcpAddress(addr string){\r\n        var name string\r\n        name = \"TCP Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n    func checkPub(pub string){\r\n        if PubToID(pub) == 0 {\r\n            warning \"Public key invalid\"\r\n        }\r\n    }\r\n    func checkKeyId(keyid int){\r\n        var existed map\r\n        existed = DBFind(\"keys\").WhereId(keyid).Row()\r\n        if !existed {\r\n            warning \"Key id not found\"\r\n        }\r\n    }\r\n    func getNodesJSON() string{\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n    func appendFirstNode(nodes array) array{\r\n        var first string firstNode map\r\n        first = AppParam($appId,\"first_node\")\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning \"Application parameter first_node not valid\"\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkKeyId(Int(firstNode[\"key_id\"]))\r\n        checkPub(firstNode[\"public_key\"])\r\n\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n    conditions{\r\n        $appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\"))\r\n        if $templateId == 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n        checkKeyId($KeyId)\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action{\r\n        var nodes array node map\r\n        node[\"tcp_address\"] = $TcpAddress\r\n        node[\"api_address\"] = $ApiAddress\r\n        node[\"key_id\"] = Str($KeyId)\r\n        node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, node)\r\n        VotingTemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSysparamInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSysparamInit{\r\n    data{\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions{\r\n        if GetContractByName($Name){\r\n            var params map\r\n            params[\"Value\"] = $Value\r\n            CallContract($Name, params)\r\n        } else {\r\n            warning \"System parameter not found\"\r\n        }\r\n        // InvestorRefresh()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTokensRefundCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTokensRefundCreate{\r\n    data{\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount int\r\n        Note string\r\n    }\r\n    func blockAccounts(victimId, attackerId int){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        if !DBFind(\"keys\").Where({blocked:1, id:victimId}).One(\"id\"){\r\n            DBUpdate(\"keys\", victimId, {blocked:1})\r\n        }\r\n        if !DBFind(\"keys\").Where({blocked:1, id:attackerId}).One(\"id\"){\r\n            DBUpdate(\"keys\", attackerId, {blocked:1})\r\n        }\r\n    }\r\n    func getKeyId(test string) int{\r\n        if Len(Split(test, \"-\")) > 1 {\r\n            // probably it is address\r\n            return AddressToId(test)\r\n        }\r\n        if \"invalid\" != IdToAddress(Int(test)){\r\n            // probably it is key_id\r\n            return Int(test)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    conditions{\r\n        if $Amount <= 0{\r\n            error \"Amount not valid\"\r\n        }\r\n        if Size($Note) == 0{\r\n            error \"Please add description\"\r\n        }\r\n        var victim attacker int\r\n        victim = getKeyId($VictimAccount)\r\n        attacker = getKeyId($SuspectAccount)\r\n        if victim == 0{\r\n            error \"Victim address not valid\"\r\n        }\r\n        if attacker == 0{\r\n            error \"Suspect address not valid\"\r\n        }\r\n        $victimId = victim\r\n        $attackerId = attacker\r\n\r\n        var app_id template_id int\r\n        app_id = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\r\n        if template_id <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n\r\n        $template = DBFind(\"voting_templates\").WhereId(template_id).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = Int($template[\"type_participants\"])\r\n        $typeDecision = Int($template[\"type_decision\"])\r\n        $typeVoting = Int($template[\"type_voting\"])\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n        if Size(initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract(initContract, m)\r\n        }\r\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n\r\n        if !DBFind(\"roles_participants\").Where({\"role->id\":$votersRoleId, deleted:0}).One(\"id\") {\r\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\r\n        }\r\n    }\r\n\r\n    action{\r\n        blockAccounts($victimId,$attackerId)\r\n        var votingId int params m map paramsJSON interval_days string\r\n        interval_days = \"3\"\r\n        votingId = VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\r\n\r\n        m[\"victim_key_id\"] = $victimId\r\n        m[\"attacker_key_id\"] = $attackerId\r\n        m[\"amount\"] = $Amount\r\n        m[\"note\"] = $Note\r\n        m[\"validator_key_id\"] = $key_id\r\n        m[\"blocked_at\"] = BlockTime()\r\n        m[\"voting_id\"] = votingId\r\n        m[\"status\"] = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\r\n        m[\"result\"] = 0 // 0. discussion and voting 1. cancelled 2. the tokens returned\r\n        params[\"Id\"] = DBInsert(\"tokenrefund\", m)\r\n\r\n        paramsJSON = JSONEncode(params)\r\n        VotingSubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\r\n\r\n        VotingInvite(\"votingID,var_id\", votingId, $votersRoleId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorAccept{\r\n    data{\r\n        VotingTemplateId string\r\n        KeyId string\r\n        VotingId string\r\n    }\r\n    func getAppRoleId(id int, name string, warn bool) int{\r\n        var rid int\r\n        rid = Int(AppParam(id, name))\r\n        if rid == 0 && warn{\r\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\r\n        }\r\n        return rid\r\n    }\r\n    func conditions{\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\"{\r\n            warning \"This contract allow starts only from @1VotingDecisionCheck\"\r\n        }\r\n\r\n        var appId templateId int params map\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        templateId = Int(AppParam(appId,\"voting_validators_template_id\"))\r\n        if !DBFind(\"voting_templates\").WhereId(templateId).One(\"id\"){\r\n            warning \"Voting template not found\"\r\n        }\r\n        if $VotingTemplateId != templateId{\r\n            warning \"Incorrect template\"\r\n        }\r\n\r\n        var candidateId oldRoleId roleId int roleName string\r\n        oldRoleId = getAppRoleId(appId, \"role_candidate_for_validators\", false)\r\n        roleId = getAppRoleId(appId, \"role_validator\", true)\r\n\r\n        candidateId = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId}).One(\"candidate_key_id\")\r\n        if !candidateId {\r\n            warning \"Candidate key id not found\"\r\n        }\r\n        $oldRoleRowId = Int(DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":oldRoleId, \"member->member_id\":candidateId}).One(\"id\"))\r\n\r\n        $roleId = Int(DBFind(\"roles\").Where({id:roleId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning \"Validator role not found\"\r\n        }\r\n    }\r\n\r\n    func action{\r\n        if $oldRoleRowId > 0 {\r\n            RolesUnassign(\"row_id\", $oldRoleRowId)\r\n        }\r\n        RolesAssign(\"rid,member_id\", $roleId, Int($KeyId))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorInit{\r\n    data{\r\n        KeyId int\r\n    }\r\n    \r\n    conditions{\r\n        ContractConditions(\"MainCondition\")\r\n        $candidate = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId, deleted:0}).Row()\r\n        if !$candidate{\r\n            warning \"Candidate not found\"\r\n        }\r\n    }\r\n    action{\r\n        DelegateRefresh()\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}