{
    "name": "Basic application",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:Platform parameters, Page:sysparams_list, Icon:\"fa icon-settings\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Ecosystems, Page: membership_ecosystems_list, Icon:\"fa fa-list-ul\")\nMenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\n    MenuItem(Title:Candidate for validators, Page: sysparams_candidates_list, Icon:\"icon-list\")\n    MenuItem(Title:Ecosystems list, Page: sysparams_ecosystems_list, Icon:\"icon-list\")\n    MenuItem(Title:Tokens refund list, Page:tokenrefund_list, Icon:\"icon-list\")\n}",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "laws",
            "Columns": "[\n    {\n        \"name\": \"name\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"page\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_template_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\n    {\n        \"name\": \"commission_address\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"comment\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"host_ip\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"description\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"commission_pub\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidate_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\n    {\n        \"name\": \"victim_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"attacker_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"amount\",\n        \"type\": \"money\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"note\",\n        \"type\": \"text\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"validator_key_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"blocked_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"result\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"closed_at\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\n    DBFind(ecosystems,src_num)\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\n    Data(section1, \"name,type,res,req,src\"){\n        Ecosystem_number,select_validate,ecosystem,*,src_num\n        Ecosystem_name,input,catalog_ecosystems_name,*,\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\n    }\n    Data(section2, \"name,type,res,req,src\"){\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\n    }\n    Data(section3, \"name,type,res,req,src\"){\n        Description,textarea,catalog_ecosystems_description,*,\n        Conditions,textarea,catalog_ecosystems_conditions,*,\n    }\n    Data(section4, \"name,type,res,req,src\"){\n        Vde_page,input,vde_page,,\n        Vde_form_address,input,vde_form_desc,,\n    }\n    Data(section5, \"name,type,res,req,src\"){\n        Web_page,input,web_page,,\n        Web_form_address,input,web_form_desc,,\n    }\n    Data(section6, \"name,type,res,req,src\"){\n        Email,input,catalog_ecosystems_contact_email,,\n        Phone,input,catalog_ecosystems_contact_phone,,\n    }\n    Data(sections, \"section_name\"){\n        section1\n        section2\n        section3\n        section4\n        section5\n        section6\n    }\n\n    SetTitle($catalog_ecosystems_form$)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\n    }\n\n    Div(row){\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    ForList(sections){\n                        Div(list-group-item){\n                            ForList(#section_name#){\n                                Div(row){\n                                    Div(col-md-5 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(#res#))\n                                            If(#req#==*){\n                                                Span(Class: text-danger, Body:*)\n                                            }\n                                        }\n                                    }\n                                    Div(col-md-7 mb-sm text-left){\n                                        If(#type#==select_validate){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\n                                            InputErr(Name: #name#, required: need)\n                                        }\n                                        If(#type#==select){\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                        If(#type#==image){\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\n                                        }\n                                        If(#type#==input){\n                                            Input(Name: #name#)\n                                        }\n                                        If(#type#==textarea){\n                                            Input(Name: #name#, Type:textarea)\n                                        }\n                                        If(#type#==radio){\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: catalog_ecosystems_list)\n                    Button(Contract: CatalogAddEcosystem, Class: btn btn-primary pull-right, Page: catalog_ecosystems_list, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\n    SetTitle($catalog_ecosystems$)\n    AddToolButton(Title: $add$, Page: catalog_ecosystems_create, Icon: icon-plus)\n\n    SetVar(Where,{deleted:0})\n    If(#param_flag_free#==0){\n        SetVar(Where,{deleted:0})\n    }.ElseIf(#param_flag_free#==1){\n        SetVar(Where,{deleted:0, flag_free:1})\n    }.ElseIf(#param_flag_free#==2){\n        SetVar(Where,{deleted:0, flag_free:2})\n    }.Else{\n        SetVar(param_flag_free,0)\n    }\n\n    Div(row){\n        Div(col-md-12 text-left){\n            Div(btn-group){\n                If(#param_flag_free#==0){\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==1){\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#param_flag_free#==2){\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            DBFind(catalog_ecosystems,src_catalog).Where(#Where#).Order(\"ecosystem_number\").Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\n                LinkPage(Page: catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\n                }\n            }.Custom(custom_type){\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\n            }.Custom(custom_free){\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\n            }.Custom(custom_ecosystem){\n                Span(Class: h5, Body: #ecosystem_number#)\n            }\n\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_catalog, Columns:\"$id$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(app)\n    DBFind(catalog_ecosystems,src_catalog).WhereId(#v_id#).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Vars(prefix)\n    \n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\n    Div(breadcrumb){\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\n    }\n    \n    Div(row){\n        Div(col-md-10 col-md-offset-1){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#prefix_image_id# > 0){\n                                    DBFind(binaries).WhereId(#prefix_image_id#).Columns(\"data\").Vars(img)\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\n                                }\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0){\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\n                            }\n                        }\n                    }\n                    Div(form-group){\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\n                            }\n                        }\n                        Div(row mb-sm){\n                            Div(col-md-6 mc-sm text-right){\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\n                            }\n                            Div(col-md-6 mc-sm text-left){\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_new",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($name$)\n        Input(Placeholder: Name of Ecosystem, Name:Name)\n    }\n    Div(form-group text-left){\n        Button(Body: LangRes(back), Class: btn btn-default, Page: membership_ecosystems_list)\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: membership_ecosystems_list)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    SetTitle(Membership Request)\n\n    DBFind(notifications).Where({id:#notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Div(h3 text-bold){\n                        Membership Request\n                    }\n                    Div(){\n                        For ecosystem: \"#ecosystem_name#\" (#ecosystem_id#)\n                    }\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                Div(m0 h3 text-bold){#notific_sender_member_name#}\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(address))\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\n                    }\n                    Div(list-group-item text-center){\n                        If(#notific_closed# == 0){\n                            Button(Class: btn btn-danger mr-lg, Body: Reject, Contract: MembershipDecide, Page: default_page, Params: \"notific_id=#notific_id#,Accept=1\")\n                            Button(Class: btn btn-success, Body: Accept, Contract: MembershipDecide, Page: default_page, Params: \"notific_id=#notific_id#,Accept=0\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(Ecosystems)\n    Div(breadcrumb){\n        Div(row){\n            Div(col-md-10){\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\n            }\n            Div(col-md-2){\n                Button(Body: $create$, Class: pull-right, Page: ecosystem_new).Popup(Header: $create$, Width: \"30\")\n            }\n        }\n    }\n\n    If(GetVar(Search)){\n        SetVar(Where,{name:{\"$like\":#Search#}, id:{\"$neq\":1}})\n    }.Else{\n        SetVar(Where,{id:{\"$neq\":1}})\n        SetVar(Search,)\n    }\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(name)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: membership_ecosystems_list, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#Where#\").Custom(_id){\n                Span(#id#)\n            }.Custom(_name){\n                Span(#name#)\n            }.Custom(_actions){\n                SetVar(k_id,)\n                DBFind(notifications).Where({\"sender->member_id\":#key_id#, \"page_params->ecosystem_id\":#id#, closed:0}).Count(notific_count)\n                DBFind(keys).WhereId(#key_id#).Ecosystem(#id#).Limit(1).Vars(\"k\")\n\n                If(And(#notific_count#==0,#k_id#==\"\")){\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"MembershipRequest\", Page: membership_ecosystems_list, Params: \"ecosystem_num=#id#\")\n                }\n            }\n\t\t\t\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_ecosystems, Columns: \"ID=_id,$name$=_name,=_actions\")\n                }\n            }\n\t\t\t\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: membership_ecosystems_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    SetTitle(Membership Request)\n\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: Membership Request)\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                Div(m0 h3 text-bold){#notific_recipient_member_name#}\n                            }\n                        }\n                    }\n                    If(#notific_page_params_status# == 1){\n                        Div(list-group-item text-center){\n                            Div(text-success h3){\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is accepted!\n                            }\n                        }\n                        Div(list-group-item text-center){\n                            If(#notific_closed# == 0){\n                                Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=default_page\")\n                            }\n                        }\n                    }.Else{\n                        Div(list-group-item text-center){\n                            Span(Class: text-danger h3){\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is rejected!\n                            }\n                        }\n                        Div(list-group-item text-center){\n                            If(#notific_closed# == 0){\n                                Button(Class: btn btn-primary, Body: OK, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: default_page)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidate_validators_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n\n    SetTitle($sysparams_candidate_validators_form$)\n    Div(Class: breadcrumb){\n        LinkPage($sysparams_candidates$, sysparams_candidates)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\n    }\n\n    Div(row){\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(form-group) {\n                        Label(LangRes(host_ip)*)\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\n                    }\n                    If(){\n                        Div(form-group) {\n                            Label(LangRes(commission_pub)*)\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\n                        }\n                    }\n                    Div(form-group) {\n                        Label(LangRes(commission_address)*)\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(description_equipment))\n                        Input(Name: Description, Type: textarea)\n                    }\n                    Div(form-group) {\n                        Label(LangRes(comment))\n                        Input(Name: Comment, Type: textarea)\n                    }\n                }\n                Div(panel-footer text-right){\n                    Div(pull-left){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_candidates_list)\n                    }\n                    Button(Contract: CandidateValidatorRequest, Class: btn btn-primary, Page: sysparams_candidates_list, Body: $send$)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\n    SetTitle($sysparams_candidates$)\n\n    DBFind(sysparams_candidate,src_candidates).Where({deleted:0}).Custom(_actions){\n        If(#template_id#>0){\n            Div(btn-group){\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\n                Button(Contract: VotingTemplateRun, Page: voting_list, Class: btn btn-default fa fa-play)\n            }\n        }.Else{\n            Span($voting_template_not_found$,text-muted)\n        }\n\n    }.Custom(_date){\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\n    }.Count(count)\n\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: $sysparams_candidates$)\n    }\n    AddToolButton(Title: $add$, Icon: icon-plus, Page: sysparams_candidate_validators_create)\n\n    Div(row){\n        Div(col-md-12){\n            Div(panel panel-primary){\n                If(#count#>0){\n                    Form(table-responsive){\n                        Input(Name: Duration, Type: hidden, Value: 14)\n                        Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\n                    }\n                }.Else{\n                    Div(h3 text-muted text-center){\n                        Candidates not found\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\nDBFind(buffer_data).Where({member_id:#key_id#, key:\"metrics\"}).Vars(m)\nJsonToSource(src_metrics,#m_value#)\n\nSetTitle($sysparams_ecos$)\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\n    Div(text-right){\n        If(#template_id#>0){\n            If(#is_valued#==0){\n                Input(Name: RowId, Type: hidden, Value: #id#)\n                Input(Name: NewValue, Type: hidden, Value: 1)\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: sysparams_ecosystems_list, Contract: VotingTemplateRun)\n            }\n        }.Else{\n            Span(voting id template not found in parameters, text-muted)\n        }\n    }\n}.Custom(_valued){\n    If(#is_valued#==1){\n        is valued\n    }\n}.Custom(_metrics){\n    If(#m_id#>0){\n        SetVar(eco_id,#id#)\n        ForList(src_metrics){\n            If(#key#==#eco_id#){\n                LinkPage(Body: `#value#`, Page:sysparams_metrics, PageParams:\"Id=#key#\")\n            }\n        }\n    }\n}\n\nData(form, \"Name,Type,Src\"){\n    Interval,number,\n    Aggregate,select,aggregates\n}\nData(aggregates, \"id,name\"){\n    max,Maximum\n    min,Minimum\n    avg,Average\n}\n\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        Div(panel-body){\n            ForList(form){\n                Div(row form-group){\n                    Div(col-sm-3 text-right){\n                        Label(For:#Name#){\n                            LangRes(#Name#)\n                        }\n                    }\n                    Div(col-sm-9){\n                        If(#Type#==datetime){\n                            Input(Name:#Name#, Type:date)\n                        }.ElseIf(#Type#==select){\n                            Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\n                        }.Else{\n                            Input(Name:#Name#, Type:#Type#)\n                        }\n                    }\n                }\n            }\n        }\n        Div(panel-footer text-right){\n            Button(Body: LangRes(udpate_metrics), Page: sysparams_ecosystems_list, Class:btn btn-primary, Contract:MetricsUpdate)\n        }\n    }\n    Form(panel panel-primary){\n        Div(panel-body){\n            Form(table-responsive){\n                Input(Name: TableWritten, Type: hidden, Value: ecosystems)\n                Input(Name: ColumnName, Type: hidden, Value: is_valued)\n                Input(Name: Duration, Type: hidden, Value: 3)\n                Input(Name: TemplateId, Type: hidden, Value: #template_id#)\n                Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\n            }\n        }\n    }\n}\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\nSetTitle(Platform parameters)\nJsonToSource(nodes){\n    SysParam(full_nodes)\n}\nForList(nodes){\n    Div(#key_id#)\n}\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\n    DBFind(contracts).Where({name:#name#}).Columns(id).Vars(sp)\n    If(#sp_id#>0){\n        If(#name#==\"full_nodes\"){\n            LinkPage(Class: fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\n        }.Else{\n            LinkPage(Class: fa fa-edit, Page: sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\n        }\n    }.Else{\n        condition contract not found\n    }\n}.Custom(_val){\n    Div(){\n        #value#\n    }.Style(max-width: 500px;overflow: hidden;)\n}\nDiv(){\n    Div(breadcrumb){\n        Div(Class:text-muted, Body: \"Parameters for configuring nodes, transactions, blocks, and payment for network resources.\")\n        Div(Class:text-muted, Body: \"Parameters change only by voting of different roles.\")\n    }\n    DBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\n    If(#validator_id#>0){\n        AddToolButton(Title: $sysparams_validator_resign$, Icon: icon-pin, Page: sysparams_validator_resign)\n    }\n    Div(table-responsive){\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:30px;\n        text-align:right;\n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n    table a {\n        font-size: 18px;\n    }\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: LangRes(sysparams_ecos), Page: sysparams_ecosystems_list)\n        Span(\"/\",mh-sm)\n        Span(LangRes(sysparams_metrics), text-muted)\n    }\n    SetVar(title,\"LangRes(sysparams_metrics)\")\n    SetTitle(#title#)\n    Div(container){\n        If(GetVar(Id)){\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\n            SetTitle(#title#)\n            Data(tables, \"Name,Metric\"){\n                pages,ecosystem_pages\n                members,ecosystem_members\n                tx,ecosystem_tx\n            }\n            ForList(tables){\n                DBFind(metrics,src_metric).Where({key:#Id#, metric:#Metric#}).Order(\"time\").Count(count)\n                If(#count#>0){\n                    Div(h3){LangRes(#Name#)}\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\n                }\n            }\n        }.Else{\n            Div(alert alert-warning){\n                Ecosystem id not found\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_validator_resign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\nDBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\nSetTitle($sysparams_validator_resign$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body:$system_params$, Page: sysparams_list)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $sysparams_validator_resign$)\n    }\n    If(#validator_id#>0){\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Div(panel panel-primary text-center){\n                    Div(panel-heading){\n                        $validator_removing$\n                    }\n                    Div(panel-body text-center){\n                        $validator_removing_desc$\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: $back$, Class: btn btn-default, Page: sysparams_list)\n                        Button(Body: $resign$, Class: btn btn-danger pull-right, Page: sysparams_list, Contract: ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(text-danger text-center text-bold){\n            LangRes(attention_not_validator)\n        }\n    }\n\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nSetVar(tid, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\nDBFind(voting_templates,temps).WhereId(#tid#).Vars(template)\nSetTitle($voting$)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($system_params$, sysparams_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $voting$)\n    }\n\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\n        DBFind(system_parameters).Where({name:#param_name#}).Vars(param)\n        DBFind(voting_templates).WhereId(#template_id#).Columns(\"title,id\").Vars(template)\n        SetTitle(#template_title#)\n        If(#param_name#!=\"full_nodes\"){\n            Form(){\n                Div(form-group){\n                    Label(For: ColumnName){\n                        LangRes(name)\n                    }\n                    Input(Name: ColumnName, Value: #param_name#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: Duration){\n                        LangRes(duration)\n                    }\n                    Input(Name:Duration, Value:21, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: TemplateId){\n                        LangRes(template_id)\n                    }\n                    Input(Name: TemplateId, Value:#template_id#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(For: Value){\n                        LangRes(value)\n                    }\n                    Input(Name: Value, Value: #param_value#, Disabled: true)\n                }\n                Div(form-group){\n                    Label(){\n                        LangRes(new_value)\n                    }\n                    Input(Name: NewValue, Type: textarea)\n                }\n                Div(text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                    Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingTemplateRun, Page: voting_list)\n                }\n            }\n        }.Else{\n            SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(App:#application_id#, Name: first_node)).(first_node_set,)\n            SetTitle(\"#param_name#: $add$ $new_value$\")\n            Form(){\n                If(`#full_nodes#`==\"\"){\n                    JsonToSource(src_first_node,#first_node#)\n                    ForList(src_first_node){\n                        If(#value#==\"\"){\n                            SetVar(first_node_set,error)\n                        }\n                    }\n                    If(#first_node_set#==error){\n                        Div(text-center){\n                            ForList(src_first_node){\n                                If(#value#==\"\"){\n                                    Div(){first node: '#key#' empty}\n                                }\n                            }\n                        }\n                        Div(text-center){\n                            DBFind(app_params).Where({name:first_node}).Vars(first_node_param)\n                            Button(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=sysparams_list\"){\n                                Install the first node before adding the new\n                            }\n                        }\n                    }\n                }\n                If(#first_node_set#!=error){\n                    Div(form-group){\n                        Label(For: Duration){\n                            LangRes(duration)\n                        }\n                        Input(Name:Duration, Value:21, Disabled: true)\n                    }\n                    Div(form-group){\n                        Label(For: TcpAddress){\n                            LangRes(tcp_address)\n                        }\n                        Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\n                    }\n                    Div(form-group){\n                        Label(For: ApiAddress){\n                            LangRes(api_address)\n                        }\n                        Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\n                    }\n                    Div(form-group){\n                        Label(For: KeyId){\n                            LangRes(node_founder_key_id)\n                        }\n                        Input(Name: KeyId,Type: number, Value: #key_id#)\n                    }\n                    Div(form-group){\n                        Label(For: PubKey){\n                            LangRes(node_pub_key)\n                        }\n                        Input(Name: PubKey, Type: textarea)\n                    }\n\n                    Div(text-left mb-lg){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: sysparams_list)\n                        Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingNodeAdd, Page: voting_list)\n                    }\n                }\n            }\n            AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\n            SetVar(node_owner,)\n            ForList(nodes_keys){\n                If(#name#==\"key_id\"){\n                    SetVar(node_owner, 1)\n                }\n            }\n\n            If(#node_owner#==1){\n                Form(text-center){\n                    Div(h3){$delete_node$}\n                    Div(){$delete_node_desc$}\n                    Div(text-right){\n                        Button(Body: LangRes(delete), Class: btn btn-danger, Page: sysparams_list, Contract: NodeRemoveByKey)\n                    }\n                }\n            }\n            If(`#full_nodes#`!=\"\"){\n                ArrayToSource(src_full_nodes,`#full_nodes#`)\n                Div(mt-lg form-group text-left text-muted){\n                    Label(){Nodes list}\n                    ForList(src_full_nodes){\n                        JsonToSource(src_node,`#value#`)\n                        Div(list-group-item){\n                            Label(){node #key#}\n                            ForList(src_node){\n                                Div(){\n                                    Strong(#key#:) #value#\n                                }\n                            }\n                        }\n                    }\n                }.Style(word-break: break-all;)\n            }\n        }\n    }.Else{\n        Div(text-danger text-center text-bold){\n            If(#param_index#>0){}.Else{\n                Div(){LangRes(attention)}\n            }\n            If(#tid#>0){\n                If(#template_id#>0){}.Else{\n                    Div(mb-sm){\n                        LangRes(voting_template_not_found)\n                    }\n                    LinkPage(Page: voting_templates_list, Class: btn btn-info){\n                        Set the template\n                    }\n                }\n            }.Else{\n                Div(mb-sm){\n                    LangRes(voting_template_id_not_found)\n                }\n                DBFind(app_params).Where({name:voting_sysparams_template_id}).Vars(template_param)\n                LinkPage(Page: app_params_edit, Class: btn btn-info, PageParams: \"back_page=sysparams_list,id=#template_param_id#\"){\n                    Set the template ID\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_accept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"id,page_params->tokenrefund_id,closed\").Vars(note)\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\n\n    Data(inputs,\"Name,Type,Res,Value\"){\n        Amount,number,amount,#tr_amount#\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\n        Note,textarea,description,#tr_note#\n    }\n    Div(content-wrapper){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading, Body: $tokenrefund_start$)\n                    Div(panel-body){\n                        ForList(inputs){\n                            Div(row form-group){\n                                Div(col-sm-4){LangRes(#Res#)}\n                                Div(col-sm-8){\n                                    If(#Type#==textarea){\n                                        #Value#\n                                    }.Else{\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        If(#note_closed# == 0){\n                            Button(Body: $approve$, Contract: TokensRefundAccept, Params: \"Id=#tr_id#\", Page: tokenrefund_list, Class: btn btn-primary)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\n    Amount,number,amount,\"\"\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\n    Note,textarea,description,\"\"\n}\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: $tokenrefund_start$)\n                Div(panel-body){\n                    ForList(Source: inputs){\n                        Div(row form-group){\n                            Div(col-sm-4){LangRes(#res#)}\n                            Div(col-sm-8){\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: tokenrefund_list)\n                    Button(Body: $start_refund$, Contract: VotingTokensRefundCreate, Page: tokenrefund_list, Class: btn btn-primary pull-right)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\n    SetTitle($tokenrefund_list$)\n\n    DBFind(tokenrefund,tokenrefunds).Order({id:\"-1\"}).Custom(_status){\n        If(#status#>0){\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\n            LangRes(#sta#)\n        }.Else{\n            $tokenrefund_status0$\n        }\n    }.Custom(_result){\n        If(#result#>0){\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\n            LangRes(#res#)\n        }.Else{\n            $tokenrefund_result0$\n        }\n    }.Custom(_blocked){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\n    }.Custom(_closed){\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\n    }.Custom(_accounts){\n        Div(){$tokenrefund_victim$: #victim_key_id#}\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\n    }.Custom(_voting){\n        LinkPage(Page: voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\n    }\n\n    Div(panel panel-primary){\n        Div(table-responsive){\n            Table(tokenrefunds,\"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\n        }\n\n        Form(panel-footer text-right){\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: tokenrefund_create)\n        }\n    }\n}\n\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CandidateValidatorDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorDelete{\n    data{\n        Id int\n    }\n    conditions{\n        var candidateId roleId int\n        roleId = 2 // Candidate for validators\n        candidateId = DBFind(\"sysparams_candidate\").WhereId($Id).One(\"candidate_key_id\")\n        \n        $role = DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":roleId, \"member->member_id\":candidateId}).Row()\n        if !$role {\n            warning \"Candidate role not found\"\n        }\n    }\n    action{\n        DBUpdate(\"sysparams_candidate\", $Id, {deleted:1})\n        RolesUnassign(\"row_id\", Int($role[\"id\"]))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorRequest{\n    data{\n        HostIp string\n        // CommissionPub string\n        CommissionAddress string\n        Description string \"optional\"\n        Comment string \"optional\"\n    }\n\n    func IsNotValidIp(ip string)bool{\n        var parts array\n        var i, lenParts, part int\n        parts = Split(ip, \".\")\n\n        lenParts = Len(parts)\n        if lenParts != 4{\n            return true\n        }\n        while i< lenParts {\n            part = Int(parts[i])\n            if part < 0{\n                return true\n            }\n            if part > 255{\n                return true\n            }\n            i = i+1\n        }\n\n        return false\n    }\n\n    conditions{\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\n        // if $CommissionAddress != PubToID($CommissionPub) {\n        // info \"Address or Public key are invalid\"\n        // }\n\n        $CommissionAddress = AddressToId($CommissionAddress)\n        if !DBFind(\"keys\").WhereId($CommissionAddress).Row(){\n            warning \"Address not valid\"\n        }\n\n        if IsNotValidIp($HostIp){\n            warning \"Please enter a valid ip address\"\n        }\n        var roleName string, roleId int, role map\n        roleName = \"Candidate for validators\"\n        roleId = 4\n        role = DBFind(\"roles\").Where({role_name:roleName, id:roleId, deleted:0}).Row()\n        if !role{\n            warning Sprintf(\"Role %q not found\", roleName)\n        }\n        RolesAssign(\"rid,member_id\", roleId, $key_id)\n    }\n\n    action{\n        var m map\n        m[\"host_ip\"] = $HostIp\n        m[\"commission_pub\"] = \"\"\n        m[\"commission_address\"] = $CommissionAddress\n        m[\"description\"] = $Description\n        m[\"comment\"] = $Comment\n        m[\"candidate_key_id\"] = $key_id\n        m[\"date_created\"]  = BlockTime()\n        m[\"deleted\"] = 0\n        DBInsert(\"sysparams_candidate\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CatalogAddEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CatalogAddEcosystem {\n    data {\n        Ecosystem_name string\n        Ecosystem_number int\n        Ecosystem_type int\n        Description string\n        Conditions string\n        Flag_free int\n        Vde_form_address string \"optional\"\n        Vde_page string \"optional\"\n        Web_form_address string \"optional\"\n        Web_page string \"optional\"\n        Email string \"optional\"\n        Phone string \"optional\"\n    }\n    conditions {\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\n        FOUNDER_ACCOUNT = \"founder_account\"\n        DELEGATE_ACCOUNT = \"delegate_account\"\n\n        if Size($Email) > 0 {\n            var emailParts int\n            emailParts = Split($Email, \"@\")\n            if Len(emailParts) != 2 {\n                warning \"Invalid email\"\n            }\n        }\n\n        var ecoExists map\n        ecoExists = DBFind(\"catalog_ecosystems\").Where({ecosystem_number:$Ecosystem_number, deleted:0}).Row()\n        if ecoExists {\n            info \"The ecosystem with same number already added\"\n        }\n\n        var isFounder, isDelegate bool\n        var founder, delegate map\n        founder = DBFind(\"parameters\").Where({name:FOUNDER_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\n        isFounder = founder[\"value\"] == $key_id\n\n        delegate = DBFind(\"parameters\").Where({name:DELEGATE_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\n        if delegate {\n            isDelegate = delegate[\"value\"] == $key_id\n        }\n        if !(isFounder || isDelegate) {\n            warning \"Sorry, you can not add this ecosystem\"\n        }\n    }\n\n    action {\n        var ecosystem_info url_address m map\n        ecosystem_info[\"description\"] = $Description\n        ecosystem_info[\"conditions\"] = $Conditions\n        ecosystem_info[\"email\"] = $Email\n        ecosystem_info[\"phone\"] = $Phone\n\n        url_address[\"web_page\"] = $Web_page\n        url_address[\"web_form_address\"] = $Web_form_address\n        url_address[\"vde_page\"] = $Vde_page\n        url_address[\"vde_form_address\"] = $Vde_form_address\n\n        m[\"ecosystem_name\"] = $Ecosystem_name\n        m[\"ecosystem_number\"] = $Ecosystem_number\n        m[\"ecosystem_type\"] = $Ecosystem_type\n        m[\"image_id\"] = 0\n        m[\"ecosystem_info\"] = ecosystem_info\n        m[\"url_address\"] = url_address\n        m[\"flag_free\"] = $Flag_free\n        DBInsert(\"catalog_ecosystems\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelegateRefresh{\n    func NotInArray(val string, arr array) bool{\n        var i int\n        // info arr\n        while i < Len(arr){\n            if val == arr[i]{\n                return false\n            }\n            i = i + 1\n        }\n        return true\n    }\n    func getAppRoleId(id int, name string) int{\n        var rid int\n        rid = Int(AppParam(id, name))\n        if rid == 0{\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\n        }\n        return rid\n    }\n    conditions{\n        MainCondition()\n        var appId roleId int\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning \"Application not found\"\n        }\n        roleId = getAppRoleId(appId, \"role_delegate\")\n\n        $role = DBFind(\"roles\").Where({id:roleId, deleted:0}).Row()\n        if !$role{\n            warning \"Role not found\"\n        }\n    }\n\n    action{\n        // get delegates ids\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\n        while i < Len(ecosystems) {\n            var eco delegateParam map\n            eco = ecosystems[i]\n            ecoId = Int(eco[\"id\"])\n            delegateParam = DBFind(\"parameters\").Where({name:\"delegate_account\"}).Ecosystem(ecoId).Row()\n            if !delegateParam{\n                delegateParam = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(ecoId).Row()\n            }\n\n            if NotInArray(delegateParam[\"value\"], delegateIds){\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\n            }\n            i = i + 1\n        }\n\n        // remove old role assigns\n        rid = Int($role[\"id\"])\n        currentDelegates = DBFind(\"roles_participants\").Where({\"role->id\":rid, deleted:0}).Columns(\"id,member->member_id\")\n        var delegate map id int\n        i = 0\n        while i < Len(currentDelegates){\n            delegate = currentDelegates[i]\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\n                id = Int(delegate[\"id\"])\n                RolesUnassign(\"row_id\", id)\n            }\n            i = i + 1\n        }\n\n        // assign new roles\n        var key map delegateId int\n        i = 0\n        while i < Len(delegateIds) {\n            delegateId = Int(delegateIds[i])\n            key = DBFind(\"keys\").WhereId(delegateId).Row()\n            if key {\n                // check role dup\n                if !DBFind(\"roles_participants\").Where({\"member->member_id\":delegateId, \"role->id\":rid, deleted:0}).Row(){\n                    RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\n                }\n            }\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract InvestorRefresh {\n    func NotInArray(val string, arr array) bool{\n        var i lenArr int\n        lenArr = Len(arr)\n        while i < lenArr{\n            if val == Str(arr[i]){\n                return false\n            }\n            i = i + 1\n        }\n        return true\n    }\n    func getParamInt(id int, name string) int{\n        var param int\n        param = Int(AppParam(id, name))\n        if param == 0{\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\n        }\n        Println(\"return param\")\n        return param\n    }\n    conditions{\n        var appId int\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning \"Application not found\"\n        }\n\n        var roleValidatorId roleInvestorId string\n\n        roleValidatorId = getParamInt(appId, \"role_validator\")\n        if $role_id != roleValidatorId {\n            warning \"You not Validator. You can not to run this\"\n        }\n\n        roleInvestorId = getParamInt(appId, \"role_investor_with_voting_rights\")\n        $roleId = Int(DBFind(\"roles\").Where({id:roleInvestorId, deleted:0}).One(\"id\"))\n        if $roleId == 0{\n            warning \"Investor role not found or deleted\"\n        }\n\n        $limitInvestors = getParamInt(appId, \"investors_number\")\n    }\n\n    action{\n        // get investors ids\n        var keysInvestors assignedInvestors investorsIds assignedIds array\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\n        assignedInvestors = DBFind(\"roles_participants\").Where({\"role->id\":$roleId, deleted:0}).Columns(\"member->member_id\")\n\n        // get ids\n        var i int\n        while i < Len(keysInvestors) {\n            var inv map\n            inv = keysInvestors[i]\n            investorsIds[i] = inv[\"id\"]\n            i = i + 1\n        }\n        i = 0\n        while i < Len(assignedInvestors) {\n            var inv map\n            inv = assignedInvestors[i]\n            assignedIds[i] = inv[\"member.member_id\"]\n            i = i + 1\n        }   \n\n        // remove old investors\n        var assigned map mid string\n        i = 0\n        while i < Len(assignedIds) {\n            if NotInArray(assignedIds[i], investorsIds){\n                mid = assignedIds[i]\n                assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":mid, \"role->id\":$roleId}).Row()\n                if assigned {\n                    RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\n                }\n            }\n            i = i + 1\n        }\n        // add new investors\n        i = 0\n        while i < Len(investorsIds) {\n            if NotInArray(investorsIds[i], assignedIds){\n                if DBFind(\"keys\").WhereId(Int(investorsIds[i])).Row(){\n                    RolesAssign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\n                }\n            }\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipDecide {\n    data {\n        notific_id int\n        Accept int\n    }\n    conditions {\n        $request = DBFind(\"notifications\").WhereId($notific_id).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Row()\n\n\n        if Int($request[\"closed\"]) == 1 {\n            warning \"Request already processed\"\n        }\n\n        var founder_id int\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(Int($request[\"page_params.ecosystem_id\"])).One(\"value\")\n\n        if founder_id != $key_id {\n            warning \"You are not the founder of the ecosystem\"\n        }\n    }\n    action {\n        var params map\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\n        if ($Accept == 0){\n            params[\"status\"] = 1\n\n            var table_name string\n            table_name = Sprintf(\"@%v_keys\", $request[\"page_params.ecosystem_id\"])\n\n            var pub string mid int\n            mid = Int($request[\"sender.member_id\"])\n            pub = DBFind(\"keys\").WhereId(mid).One(\"pub\")\n            DBInsert(table_name, {id:mid, pub:pub})\n        }\n        else{\n            params[\"status\"] = 0\n        }\n\n        var icon header body page ecoName ecoId string\n        ecoId = $request[\"page_params.ecosystem_id\"]\n        ecoName = DBFind(\"ecosystems\").Where({id:ecoId}).One(\"name\")\n        icon = \"icon icon-user-follow\"\n        header = \"Request is accepted\"\n        body = Sprintf(\"Your request to membership for ecosystem '%v' (%v) is accepted\", ecoName, ecoId)\n        page = \"membership_user_view\"\n\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, icon, header, body, page, params)\n        NotificationsClose(\"notific_id\", $notific_id)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipRequest {\n    data {\n        ecosystem_num int\n    }\n\n    conditions {\n        if DBFind(\"notifications\").Where({\"page_params->ecosystem_id\":$ecosystem_num, \"sender->member_id\":$key_id, closed:0, page_name:\"membership_admin_view\"}).Row(){\n            warning \"Request already sent\"\n        }\n    }\n\n    action {\n        var notific_params map founder_id int\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem($ecosystem_num).One(\"value\")\n\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MetricsUpdate{\n    data{\n        Interval string\n        Aggregate string\n    }\n    func mapping(items array)map{\n        var mapout map, i int\n        while i<Len(items){\n            var k v string, item map\n            item = items[i]\n            k = item[\"key\"]\n            v = item[\"value\"]\n            mapout[k] = v\n            i=i+1\n        }\n        return mapout\n    }\n    conditions{\n        if $Interval <= 0 {\n            $Interval = 1\n        }\n        var current_year int\n        current_year = 2018\n        if $Interval > (current_year - 1970)*365 {\n            warning \"Interval too big\"\n        }\n        $interval = Sprintf(\"%v days\", $Interval)\n    }\n\n    action{\n        var pages members txs array metrics map\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\n\n        var mPages mMembers mTxs map\n        mPages = mapping(pages)\n        mMembers = mapping(members)\n        mTxs = mapping(txs)\n\n        var i lenPages int\n        lenPages = Len(pages)\n        while i<lenPages{\n            var t map, k string\n            t = pages[i]\n            k = t[\"key\"]\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\n            i=i+1\n        }\n\n        if lenPages>0{\n            BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeRemoveByKey{\n    data{}\n    func nodesRemove(keyId int) array{\n        var nodesJSON string nodes res array\n        nodesJSON = SysParamString(\"full_nodes\")\n        if !HasPrefix(nodesJSON, \"[\") {\n            // empty string nodes\n            return res\n        }\n        nodes = JSONDecode(nodesJSON)\n        var i int\n        while i < Len(nodes){\n            var node map\n            node = nodes[i]\n            if node[\"key_id\"] != keyId {\n                res = Append(res, node)\n            }\n            i=i+1\n        }\n        return res\n    }\n    conditions{\n        if $original_contract != \"ValidatorResign\"{\n            warning \"Unknown contract\"\n        }\n    }\n    \n    action{\n        var nodes array fullNodes string\n        nodes = nodesRemove($key_id)\n        fullNodes = JSONEncode(nodes)\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefund",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefund {\n    data {\n        SenderId string \"optional\"\n        RecipientId string\n        Amount string\n    }\n\n    conditions {\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"VotingDecisionAccept\" || $original_contract == \"TokensRefundAccept\"))) {\n            error \"sender id error\"\n        }\n        var addressLen int\n        addressLen = 24\n\n        $amount = Money($Amount)\n        if $SenderId == \"\"{\n            $SenderId = Sprintf(\"%v\", $key_id)\n        }\n        if $amount <= 0 {\n            error \"TokensRefund. Amount less than or equal to zero\"\n        }\n\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\n            // is address. convert to key id\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\n        }\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\n            // is address. convert to key id\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\n        }\n\n        if Size($SenderId) > addressLen{\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\n        }\n        if Size($RecipientId) > addressLen{\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\n        }\n\n        $RecipientId = Int($RecipientId)\n        $SenderId = Int($SenderId)\n        var sender recipient map\n        sender = DBFind(\"keys\").WhereId($SenderId).Row()\n        if !sender{\n            error \"TokensRefund. Sender is invalid\"\n        }\n        if !DBFind(\"keys\").WhereId($RecipientId).Row(){\n            error \"TokensRefund. Recipient is invalid\"\n        }\n        if sender[\"blocked\"] == 1 {\n            error \"Sender blocked\"\n        }\n        if sender[\"amount\"] < $amount{\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\n        }\n    }\n\n    action {\n        DBUpdate(\"keys\", $SenderId, {\"-amount\":$amount})\n        DBUpdate(\"keys\", $RecipientId, {\"+amount\":$amount})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundAccept{\n    data{\n        Id string\n    }\n    func closeNotes(){\n        var notes array\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\n        var i int\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            var noteId int\n            noteId = Int(note[\"id\"])\n            NotificationsClose(\"notific_id\", noteId)\n            i=i+1\n        }\n    }\n    func refundAmount(victimId, attackerId, amount string){\n        TokensRefund(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\n    }\n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\n    }\n\n    conditions{\n        $Id = Int($Id)\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n        $votingID = $tokenrefund[\"voting_id\"]\n    }\n\n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        closeNotes()\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\n            return\n        }\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\n        // status 3: closed; result 2: the tokens returned\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:2})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundReject{\n    data{\n        Id string\n    }\n    \n    func unblockAccounts(victimId, attackerId string){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\n    }\n    \n    conditions{\n        $Id = Int($Id)\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\n        if !$tokenrefund{\n            error \"tokenrefund not found\"\n        }\n    }\n    \n    action{\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\n        // status 3: closed; 1: return cancelled\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:1})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ValidatorResign{\n    data{}\n    func getParamInt(id int, name string) int{\n        var param int\n        param = Int(AppParam(id, name))\n        if param == 0{\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\n        }\n        Println(\"return param\")\n        return param\n    }\n    conditions{\n        var roleValidatorId appId int\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\n        roleValidatorId = getParamInt(appId, \"role_validator\")\n        if $role_id != roleValidatorId {\n            warning \"You are not a Validator. You can not to run this\"\n        }\n        $assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":$key_id, \"role->id\":roleValidatorId, deleted:0}).One(\"id\")\n    }\n\n    action{\n        RolesUnassign(\"row_id\", Int($assigned))\n        NodeRemoveByKey()\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeAdd",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNodeAdd{\n    data{\n        TcpAddress string\n        ApiAddress string\n        KeyId int\n        PubKey string\n        Duration int\n    }\n    func warn(name, detail string){\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\n    }\n    func checkApiAddress(addr string){\n        var name string\n        name = \"API Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\n            warn(name, \"protocol\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        addr = Replace(addr, \"http://\", \"\")\n        addr = Replace(addr, \"https://\", \"\")\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n            addr = parts[0]\n        }\n    }\n    func checkTcpAddress(addr string){\n        var name string\n        name = \"TCP Address\"\n        if Size(addr) == 0 {\n            warn(name, \"size\")\n        }\n        if Contains(addr, \" \") {\n            warn(name, \"space\")\n        }\n        var parts array\n        if Contains(addr, \":\") {\n            parts = Split(addr, \":\")\n            if Len(parts) > 2 {\n                warn(name, \":\")\n            }\n            var port string\n            port = parts[1]\n            if port <= 0 {\n                warn(name, \"port\")\n            }\n        }\n    }\n    func checkPub(pub string){\n        if PubToID(pub) == 0 {\n            warning \"Public key invalid\"\n        }\n    }\n    func checkKeyId(keyid int){\n        var existed map\n        existed = DBFind(\"keys\").WhereId(keyid).Row()\n        if !existed {\n            warning \"Key id not found\"\n        }\n    }\n    func getNodesJSON() string{\n        var nodes string\n        nodes = SysParamString(\"full_nodes\")\n        if Size(nodes) < 100 {\n            nodes = \"[]\"\n        }\n        return nodes\n    }\n    func appendFirstNode(nodes array) array{\n        var first string firstNode map\n        first = AppParam($appId,\"first_node\")\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\n            warning \"Application parameter first_node not valid\"\n        }\n        firstNode = JSONDecode(first)\n        checkTcpAddress(firstNode[\"tcp_address\"])\n        checkApiAddress(firstNode[\"api_address\"])\n        checkKeyId(Int(firstNode[\"key_id\"]))\n        checkPub(firstNode[\"public_key\"])\n\n        nodes = Append(nodes, firstNode)\n        return nodes\n    }\n    conditions{\n        $appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\"))\n        if $templateId == 0 {\n            warning \"Template id not found\"\n        }\n        checkKeyId($KeyId)\n        checkPub($PubKey)\n        checkApiAddress($ApiAddress)\n        checkTcpAddress($TcpAddress)\n    }\n\n    action{\n        var nodes array node map\n        node[\"tcp_address\"] = $TcpAddress\n        node[\"api_address\"] = $ApiAddress\n        node[\"key_id\"] = Str($KeyId)\n        node[\"public_key\"] = $PubKey\n        nodes = JSONDecode(getNodesJSON())\n        if Len(nodes) == 0 {\n            nodes = appendFirstNode(nodes)\n        }\n        nodes = Append(nodes, node)\n        VotingTemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSysparamInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSysparamInit{\n    data{\n        Name string\n        Value string\n    }\n\n    conditions{\n        if GetContractByName($Name){\n            var params map\n            params[\"Value\"] = $Value\n            CallContract($Name, params)\n        } else {\n            warning \"System parameter not found\"\n        }\n        // InvestorRefresh()\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTokensRefundCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTokensRefundCreate{\n    data{\n        VictimAccount string\n        SuspectAccount string\n        Amount int\n        Note string\n    }\n    func blockAccounts(victimId, attackerId int){\n        if victimId==0 {\n            error \"unblockAccounts. invalid victim key\"\n        }\n        if attackerId==0{\n            error \"unblockAccounts. invalid attacker key\"\n        }\n        if !DBFind(\"keys\").Where({blocked:1, id:victimId}).One(\"id\"){\n            DBUpdate(\"keys\", victimId, {blocked:1})\n        }\n        if !DBFind(\"keys\").Where({blocked:1, id:attackerId}).One(\"id\"){\n            DBUpdate(\"keys\", attackerId, {blocked:1})\n        }\n    }\n    func getKeyId(test string) int{\n        if Len(Split(test, \"-\")) > 1 {\n            // probably it is address\n            return AddressToId(test)\n        }\n        if \"invalid\" != IdToAddress(Int(test)){\n            // probably it is key_id\n            return Int(test)\n        }\n        return 0\n    }\n\n    conditions{\n        if $Amount <= 0{\n            error \"Amount not valid\"\n        }\n        if Size($Note) == 0{\n            error \"Please add description\"\n        }\n        var victim attacker int\n        victim = getKeyId($VictimAccount)\n        attacker = getKeyId($SuspectAccount)\n        if victim == 0{\n            error \"Victim address not valid\"\n        }\n        if attacker == 0{\n            error \"Suspect address not valid\"\n        }\n        $victimId = victim\n        $attackerId = attacker\n\n        var app_id template_id int\n        app_id = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\n        if template_id <= 0 {\n            warning \"Template id not found\"\n        }\n\n        $template = DBFind(\"voting_templates\").WhereId(template_id).Row()\n        $votersRoleId = Int($template[\"voters\"])\n        $votingName = $template[\"title\"]\n        $typeParticipants = Int($template[\"type_participants\"])\n        $typeDecision = Int($template[\"type_decision\"])\n        $typeVoting = Int($template[\"type_voting\"])\n        $volume = Int($template[\"volume\"])\n        $quorum = Int($template[\"quorum\"])\n        $contractAccept = $template[\"contract_accept\"]\n        $contractReject = $template[\"contract_reject\"]\n        var initContract string\n        initContract = $template[\"init_contract\"]\n        if Size(initContract) > 4 { // greater then \"NULL\"\n            var m map\n            CallContract(initContract, m)\n        }\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\n\n        if !DBFind(\"roles_participants\").Where({\"role->id\":$votersRoleId, deleted:0}).One(\"id\") {\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\n        }\n    }\n\n    action{\n        blockAccounts($victimId,$attackerId)\n        var votingId int params m map paramsJSON interval_days string\n        interval_days = \"3\"\n        votingId = VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\n\n        m[\"victim_key_id\"] = $victimId\n        m[\"attacker_key_id\"] = $attackerId\n        m[\"amount\"] = $Amount\n        m[\"note\"] = $Note\n        m[\"validator_key_id\"] = $key_id\n        m[\"blocked_at\"] = BlockTime()\n        m[\"voting_id\"] = votingId\n        m[\"status\"] = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\n        m[\"result\"] = 0 // 0. discussion and voting 1. cancelled 2. the tokens returned\n        params[\"Id\"] = DBInsert(\"tokenrefund\", m)\n\n        paramsJSON = JSONEncode(params)\n        VotingSubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\n\n        VotingInvite(\"votingID,var_id\", votingId, $votersRoleId)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorAccept{\n    data{\n        VotingTemplateId string\n        KeyId string\n        VotingId string\n    }\n    func getAppRoleId(id int, name string, warn bool) int{\n        var rid int\n        rid = Int(AppParam(id, name))\n        if rid == 0 && warn{\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\n        }\n        return rid\n    }\n    func conditions{\n        var prev string\n        prev = $stack[0]\n        if Len($stack) > 2{\n            prev = $stack[Len($stack) - 2]\n        }\n        if prev != \"@1VotingDecisionCheck\"{\n            warning \"This contract allow starts only from @1VotingDecisionCheck\"\n        }\n\n        var appId templateId int params map\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\n        templateId = Int(AppParam(appId,\"voting_validators_template_id\"))\n        if !DBFind(\"voting_templates\").WhereId(templateId).One(\"id\"){\n            warning \"Voting template not found\"\n        }\n        if $VotingTemplateId != templateId{\n            warning \"Incorrect template\"\n        }\n\n        var candidateId oldRoleId roleId int roleName string\n        oldRoleId = getAppRoleId(appId, \"role_candidate_for_validators\", false)\n        roleId = getAppRoleId(appId, \"role_validator\", true)\n\n        candidateId = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId}).One(\"candidate_key_id\")\n        if !candidateId {\n            warning \"Candidate key id not found\"\n        }\n        $oldRoleRowId = Int(DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":oldRoleId, \"member->member_id\":candidateId}).One(\"id\"))\n\n        $roleId = Int(DBFind(\"roles\").Where({id:roleId, deleted:0}).One(\"id\"))\n        if $roleId == 0 {\n            warning \"Validator role not found\"\n        }\n    }\n\n    func action{\n        if $oldRoleRowId > 0 {\n            RolesUnassign(\"row_id\", $oldRoleRowId)\n        }\n        RolesAssign(\"rid,member_id\", $roleId, Int($KeyId))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorInit{\n    data{\n        KeyId int\n    }\n    \n    conditions{\n        ContractConditions(\"MainCondition\")\n        $candidate = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId, deleted:0}).Row()\n        if !$candidate{\n            warning \"Candidate not found\"\n        }\n    }\n    action{\n        DelegateRefresh()\n    }\n}",
            "Type": "contracts"
        }
    ]
}