{
    "name": "System",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#sort#==1){\n\tSetVar(sort_name, \"{id:1}\")\n}.ElseIf(#sort#==2){\n\tSetVar(sort_name, \"{id:-1}\")\n}.ElseIf(#sort#==3){\n\tSetVar(sort_name, \"{name: 1}\")\n}.ElseIf(#sort#==4){\n\tSetVar(sort_name, \"{name: -1}\")\n}.Else{\n\tSetVar(sort, \"1\")\n\tSetVar(sort_name, \"{id:1}\") \n}\n\nIf(Or(#width#==12,#width#==6,#width#==4)){\n}.Else{\n\tSetVar(width, \"12\")\n}\n\nForm(){\n\tDiv(clearfix){\n\t\tDiv(pull-left){\n            DBFind(@1applications,apps).Where({ecosystem:#ecosystem_id#})\n\t\t\tSelect(Name:AppId, Source:apps, NameColumn: name, ValueColumn: id, Value: #buffer_value_app_id#, Class: bg-gray)\n\t\t}\n\t\tDiv(pull-left){\n\t\t\tButton(Class: fa fa-play btn bg-gray ml-sm, Page: #admin_page#, PageParams: \"sort=#sort#,width=#width#,current_page=#current_page#\", Contract: @1SelectApp, Params: \"ApplicationId=Val(AppId)\")\n\t\t}\n\t\tDiv(pull-right){\n\t\t\tIf(#sort#==1){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.ElseIf(#sort#==2){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}\n\t\t\tIf(#sort#==3){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.ElseIf(#sort#==4){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Sort by NAME, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}\n\t\t}\n\t\tDiv(pull-right){\n            If(#hideLink#==0){\n            }.ElseIf(#width#==12){\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\n            }\n            If(#hideLink#==0){\n            }.ElseIf(#width#==6){\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\n            }\n            If(#hideLink#==0){\n            }.ElseIf(#width#==4){\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\n            }.Else{\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\n            }\n\t\t}\n\t}\n}\n",
            "Type": "blocks"
        },
        {
            "Name": "export_info",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1buffer_data).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key:'export', member_id: #key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(@1pages, src_pages).Where({app_id: #buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_pages)\n    DBFind(@1blocks, src_blocks).Where({app_id: #buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_blocks)\n    DBFind(@1app_params, src_parameters).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_parameters)\n    DBFind(@1languages, src_languages).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_languages)\n    DBFind(@1contracts, src_contracts).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_contracts)\n    DBFind(@1tables, src_tables).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_tables)\n}\n\nDiv(panel panel-primary){\n    If(#buffer_value_app_id# > 0){\n        Div(){\n            Button(Body: \"Export - #buffer_value_app_name#\", Class: btn btn-primary btn-block, Page: @1export_download, Contract: @1Export)\n        }\n    }.Else{\n        Div(panel-heading, \"Export\")\n    }\n    Form(){\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Pages\")\n                }\n                Div(pull-right){\n                    If(#count_pages# > 0){\n                        Span(\"(#count_pages#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_pages# > 0){\n                        ForList(src_pages){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Blocks\")\n                }\n                Div(pull-right){\n                    If(#count_blocks# > 0){\n                        Span(\"(#count_blocks#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_blocks# > 0){\n                        ForList(src_blocks){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Menu\")\n                }\n                Div(pull-right){\n                    If(#buffer_value_app_id# > 0){\n                        Span(\"(#buffer_value_count_menu#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\n                        Span(Class: h6, Body:\"#buffer_value_menu_name#\")\n                    }.Else{\n                        Span(Class: h6, Body:\"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Parameters\")\n                }\n                Div(pull-right){\n                    If(#count_parameters# > 0){\n                        Span(\"(#count_parameters#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_parameters# > 0){\n                        ForList(src_parameters){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Language resources\")\n                }\n                Div(pull-right){\n                    If(#count_languages# > 0){\n                        Span(\"(#count_languages#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_languages# > 0){\n                        ForList(src_languages){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Span(\"Contracts\")\n                }\n                Div(pull-right){\n                    If(#count_contracts# > 0){\n                        Span(\"(#count_contracts#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_contracts# > 0){\n                        ForList(src_contracts){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        Div(list-group-item){\n            Div(clearfix){\n                Div(pull-left){\n                    Tables\n                }\n                Div(pull-right){\n                    If(#count_tables# > 0){\n                        Span(\"(#count_tables#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 text-left text-muted){\n                    If(#count_tables# > 0){\n                        ForList(src_tables){\n                            Span(Class: h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: h6, Body: \"Nothing selected\")\n                    }\n                }\n            }\n        }\n        If(#buffer_value_app_id# > 0){\n            Div(panel-footer text-right){\n                Button(Body: Export, Class: btn btn-primary, Page: @1export_download, Contract: @1Export)\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "export_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\n    SetVar(res_type, \"pages\")\n}\n\nDiv(breadcrumb){\n    If(#res_type#==\"pages\"){\n        Span(Class: text-muted, Body: \"Pages\")\n    }.Else{\n        LinkPage(Body: \"Pages\", Page: @1export_resources,, \"res_type=pages\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"blocks\"){\n        Span(Class: text-muted, Body: \"Blocks\")\n    }.Else{\n        LinkPage(Body: \"Blocks\", Page: @1export_resources,, \"res_type=blocks\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"menu\"){\n        Span(Class: text-muted, Body: \"Menu\")\n    }.Else{\n        LinkPage(Body: \"Menu\", Page: @1export_resources,, \"res_type=menu\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"parameters\"){\n        Span(Class: text-muted, Body: \"Application parameters\")\n    }.Else{\n        LinkPage(Body: \"Application parameters\", Page: @1export_resources,, \"res_type=parameters\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"languages\"){\n        Span(Class: text-muted, Body: \"Language resources\")\n    }.Else{\n        LinkPage(Body: \"Language resources\", Page: @1export_resources,, \"res_type=languages\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"contracts\"){\n        Span(Class: text-muted, Body: \"Contracts\")\n    }.Else{\n        LinkPage(Body: \"Contracts\", Page: @1export_resources,, \"res_type=contracts\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"tables\"){\n        Span(Class: text-muted, Body: \"Tables\")\n    }.Else{\n        LinkPage(Body: \"Tables\", Page: @1export_resources,, \"res_type=tables\")\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "pager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#).Where(#pager_where#).Count(records_count)\n\t\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\n\nIf(#remainder# != 0){\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\n}.Else{\n    SetVar(last_page, #count_div_limit_int#)\n}\n\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\n\nIf(#current_page# < 5){\n    If(#last_page# >= 10){\n        Range(src_pages, 1, 11)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#) \n    }\n}.ElseIf(#delta_last_page# < 6){\n    If(#range_l_max# > 0){\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#)\n    }\n}.Else{\n    Range(src_pages, #range_l#, #range_r#)\n}\n\nDiv(){\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    ForList(src_pages){\n        Span(){\n            If(#id# == #current_page#){\n                Button(Body: #id#, Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\n            }.Else{\n                Button(Body: #id#, Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\n            }\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n}.Style(\"div {display:inline-block;}\")",
            "Type": "blocks"
        },
        {
            "Name": "pager_header",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#current_page# > 0){}.Else{\n\tSetVar(current_page, 1)\n}\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\nSetVar(current_page, #current_page#)",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:\"Dashboard\", Page:@1admin_index, Icon:\"icon-wrench\")\nMenuItem(Title:\"Applications\", Page:@1apps_list, Icon:\"icon-folder\")\nMenuItem(Title:\"Ecosystem parameters\", Page:@1params_list, Icon:\"icon-settings\")\nMenuItem(Title:\"Menus\", Page:@1menus_list, Icon:\"icon-list\")\nMenuItem(Title:\"Sections\", Page:@1section_list, Icon:\"icon-frame\")",
            "Type": "menu"
        },
        {
            "Name": "admin_resources",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:\"Contracts\", Page:@1app_contracts, Icon:\"icon-briefcase\")\nMenuItem(Title:\"Pages\", Page:@1app_pages, Icon:\"icon-screen-desktop\")\nMenuItem(Title:\"Blocks\", Page:@1app_blocks, Icon:\"icon-grid\")\nMenuItem(Title:\"Tables\", Page:@1app_tables, Icon:\"icon-docs\")\nMenuItem(Title:\"Binary data\", Page:@1app_binary, Icon:\"icon-layers\")\nMenuItem(Title:\"Language resources\", Page:@1app_langres, Icon:\"icon-globe\")\nMenuItem(Title:\"Application parameters\", Page:@1app_params, Icon:\"icon-wrench\")\n",
            "Type": "menu"
        },
        {
            "Name": "admin_index",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetVar(this_page, @1admin_index).(deleters_count,0)\nDBFind(@1contracts).Where({name:ItemChangeAppId,ecosystem:1}).Count(changer_count)\nDBFind(@1applications,src_apps).Where({deleted:0,ecosystem:#ecosystem_id#}).Order(id).Count(apps_count)\nIf(And(GetVar(Restore),GetVar(Table),GetVar(Id))){\n    Form(){\n        Select(Name:AppId, NameColumn: name, ValueColumn: id, Source: src_apps, Class:mb)\n        Div(){\n            Button(Class: btn btn-default, Page: #this_page#, PageParams: \"appid=0\", Body: \"Cancel\")\n            If(#ecosystem_id#==1){\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: \"Confirm\")\n            }.Else{\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: \"Confirm\")\n            }\n        }\n    }\n}.ElseIf(GetVar(block)){\n    Div(breadcrumb){\n        LinkPage(Body:Dashboard,Page:#this_page#)\n        Span(/,mh)\n        Span(Class: text-muted, Body: Block: #block#)\n    }\n    Include(Name:#block#)\n}.Else{\n    DBFind(@1buffer_data).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\n    If(#Single#==binaries){\n        Data(tables, \"Table,Page,Name\"){\n            @1binaries,@1app_upload_binary,\"Binaries data\"\n        }\n    }.ElseIf(#Single#==languages){\n        Data(tables, \"Table,Cols,Page,Name\"){\n            @1languages,\"id,name,res\",@1langres_add,\"Languages resources\"\n        }\n    }.Else{\n        Data(tables, \"Table,Cols,Page,Name\"){\n            @1contracts,\"id,app_id,name,active\",editor,\"Contracts\"\n            @1pages,\"id,app_id,name\",editor,\"Pages\"\n            @1blocks,\"id,app_id,name\",editor,\"Blocks\"\n            @1tables,\"id,app_id,name\",@1table_create,\"Tables\"\n            @1app_params,\"id,app_id,name,value\",@1app_params_edit,\"Application parameters\"\n        }\n    }\n    SetVar(active_btn,\"btn btn-info\").(create_icon,fa fa-plus-square).(cols,3)\n    If(GetVar(appid)!=\"\"){\n        SetVar(where,\"{app_id:#appid#,ecosystem:#ecosystem_id#}\")\n    }.Else{\n        If(#buffer_value_app_id#>0){\n\t\t\tDBFind(@1applications).Where({id:#buffer_value_app_id#,deleted:0,ecosystem:#ecosystem_id#}).Vars(check)\n\t\t\tIf(#check_id# > 0){\n            \tSetVar(appid,#buffer_value_app_id#).(where,\"{app_id:#appid#,ecosystem:#ecosystem_id#}\")\n\t\t\t}.Else{\n            \tSetVar(where,\"{id:{ $gt:0},ecosystem:#ecosystem_id#}\").(appid,1)\n        \t}\n        }.Else{\n            SetVar(where,\"{id:{ $gt:0},ecosystem:#ecosystem_id#}\").(appid,1)\n        }\n    }\n    If(#appid#==0){\n        SetVar(application_name,trash)\n    }.ElseIf(#appid#>0){\n        DBFind(@1applications).Where({id:#appid#,ecosystem:#ecosystem_id#}).Vars(application)\n    }\n\tIf(And(#appid# == 1,#ecosystem_id# != 1)){\n\t\tSetTitle(Dashboard: Sellect application)\n\t}.Else{\n    \tSetTitle(Dashboard: #application_name#)\n\t}\n    Div(content-wrapper){\n        Div(panel panel-default){\n            If(GetVar(Single)){\n                Div(text-right){\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default btn-close fa fa-close)\n                }\n            }.Else{\n                Div(row){\n                    Div(col-sm-12 btn-group){\n                        ForList(src_apps){\n                            If(#src_apps_index#==1){\n                                If(#appid#==0){\n                                    LinkPage(Class: #active_btn# disabled, Body: Span(Class:fa fa-trash))\n                                }.Else{\n                                    LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=0\", Body: Span(Class:fa fa-trash))\n                                }\n                            }\n                            If(#appid#==#id#){\n                                LinkPage(Class: #active_btn# disabled, Body:\"#id#:#name#\")\n                            }.Else{\n                                LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=#id#\", Body:\"#id#:#name#\")\n                            }\n                        }\n                    }\n                }\n            }\n\n            Div(panel-body){\n\t\t\t\tIf(And(#appid# == 1,#ecosystem_id# != 1)){\n\t\t\t\t\tSpan(Class: text-muted,Body: To work with Dashboard, you need to select an application)\n\t\t\t\t}.Else{\n\t\t\t\t\tSetVar(limit,250)\n\t\t\t\t\tForList(tables){\n\t\t\t\t\t\tIf(#Table#==@1binaries){\n\t\t\t\t\t\t\tDBFind(#Table#, src_table).Limit(#limit#).Order({ id: -1 }).Where(#where#).Count(items_count).Custom(_name){\n\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"id=#id#,application_id=#appid#\"){#name#}\n\t\t\t\t\t\t\t}.Custom(_img){\n\t\t\t\t\t\t\t\tImage(Src: Binary().ById(#id#), Class: preview)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.ElseIf(#Table#==@1languages){\n\t\t\t\t\t\t\tDBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where({ecosystem:#ecosystem_id#}).Count(items_count)\n\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\tDBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where(#where#).Count(items_count)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(list-group-item clearfix){\n\t\t\t\t\t\t\tDiv(h3 pull-left mt-lg){\n\t\t\t\t\t\t\t\t#Name#\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tIf(#appid#>0){\n\t\t\t\t\t\t\t\tDiv(pull-right mt-lg){\n\t\t\t\t\t\t\t\t\tIf(#Table#==@1contracts){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"create=contract,appId=#appid#\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1pages){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"create=page,appId=#appid#\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1blocks){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"create=block,appId=#appid#\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1tables){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1app_params){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"application_id=#appid#,create=create\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1binaries){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.ElseIf(#Table#==@1languages){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#){\n\t\t\t\t\t\t\t\t\t\t\tEm(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(row pd){\n\t\t\t\t\t\t\t\tDiv(col-sm-12){\n\t\t\t\t\t\t\t\t\tIf(#Table#==@1binaries){\n\t\t\t\t\t\t\t\t\t\tIf(#items_count#>0){\n\t\t\t\t\t\t\t\t\t\t\tDiv(items){\n\t\t\t\t\t\t\t\t\t\t\t\tTable(src_table,\"=id,Edit link=_name,Download link=data,=_img\")\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tDiv(text-muted h4 text-center){\n\t\t\t\t\t\t\t\t\t\t\t\t#Name# not found\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\tSetVar(value,).(res,)\n\t\t\t\t\t\t\t\t\t\tIf(#items_count#>0){\n\t\t\t\t\t\t\t\t\t\t\tDiv(cols){\n\t\t\t\t\t\t\t\t\t\t\t\tForList(src_table){\n\t\t\t\t\t\t\t\t\t\t\t\t\tDiv(clearfix item){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1contracts){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#active#==1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSpan(actived,text-success mr-lg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1pages){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-eye, Page: #name#)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=page\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1blocks){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-eye, Page: #this_page#, PageParams:\"block=#name#\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=block\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1tables){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Class: text-muted fa fa-eye, Page: @1table_view, PageParams: \"tabl_id=#id#,table_name=#name#\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#changer_count#==1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#appid#==0){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn-link text-muted fa fa-recycle, Page: #this_page#, PageParams: \"Restore=1,Table=#Table#,Id=#id#\").Popup(30, \"Select restore target application\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#ecosystem_id#==1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"Confirm\", \"Cancel\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tButton(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"Confirm\", \"Cancel\")\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1contracts){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"open=contract,name=#name#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1pages){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"open=page,name=#name#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1blocks){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"open=block,name=#name#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1tables){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: @1table_edit, PageParams: \"tabl_id=#id#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1app_params){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #Page#, PageParams: \"id=#id#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(#Table#==@1languages){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLinkPage(Page: @1langres_edit, PageParams: \"lang_id=#id#\"){#name#}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIf(`#value#`!=\"\"){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:Div(text-muted){`#value#`}.Style(max-height:1.5em;overflow:hidden;)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}.ElseIf(`#res#`!=\"\"){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:Div(text-muted){`#res#`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\tDiv(text-muted h4 text-center){\n\t\t\t\t\t\t\t\t\t\t\t\t#Name# not found\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n\t\t\tIf(And(#appid# == 1,#ecosystem_id# != 1)){\n\t\t\t}.Else{\n\t\t\t\tDiv(panel-footer){\n\t\t\t\t\tIf(GetVar(Single)){\n\t\t\t\t\t\tButton(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default mr, Body: Back)\n\t\t\t\t\t}.Else{\n\t\t\t\t\t\tButton(Page: #this_page#, PageParams: \"Single=binaries,appid=#appid#\", Class: btn btn-default mr, Body: Binaries)\n\t\t\t\t\t\tButton(Page: #this_page#, PageParams: \"Single=languages,appid=#appid#\", Class: btn btn-default, Body: Languages)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n    }.Style(\n        .pull-right a {\n            margin-right:10px;\n        }\n        .text-muted {\n            color: #909fa7!important;\n        }\n        .cols {\n            -moz-column-count: #cols#;\n            -webkit-column-count: #cols#;\n            column-count: #cols#;\n        }\n        .item:hover {\n            background-color: #fafafa;\n        }\n        .items tr:hover {\n            background-color: #fafafa;\n        }\n        .preview {\n            height:30px;\n        }\n        .btn-close {\n            background-color: #00000000;\n        }\n    )\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Binary data\": #application_name#)\n\t\tAddToolButton(Title: \"Upload binary\", Page: @1app_upload_binary, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\n\n\t\tSetVar(pager_table, @1binaries).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_binary).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_binary)\n\t\tSetVar(hideLink, 0)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1binaries, src_binparameters).Limit(#pager_limit#).Count(cnt).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_name){\n\t\t\tLinkPage(Page: @1app_upload_binary, PageParams: \"id=#id#,application_id=#buffer_value_app_id#\", Body: #name#)\n\t\t}.Custom(_img){\n\t\t\tDiv(pull-right){\n\t\t\t\tImage(Src: Binary().ById(#id#), Class: preview).Style(height: 40px; widht 40px;)\n\t\t\t}\n\t\t}\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\tIf(#cnt#>0){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-12){\n\t\t\t\t\t\t\t\t\t\tTable(src_binparameters,\"Name=_name,Download link=data,=_img\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Binary data\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_blocks",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Blocks\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, @1blocks).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_blocks).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_blocks)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_blocks){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=block\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=block\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Blocks\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_contracts",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Contracts\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, @1contracts).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_contracts).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_contracts)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_contracts){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=contract\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n\t\t\t\t\t\t\t\t\t\t\tIf(#active#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Contracts\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Applications\")\n    Div(breadcrumb){\n\t\tLinkPage(\"Applications\", @1apps_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t\t}.Else{\n\t\t\tSpan(Class: text-muted, Body: \"New\")\n\t\t}\n    }\n\t\n\tForm(){\n\t\tIf(#id# > 0){\n\t\t\tDBFind(@1applications, src_apps).Columns(\"id,name,conditions,deleted\").Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name, Disabled: \"true\", Value: #application_name#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #application_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(text-left col-md-6){\n\t\t\t\t\t\tIf(#application_deleted# == 0){\n\t\t\t\t\t\t\tButton(Body: \"Delete\", Class: btn btn-danger, Page: @1apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#application_id#,Value=1\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(text-right col-md-6){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1apps_list, Contract: @1EditApplication, Params: \"ApplicationId=#id#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.Else{\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(text-right){\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1apps_list, Contract: @1NewApplication)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_langres",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(application)\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Language resources\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: @1langres_add, Icon: icon-plus)\n\n\t\tSetVar(pager_table, @1languages).(pager_where, \"{ecosystem:#ecosystem_id#}\").(pager_page, @1app_langres).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_langres)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1languages, src_languages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({ecosystem:#ecosystem_id#})\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_languages){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item clearfix){\n\t\t\t\t\t\t\t\t#name#\n\t\t\t\t\t\t\t\tLinkPage(Class:fa fa-edit pull-right, Page: @1langres_edit, PageParams: \"lang_id=#id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Language resources\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_pages",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Pages\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, @1pages).(pager_where, {app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).(pager_page, @1app_pages).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_pages)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_pages){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=page\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=page\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Pages\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(@1applications, src_app).Where({id:#buffer_value_app_id#},ecosystem:#ecosystem_id#).Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Application parameters\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: @1app_params_edit, Icon: icon-plus, PageParams: \"application_id=#application_id#,create=create\")\n\n\t\tSetVar(pager_table, @1app_params).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_params).(pager_limit, 50)\n\t\tInclude(@1pager_header)\n\n\t\tSetVar(admin_page, @1app_params)\n\t\tInclude(@1admin_link)\n\n\t\tDBFind(@1app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_appparameters){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8 text-right){\n\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1app_params_edit, PageParams: \"id=#id#\"))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(@1pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Application parameters\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(back_page)){}.Else{\n    SetVar(back_page, @1app_params)\n}\nDiv(content-wrapper){\n    If(#create# == create){\n        SetVar(param_name, \"New\")\n    }.Else{\n\t\tDBFind(@1app_params, src_params).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"param\")\n    }\n\t\n\tSetTitle(\"Application parameter\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Application parameters\", @1app_params)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: #param_name#)\n\t}\n\n    Form(){\n        Div(form-group){\n            Label(\"Name\")\n            If(#create# == create){\n                Input(Name: name)\n            }.Else{\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\n            }\n        }\n        Div(form-group){\n            If(#create# == create){\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\n            }.Else{\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n            }\n        }\n        Div(form-group){\n            Label(\"Change conditions\")\n            If(#create# == create){\n                Input(Name: conditions)\n            }.Else{\n                Input(Name: conditions, Value: #param_conditions#)\n            }\n        }\n        Div(form-group text-right){\n            If(#create# == create){\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#application_id#\", Page: #back_page#)\n            }.Else{\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: #back_page#)\n            }\n        }\n    }\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_tables",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\n\n    Div(content-wrapper){\n        SetTitle(\"Tables\": #application_name#)\n        AddToolButton(Title: \"Create\", Page: @1table_create, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\n\n        SetVar(pager_table, @1tables).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_tables).(pager_limit, 50)\n        Include(@1pager_header)\n\n        SetVar(admin_page, @1app_tables)\n        Include(@1admin_link)\n\n        DBFind(@1tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_tables){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: @1table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"tabl_id=#id#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1table_edit, PageParams: \"tabl_id=#id#\"))\n                                        }\n                                        Div(pull-right){\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(@1pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_upload_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Binary data\")\n    Div(breadcrumb){\n        LinkPage(\"Binary data\", @1app_binary)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t\tDBFind(@1binaries).Columns(name).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(binary)\n\t\t}.Else{\n\t\t\tSpan(\"Upload\", text-muted)\n\t\t}\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"Name\")\n\t\t\t}\n\t\t\tIf(#id# > 0){\n\t\t\t\tInput(Name: name, Disabled: disabled, Value: #binary_name#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"File\")\n\t\t\t}\n\t\t\tInput(Name: databin, Type: file)\n\t\t}\n\t\tDiv(form-group text-right){\n\t\t\tButton(Body: \"Upload\", Contract: @1UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),ApplicationId=#application_id#,Data=Val(databin),MemberID=#key_id#\", Page: @1app_binary)\n\t\t}\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "apps_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    If(#deleted# == deleted){\n        SetTitle(\"Inactive applications\")\n        Div(breadcrumb){\n            LinkPage(\"Applications\", @1apps_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: \"Inactive applications\")\n        }\n        DBFind(@1applications, src_applications).Where({deleted:1,ecosystem:#ecosystem_id#}).Order(\"id\").Count(countvar).Custom(_actions){\n            Button(Class: btn btn-link, Page: @1apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#id#\", Body: \"Restore\")\n        }\n        If(#countvar# > 0) {\n            Table(Source: src_applications, Columns: \"Name=name,Conditions=conditions,=_actions\")\n        }.Else{\n            Div(content-wrapper){\n                Span(Class: text-muted, Body: \"You don't have any inactive applications\")\n            }\n        }\n    }.Else{\n        SetTitle(\"Applications\")\n        Div(breadcrumb){\n            Span(Class: text-muted, Body: \"This section is used to select installed applications\")\n        }\n\t\tAddToolButton(Title: \"Import\", Page: @1import_upload, Icon: icon-cloud-upload)\n        AddToolButton(Title: \"Inactive apps\", Page: @1apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\n        AddToolButton(Title: \"Create\", Page: @1app_edit, Icon: icon-plus)\n\n        DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\n        DBFind(@1applications, src_applications).Where({deleted:0,ecosystem:#ecosystem_id#}).Order(\"id\").Custom(_export){\n            Button(Class: btn btn-link, Contract: @1ExportNewApp, Params: \"ApplicationId=#id#\", Page: @1export_resources, Body: \"Export\")\n        }.Custom(custom_name){\n            If(#id#==#buffer_value_app_id#){\n                Button(Class: btn btn-link, Page: @1app_contracts, Body: #name#)\n            }.Else{\n                Button(Class: btn btn-link, Contract: @1SelectApp, Params: \"ApplicationId=#id#\", Page: @1app_contracts, Body: #name#)\n            }  \n        }.Custom(custom_actions){\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: @1app_edit, PageParams: \"id=#id#\")\n        }\n\n        Table(Source: src_applications, Columns: \"Name=custom_name,Conditions=conditions,Export=_export,=custom_actions\")\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        text-align:right;\n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", @1app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", @1table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Add column\", text-muted)\n\t\t}\n\t}\n\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Column\")\n\t\t\t\tInput(Name: ColumnName)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tData(src_type,\"type,name\"){\n\t\t\t\t\ttext,\"Text\"\n\t\t\t\t\tnumber,\"Number\"\n\t\t\t\t\tvarchar,\"Varchar\"\n\t\t\t\t\tdatetime,\"Date/Time\"\n\t\t\t\t\tmoney,\"Money\"\n\t\t\t\t\tdouble,\"Double\"\n\t\t\t\t\tcharacter,\"Character\"\n\t\t\t\t\tjson,\"JSON\"\n\t\t\t\t}\n\t\t\t\tLabel(\"Type\")\n\t\t\t\tSelect(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type, Value:\"text\")\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Update\")\n\t\t\t\tInput(Name: UpdateColumn, Value: \"true\")\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Read\")\n\t\t\t\tInput(Name: ReadColumn, Value: \"true\")\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix text-right){\n\t\t\tButton(Body: \"Add column\", Contract: @1NewColumn, Class: btn btn-primary, Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\n\t\t}\n\t}\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Edit column\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", @1app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", @1table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit column\", text-muted)\n\t\t}\n\t}\n\n\tDBFind(@1tables, src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).Where({id:#tabl_id#,ecosystem:#ecosystem_id#})\n\tJsonToSource(src_columns, #pre_columns#)\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tForList(src_columns){\n\t\t\t\tIf(#key# == #name_column#){\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Column\")\n\t\t\t\t\t\tInput(Name: ColumnName, Disabled: \"true\", Value: #name_column#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t\tSetVar(col_type, GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\tSetVar(input_type, \"Character\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\tSetVar(input_type, \"Text\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\tSetVar(input_type, \"Number\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\tSetVar(input_type, \"Money\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\tSetVar(input_type, \"Varchar\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\tSetVar(input_type, \"Date/Time\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\tSetVar(input_type, \"Double\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\tSetVar(input_type, \"JSON\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\tSetVar(input_type, \"Binary Data\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\tSetVar(input_type, \"UUID\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tInput(Name: Coltype, Disabled: \"true\", Value: #input_type#)\n\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Update\")\n\t\t\t\t\t\tInput(Name: UpdateColumn)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Read\")\n\t\t\t\t\t\tInput(Name: ReadColumn)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix text-right){\n\t\t\tButton(Body: \"Save\", Contract: @1EditColumn, Class: btn btn-primary, Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\n\t\t}\n\t}\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#ecosystem_id#==1){\n\tSetTitle(\"\")\n}.Else{\n\tDiv(content-wrapper){\n\t\tDiv(panel panel-primary){\n\t\t\tDiv(list-group-item text-center){\n\t\t\t\tP(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\n\t\t\t}\n\t\t\tDiv(list-group-item){\n\t\t\t\tSpan(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem – creating and editing applications, modifying ecosystem parameters, etc. \")\n\t\t\t\tSpan(Class: h3, Body: \"To get started, you can download the finished applications from the\")\n\t\t\t\tSpan(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\n\t\t\t\tSpan(Class: h3, Body: \"and install them using the Import service. \")\n\t\t\t\tSpan(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\n\t\t\t\tSpan(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\n\t\t\t\tSpan(Class: h3, Body: \"Documentation \")\n\t\t\t\tSpan(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\n\t\t\t}\n\t\t\tDiv(panel-footer text-right clearfix){\n\t\t\t\tDiv(pull-left){\n\t\t\t\t\tButton(Body: Ecosystem parameters, Class: btn btn-default, Page: @1params_list)\n\t\t\t\t}.Style(margin-right: 20px;)\n\t\t\t\tDiv(pull-left){\n\t\t\t\t\tButton(Body: Dashboard, Class: btn btn-default, Page: @1admin_index)\n\t\t\t\t}\n\t\t\t\tButton(Body: Import, Class: btn btn-primary, Page: @1import_upload)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "export_download",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Export\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\n    }\n\n    DBFind(Name: @1buffer_data, Source: src_buffer).Columns(\"value->app_name,value->app_id\").Where({key: export,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\n    DBFind(@1binaries, src_binaries).Where({name: export, member_id:#key_id#,ecosystem:#ecosystem_id#,app_id:#buffer_value_app_id#}).Custom(app_name){\n        Span(#buffer_value_app_name#)\n    }\n\n    Table(Source: src_binaries, \"Application=app_name,=data\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n        }\n        tr > *:last-child {\n            padding-right:20px;\n            text-align:right;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "export_resources",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetVar(pager_limit, 25).(pager_page, @1export_resources)\n    If(GetVar(res_type)){\n\t\tSetVar(page_params,`{\"res_type\":\"#res_type#\"}`)\n\t}.Else{\n\t\tSetVar(res_type,)\n        JsonToSource(src_params, #page_params#)\n        ForList(src_params){\n\t\t\tIf(#key#==res_type){\n\t\t\t\tSetVar(res_type,#value#)\n\t\t\t}\n\t\t}\n    }\n    SetTitle(\"Application Export\")\n    Div(breadcrumb text-muted){\n        Select the application which do you want to export and proceed to the payload generation process\n    }\n    DBFind(@1buffer_data).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\n\n    Include(@1export_link)\n\n    If(#buffer_value_app_id# > 0){\n        If(#res_type#==\"pages\"){\n            SetVar(pager_table, @1pages).(pager_where, \"{app_id:#buffer_value_app_id#}\")\n            Include(@1pager_header)\n            DBFind(@1pages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"blocks\"){\n            SetVar(pager_table, @1blocks).(pager_where, \"{app_id:#buffer_value_app_id#}\")\n            Include(@1pager_header)\n            DBFind(@1blocks, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"menu\"){\n            SetVar(pager_table, @1menu).(pager_where, \"{id: {$in: [#buffer_value_menu_id#]}}\")\n            Include(@1pager_header)\n            DBFind(@1menu, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({id: {$in: [#buffer_value_menu_id#]},ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"parameters\"){\n            SetVar(pager_table, @1app_params).(pager_where, \"{app_id:#buffer_value_app_id#}\")\n            Include(@1pager_header)\n            DBFind(@1app_params, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"languages\"){\n            SetVar(pager_table, @1languages)\n            Include(@1pager_header)\n            DBFind(@1languages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"contracts\"){\n            SetVar(pager_table, @1contracts).(pager_where, \"{app_id:#buffer_value_app_id#}\")\n            Include(@1pager_header)\n            DBFind(@1contracts, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"tables\"){\n            SetVar(pager_table, @1tables).(pager_where, \"{app_id:#buffer_value_app_id#}\")\n            Include(@1pager_header)\n            DBFind(@1tables, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n    }\n\n    Div(row){\n        Div(col-md-9){\n            Table(src_pages, \"ID=id,Name=name,=_cbox\")\n            If(#pages_count#>#pager_limit#){\n                Include(@1pager)\n            }\n        }\n        Div(col-md-3){\n            Include(@1export_info)\n        }\n    }\n\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n        padding: 8px 20px !important;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        width: 50px;\n        text-align:right;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "history",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\n    If(GetVar(type) == page){\n        DBFind(@1pages, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\n        SetTitle(\"Page history\": #res_name#)\n    }\n    If(GetVar(type) == block){\n        DBFind(@1blocks, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\n        SetTitle(\"Block history\": #res_name#)\n    }\n    If(GetVar(type) == contract){\n        DBFind(@1contracts, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\n        SetTitle(\"Contract history\": #res_name#)\n    }\n    If(GetVar(type) == menu){\n        DBFind(@1menu, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\n        SetTitle(\"Menu history\": #res_name#)\n    }\n\n\n\n    SetVar(admin_page, page_history)\n    If(#sort#==1){\n        SetVar(sort_name, \"id asc\")\n    }.ElseIf(#sort#==2){\n        SetVar(sort_name, \"id desc\")\n    }.ElseIf(#sort#==3){\n        SetVar(sort_name, \"name asc\")\n    }.ElseIf(#sort#==4){\n        SetVar(sort_name, \"name desc\")\n    }.Else{\n        SetVar(sort, \"1\")\n        SetVar(sort_name, \"id asc\")\n    }\n\n    If(GetVar(type) == page){\n        GetHistory(Source: src_history, Name:pages, Id: #id#)\n    }\n    If(GetVar(type) == block){\n        GetHistory(Source: src_history, Name: blocks, Id: #id#)\n    }\n    If(GetVar(type) == contract){\n        GetHistory(Source: src_history, Name: contracts, Id: #id#)\n    }\n    If(GetVar(type) == menu){\n        GetHistory(Source: src_history, Name: menu, Id: #id#)\n    }\n\n\n    If(Or(#width#==12,#width#==6,#width#==4)){\n    }.Else{\n        SetVar(width, \"12\")\n    }\n\n    Form(){\n        Div(clearfix){\n            Div(pull-right){\n                If(#width#==12){\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n                If(#width#==6){\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n                If(#width#==4){\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n            }\n        }\n    }\n\n\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                ForList(Source: src_history){\n                    Div(col-md-#width# col-sm-12){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-1){\n                                    Span(Class: h5, Body: \"#src_history_index#\")\n                                }\n                                Div(col-md-3){\n                                    Span(Class: h5, Body: \"#name#\")\n                                }\n                                Div(col-md-4){\n                                    Span(Class: h5, Body: \"#conditions#\")\n                                }\n                                Div(col-md-4){\n                                    Div(pull-right){\n                                        Button(Body: Em(Class: fa fa-recycle), Class: btn btn-primary, Page: @1history, PageParams: \"width=#width#,id=#id#,type=#type#\", Contract: @1Restore, Params: \"Id=#id#,IdHistory=#src_history_index#,Type=#type#\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_app",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1buffer_data).Columns(\"id,value->name,value->data\").Where({key:import, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(import)\n    DBFind(@1buffer_data).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(info)\n\n    SetTitle(\"Import - #info_value_app_name#\")\n    Data(data_info, \"DataName,DataCount,DataInfo\"){\n        Pages,\"#info_value_pages_count#\",\"#info_value_pages#\"\n        Blocks,\"#info_value_blocks_count#\",\"#info_value_blocks#\"\n        Menu,\"#info_value_menu_count#\",\"#info_value_menu#\"\n        Parameters,\"#info_value_parameters_count#\",\"#info_value_parameters#\"\n        Language resources,\"#info_value_languages_count#\",\"#info_value_languages#\"\n        Contracts,\"#info_value_contracts_count#\",\"#info_value_contracts#\"\n        Tables,\"#info_value_tables_count#\",\"#info_value_tables#\"\n    }\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Your data that you can import\")\n    }\n\n    Div(panel panel-primary){\n        ForList(data_info){\n            Div(list-group-item){\n                Div(row){\n                    Div(col-md-10 mc-sm text-left){\n                        Span(Class: text-bold, Body: \"#DataName#\")\n                    }\n                    Div(col-md-2 mc-sm text-right){\n                        If(#DataCount# > 0){\n                            Span(Class: text-bold, Body: \"(#DataCount#)\")\n                        }.Else{\n                            Span(Class: text-muted, Body: \"(0)\")\n                        }\n                    }\n                }\n                Div(row){\n                    Div(col-md-12 mc-sm text-left){\n                        If(#DataCount# > 0){\n                            Span(Class: h6, Body: \"#DataInfo#\")\n                        }.Else{\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\n                        }\n                    }\n                }\n            }\n        }\n        If(#import_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary, Page: @1apps_list).CompositeContract(@1Import, \"#import_value_data#\")\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_upload",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Import\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\n    }\n    If(#ecosystem_id#>1){\n        AddToolButton(Title: \"Install platform apps\", Page: @1platform_apps, Icon: icon-cloud-upload)\n    }\n\n    Form(panel panel-primary){\n        Div(list-group-item){\n            Input(Name: input_file, Type: file)\n        }\n        Div(list-group-item text-right){\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: @1import_app)\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(name)){}.Else{\n    SetVar(name,)\n}\nDiv(content-wrapper){\n    SetTitle(\"Language resources\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Language resources\", @1app_langres)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: \"Create\")\n    }\n\n    Form(panel panel-default){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Label(\"Name\")\n                    Input(Name:Name, Value:#name#)\n                }\n            }\n            Div(row text-muted){\n                Div(col-md-1 mt-lg){\n                    Label(){Locale}\n                }\n                Div(col-md-10 mt-lg){\n                    Label(){Value}\n                }\n                Div(col-md-1 mt-lg){\n                    Label(){Action}\n                }\n            }\n            If(GetVar(cs)==\"\"){\n                SetVar(cs,0)\n            }\n            If(#del# == 1){\n                SetVar(cs,Calculate(#cs# - 1))\n            }.Else{\n                SetVar(cs,Calculate(#cs# + 1))\n            }\n            Range(params_range, 0, #cs#)\n            ForList(Source: params_range){\n                Div(row mt-sm){\n                    Div(col-md-1){\n                        Input(Name:LocaleArr)\n                    }.Style(input {padding: 6px;text-align:center;})\n                    Div(col-md-10){\n                        Input(Name:ValueArr)\n                    }\n                    Div(col-md-1){\n                        If(And(#cs#==#params_range_index#,#cs#>1)){\n                            Button(Class:fa fa-trash btn btn-default, PageParams: \"cs=#cs#,del=1\", Page: @1langres_add)\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    LinkPage(Body: \"Add localization\", Page: @1langres_add, PageParams:\"cs=#cs#\")\n                }\n            }\n        }\n        Div(panel-footer text-right){\n            Button(Body: \"Save\", Class: btn btn-primary, Contract: @1NewLangJoint, Page: @1app_langres)\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Language resources\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Language resources\", @1app_langres)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t}\n\t\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDBFind(@1languages, src_leng).Vars(pre).Where({id:#lang_id#,ecosystem:#ecosystem_id#})\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12){\n\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\tInput(Name: LangName, Disabled: \"true\", Value: #pre_name#)\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Locale\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-10 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Value\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tJsonToSource(pv, #pre_res#)\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tSetVar(max_sec, #s_ind#)\n\t\t\t}\n\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\tSetVar(cs, #max_sec#)\n\t\t\t}\n\t\t\tIf(Or(#del_flag#==1,#del_data#>0)){\n\t\t\t\tSetVar(cs, Calculate(Exp:#cs#-1, Type: int))\n\t\t\t}\n\t\t\t\n\t\t\tSetVar(next_sec, Calculate(Exp:#cs#+1, Type: int))\n\t\t\tSetVar(data_sec, Calculate(Exp:#cs#-#max_sec#, Type: int))\n\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tIf(#s_ind#>#cs#){\n\t\t\t\t}.Else{\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tInput(Name: LocaleArr, Value: `#key#`)\n\t\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\n\t\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\t\tInput(Name: ValueArr, Value: `#value#`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#s_ind#>1,#s_ind#==#cs#)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_data=#s_ind#\", Page: @1langres_edit)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tRange(params_range, #max_sec#, #cs#)\n\t\t\tForList(Source: params_range, Index:s_ind){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tInput(Name:LocaleArr)\n\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\n\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\tInput(Name:ValueArr)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tIf(#s_ind#==#data_sec#){\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_flag=1\", Page: @1langres_edit)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t        LinkPage(Body: \"Add localization\", Page: @1langres_edit, PageParams: \"lang_id=#lang_id#,cs=#next_sec#\")\n                }\n            }\n\t\t}\n\t\tDiv(panel-footer text-right){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditLangJoint, Params: \"Id=#lang_id#\", Page: @1app_langres)\n\t\t}\n\t}\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "menus_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Menu\")\n    AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menus\")\n\t}\n\n    DBFind(@1menu, src_menus).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"id\").Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\n    }\n\n    Table(src_menus, \"Name=name,Title=title,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tIf(#stylesheet# == stylesheet){\n\t\tDBFind(@1parameters, src_params).Where({name: #stylesheet#,ecosystem:#ecosystem_id#}).Vars(\"param\")\n\t}.Else{\n\t\tIf(#id#>0){\n\t\t\tDBFind(@1parameters, src_params).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"param\")\n\t\t}.Else{\n\t\t\tSetVar(param_name, \"New\")\n\t\t}\n\t}\n\n\tSetTitle(\"Ecosystem parameters\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Ecosystem parameters\", @1params_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #param_name#)\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: name, Value: #param_name#, Disabled: \"true\")\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n\t\t\t}.Else{\n\t\t\t\tInput(Type: textarea, Name: value).Style(height: 500px !important;)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Change conditions\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: conditions, Value: #param_conditions#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: conditions)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group text-right){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\", Page: @1params_list)\n\t\t\t}.Else{\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\", Page: @1params_list)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Ecosystem parameters\")\n    AddToolButton(Title: \"Manage stylesheet\", Page: @1params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\n    AddToolButton(Title: \"Create\", Page: @1params_edit, Icon: icon-plus)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\n    }\n\n    DBFind(@1parameters, src_appparameters).Where({ecosystem:#ecosystem_id#}).Order(\"id\").Custom(custom_actions){\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1params_edit, PageParams: \"id=#id#\")\n    }\n\n    Table(src_appparameters, \"Name=name,Value=value,Conditions=conditions,=custom_actions\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n        }\n        tr > *:last-child {\n            padding-right:30px;\n            text-align:right;\n            width: 100px;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "platform_apps",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Platform applications\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"This section is used to install the platform applications\")\n    }\n\n    Data(src_applications, \"id,name\"){\n        1,System\n        2,Basic application\n    }.Custom(_actions){\n        Button(Class: btn btn-link, Page: @1platform_apps, Contract: @1PlatformAppsInstall, Params: \"Name=#name#\", Body: \"Install\")\n    }\n\n    Table(Source: src_applications, Columns: \"ID=id,Name=name,=_actions\")\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        text-align:right;\n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "properties_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle(\"Edit properties\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tIf(#type# == page){\n\t\t\t\tLinkPage(\"Pages\", @1app_pages)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit page\", text-muted)\n\t\t\t\tDBFind(Name: @1pages, Source: src_page).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\n\t\t\t\tDBFind(@1menu, src_menus).Where({\"ecosystem\":#ecosystem_id#})\n\t\t\t}\n\t\t\tIf(#type# == contract){\n\t\t\t\tDBFind(Name: @1contracts, Source: src_contract).Columns(\"id,name,value,wallet_id,token_id,active,conditions,app_id,confirmation,confirmation->title,confirmation->params\").Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\n\t\t\t\tIf(#sig# == 1){\n\t\t\t\t\tLinkPage(\"Contracts\", @1app_contracts)\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\t\n\t\t\t\t\tLinkPage(Title: \"Edit contract\", Page: @1properties_edit, PageParams:\"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\t\tSpan(\"Signature\", text-muted)\n\t\t\t\t}.Else{\n\t\t\t\t\tAddToolButton(Title: \"Signature\", Page: @1properties_edit, Icon: icon-plus, PageParams: \"edit_property_id=#edit_property_id#,type=#type#,sig=1\")\n\t\t\t\t\tLinkPage(\"Contracts\", @1app_contracts)\n\t\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\t\tSpan(\"Edit contract\", text-muted)\n\t\t\t\t}\n\t\t\t}\n            If(#type# == block){\n\t\t\t\tLinkPage(\"Blocks\", @1app_blocks)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit block\", text-muted)\n\t\t\t\tDBFind(Name: @1blocks, Source: src_block).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\n\t\t\t}\n\t\t\tIf(#type# == menu){\n\t\t\t\tLinkPage(\"Menu\", @1menus_list)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit menu\", text-muted)\n\t\t\t\tDBFind(Name: @1menu, Source: src_menu).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\n\t\t\t}\n\t\t}\n\t}\n    Form(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tInput(Name: Name, Value: #item_name#, Disabled: \"true\")\n\t\t}\n\t\tIf(#type# == page){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu\")\n\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group text-right){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1app_pages, Contract: @1EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == contract){\n\t\t\tIf(#sig# == 1){\n\t\t\t\tDiv(form-group){\n\t\t\t\t\tIf(#item_confirmation#){\n\t\t\t\t\t\tLabel(\"Title of confirmation\")\n\t\t\t\t\t\tInput(Name: Title, Value: #item_confirmation_title#)\n\t\t\t\t\t}.Else{\n\t\t\t\t\t\tLabel(\"Title of confirmation\")\n\t\t\t\t\t\tInput(Name: Title, Placeholder: \"Title\")\n\t\t\t\t\t}\n            \t}\n\t\t\t\tIf(And(#item_confirmation#,#item_confirmation# !=\"{}\")){\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Parameters\")\n\t\t\t\t\t\tInput(Name: Parameter, Value: #item_confirmation_params#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary pull-right, Contract: @1EditSignJoint, Page: @1properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\",Params: \"Id=#item_id#\")\n\t\t\t\t\t\t\tButton(Body: \"Delete confirmation\", Class: btn btn-danger pull-left, Contract: @1NewSign, Page: @1properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\",Params: \"Value={}\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}.Else{\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Parameter\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-7){\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Value\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1){\n\t\t\t\t\t\t\tLabel(Class: text-bold, Body: \"Action\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t\t\t}\n\t\t\t\t\tIf(#del# == 1){\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t\t\t}.Else{\n\t\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t\t\t}\n\t\t\t\t\tRange(params_range, 0, #cs#)\n\t\t\t\t\tForList(Source: params_range){\n\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\tDiv(col-md-4 mt-sm){\n\t\t\t\t\t\t\t\tInput(Name:ParamArr)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-7 mt-sm){\n\t\t\t\t\t\t\t\tInput(Name:ValueArr)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#,#cs#>1)){\n\t\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,edit_property_id=#edit_property_id#,type=#type#,sig=1\", Page: @1properties_edit)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t\t\t\t\tLinkPage(Body: \"Add parameter\", Page: @1properties_edit, PageParams:\"cs=#cs#,edit_property_id=#edit_property_id#,type=#type#,sig=1\")\n\t\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary pull-right, Contract: @1NewSignJoint, Page: @1properties_edit,PageParams:\"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.Else{\n\t\t\t\tDiv(form-group){\n\t\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t\t}\n\t\t\t\tDiv(form-group){\n\t\t\t\t\tLabel(\"Wallet\")\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-10){\n\t\t\t\t\t\t\tSetVar(address_item_wallet_id, Address(#item_wallet_id#))\n\t\t\t\t\t\t\tInput(Name: Wallet,Value: #address_item_wallet_id#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-2){\n\t\t\t\t\t\t\tIf(#item_active# == 0){\n\t\t\t\t\t\t\t\tButton(Body: \"Bind\", Class: btn btn-primary btn-block, Contract: @1ActivateContract, Params: \"Id=#edit_property_id#\", Page: @1app_contracts)\n\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\tButton(Body: \"Unbind\", Class: btn btn-primary btn-block, Contract: @1DeactivateContract, Params: \"Id=#edit_property_id#\", Page: @1properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDiv(form-group text-right){\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1app_contracts, Contract: @1EditContract, Params: \"Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tIf(#type# == block){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group text-right){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1app_blocks, Contract: @1EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == menu){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu title\")\n\t\t\t\tInput(Name: Title, Value: #item_title#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group text-right){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: @1menus_list, Contract: @1EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\n\t\t\t}\n\t\t}\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_access",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1sections).Where({ecosystem:#ecosystem_id#}).WhereId(#id#).Vars(section)\nDiv(content-wrapper){\n    SetTitle(\"Access Rights\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Sections\", @1section_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #section_title#)\n    }\n    Form(){\n        Div(form-group){\n            Label(\"Roles access\")\n            DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\").Order(id)\n            Div(input-group mb-sm){\n                Select(Name: access_rid, Source:src_roles, NameColumn:role_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Class: btn btn-primary fa fa-plus, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=Val(access_rid),operation=add\")\n                }\n            }\n            DBFind(@1sections).Where({ecosystem:#ecosystem_id#, id:#section_id#}).Columns(\"roles_access\").Vars(json)\n                If(#json_roles_access#==\"[]\"){\n                    Span(Body: \"This section is avaliable for everyone\", Class: m0 text-muted)\n                }.Else{\n                  DBFind(@1roles,src_roles_access).Where({ecosystem:#ecosystem_id#, id:{\"$in\":#json_roles_access#}}).Columns(\"id,role_name\")\n                    ForList(src_roles_access){\n                        If(#role_id#==1){\n                            Button(Class: btn btn-info mr-sm mb-sm, Page: @1section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\n                        }.Else{\n                            Button(Class: btn btn-default mr-sm mb-sm, Page: @1section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\n                        }\n                    }\n                }\n        }\n    }\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"New section\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Sections\", @1section_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"New section\")\n\t}\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Title\")\n\t\t\tInput(Name: title)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tData(src_status, \"name,value\",\n\t\t\t\tHidden section,0\n\t\t\t\tRegular section,1\n\t\t\t\tMain section,2\n\t\t\t)\n\t\t\tLabel(\"Status\")\n\t\t\tSelect(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\n\t\t\tSpan(Body: \"Section with \"\"Main section\"\" status must be only one\", Class: m0 text-muted)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Link\")\n\t\t\tInput(Name: urlname)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Main page\")\n\t\t\tInput(Name: page)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1NewSection, Page: @1section_list)\n\t\t}\n\t}\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1sections).Where({\"ecosystem\":#ecosystem_id#}).WhereId(#id#).Vars(section)\nDiv(content-wrapper){\n\tSetTitle(\"Edit section\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Sections\", @1section_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: #section_title#)\n\t}\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Title\")\n\t\t\tInput(Name: title, Value: #section_title#)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tData(src_status, \"name,value\",\n\t\t\t\tHidden section,0\n\t\t\t\tRegular section,1\n\t\t\t\tMain section,2\n\t\t\t)\n\t\t\tLabel(\"Status\")\n\t\t\tIf(#section_status#==2){\n\t\t\t\tInput(Name: placeholder,Value: \"Main section\", Disabled: \"true\")\n\t\t\t\tSpan(Body: \"Section with \"\"Main section\"\" status must be only one and can be only reassigned\", Class: m0 text-muted)\n\t\t\t}.Else{\n\t\t\t\tSelect(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Link\")\n\t\t\tInput(Name: urlname, Value: #section_urlname#)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Main page\")\n\t\t\tInput(Name: page, Value: #section_page#)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#section_status#==2){\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditSection, Page: @1section_list, Params: \"id=#section_id#, status=#section_status#\")\n\t\t\t}.Else{\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditSection, Page: @1section_list, Params: \"id=#section_id#\")\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n\tSetTitle(\"Sections\")\n\tAddToolButton(Title: \"Create\", Page: @1section_add, Icon: icon-plus)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the sections\")\n\t}\n\n\tDBFind(@1sections, src_sections).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"id\").Custom(custom_status){\n\t\tIf(#status# == 0){\n\t\t\tHidden section\n\t\t}\n\t\tIf(#status# == 1){\n\t\t\tRegular section\n\t\t}\n\t\tIf(#status# == 2){\n\t\t\tMain section\n\t\t}\n\t}.Custom(custom_order){\n\t\tButton(Body: Em(Class: fa fa-arrow-down), Class: btn btn-link, Page: @1section_list, Contract: @1SectionLevelDown, Params: \"id=#id#\")\n\t\tButton(Body: Em(Class: fa fa-arrow-up), Class: btn btn-link, Page: @1section_list, Contract: @1SectionLevelUp, Params: \"id=#id#\")\n\t}.Custom(custom_action){\n\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1section_access, PageParams: \"id=#id#\")).Style(margin-right: 20px;)\n\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1section_edit, PageParams: \"id=#id#\"))\n\t}\n    \n\tTable(src_sections, \"Name=name,Title=title,Link=urlname,Section page=page,Status=custom_status,=custom_order,=custom_action\").Style(\n\ttbody > tr:nth-of-type(odd) {\n\t\tbackground-color: #fafbfc; \n\t}\n\ttbody > tr > td {\n\t\tword-break: break-all;\n\t\tfont-weight: 400;\n\t\tfont-size: 13px;\n\t\tcolor: #666;\n\t\tborder-top: 1px solid #eee;\n\t\tvertical-align: middle;\n\t}\n\ttr  > *:first-child {\n\t\tpadding-left:20px;\n\t}\n\ttr  > *:last-child {\n\t\tpadding-right:30px;\n\t\ttext-align:right; \n\t\twidth: 100px;\n\t}\n\tthead {\n\t\tbackground-color: #eee;\n\t})\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_create",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Create table\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", @1app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Create\", text-muted)\n\t\t}\n\t}\n\n\tData(src_type,\"type,name\"){\n\t\ttext,\"Text\"\n\t\tnumber,\"Number\"\n\t\tvarchar,\"Varchar\"\n\t\tdatetime,\"Date/Time\"\n\t\tmoney,\"Money\"\n\t\tdouble,\"Double\"\n\t\tcharacter,\"Character\"\n\t\tjson,\"JSON\"\n\t}\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-12){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t\tInput(Name:Name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-4 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Columns\")\n\t\t\t\t\t\tInput(Name:disinp, Disabled: true, Value: id)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-7 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Type\")\n\t\t\t\t\t\tInput(Name: disinp, Disabled: true, Value: Number)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t\t}\n\t\t\t\tIf(#del# == 1){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t\t}.Else{\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t\t}\n\t\t\t\tRange(params_range, 0, #cs#)\n\t\t\t\tForList(Source: params_range){\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-4 mt-sm){\n\t\t\t\t\t\t\tInput(Name:ColumnsArr)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-7 mt-sm){\n\t\t\t\t\t\t\tSelect(Name: TypesArr, Source: src_type, NameColumn: name, ValueColumn: type)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#, #cs# > 1)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: @1table_create)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\tDiv(panel-footer text-right){\n\t\t\t\tButton(Body: \"Add column\", Class: btn btn-primary, Page: @1table_create, PageParams: \"cs=#cs#,application_id=#application_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading, Body: \"Write permissions\")\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Insert)\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Update)\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(New column)\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n                        Div(form-group){\n\t\t\t\t\t\t\tLabel(Read)\n\t\t\t\t\t\t\tInput(Name: ReadPerm, Value: \"true\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer  text-right){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewTableJoint, Page: @1app_tables, Params: \"ApplicationId=#application_id#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tDBFind(@1tables).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column,permissions->read\").Vars(pre).Where({id:#tabl_id#,ecosystem:#ecosystem_id#})\n\t\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", @1app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(#pre_name#, @1table_view,, \"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t}\n\t}\n\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-3 h4){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-5 h4){\n\t\t\t\t\t\tLabel(\"Conditions\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4 text-right){\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tJsonToSource(src_columns, #pre_columns#)\n\t\t\t\tForList(src_columns){\n\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\tDiv(col-md-3 h5){\n\t\t\t\t\t\t\t\tSpan(#key#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 h5){\n\t\t\t\t\t\t\t\tSetVar(col_type,GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\t\t\tSpan(\"Text\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\t\t\tSpan(\"Number\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\t\t\tSpan(\"Money\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\t\t\tSpan(\"Varchar\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\t\t\tSpan(\"Date/Time\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\t\t\tSpan(\"Double\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\t\t\tSpan(\"Character\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\t\t\tSpan(\"JSON\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\t\t\tSpan(\"Binary Data\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\t\t\tSpan(\"UUID\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-5 h5){\n\t\t\t\t\t\t\t\tSpan(`#value#`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 text-right){\n\t\t\t\t\t\t\t\tButton(Body: \"Edit\", Class: btn btn-primary, Page: @1column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer text-right){\n\t\t\t\tButton(Body: \"Add Column\", Class: btn btn-primary, Page: @1column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Write permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Insert\")\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Type: text, Value: #pre_permissions_insert#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Update\")\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Type: text, Value: #pre_permissions_update#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"New column\")\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Type: text, Value: #pre_permissions_new_column#)\n\t\t\t\t\t\t}\n                        Div(form-group){\n\t\t\t\t\t\t\tLabel(\"Read\")\n\t\t\t\t\t\t\tInput(Name: ReadPerm, Type: text, Value: #pre_permissions_read#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer text-right){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditTable, Page: @1app_tables, Params: \"Name=#pre_name#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Conditions for changing permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tInput(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1tables).Where({id:#tabl_id#,ecosystem:#ecosystem_id#}).Columns(\"id,name\").Vars(pre)\n\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        LinkPage(\"Tables\", @1app_tables)\n        Span(/,mh)\n        Span(#pre_name#, text-muted)\n        Span(/,mh)\n        LinkPage(Body:\"Edit\", Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\")\n    }\n\n    DBFind(#pre_name#).Count(count)\n    If(#page#>0){\n        SetVar(prev_page,Calculate(#page#-1)\n    }.Else{\n        SetVar(page,0).(prev_page,0)\n    }\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n    If(#count#>Calculate(#off#+#per_page#)){\n        SetVar(next_page,Calculate(#page#+1)\n    }\n    Div(button-group){\n        If(#page#>0){\n            Button(Body:\"1\", Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=0\")\n        }.Else{\n            Button(Body:\"1\", Class:btn btn-default disabled)\n        }\n        If(#page#>1){\n            Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#prev_page#\")\n        }\n        If(And(#page#>0,#page#<#last_page#)){\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n        }\n        If(#next_page#<#last_page#){\n            Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#next_page#\")\n        }\n        If(#page#<#last_page#){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#last_page#\")\n        }.ElseIf(#last_page#>0){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n        }\n    }\n    Div(panel panel-default){\n        Div(panel-body){\n            Div(table-responsive){\n                DBFind(#pre_name#, src_mem).Offset(#off#).Order(id)\n                Table(src_mem)\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ActivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ActivateContract {\n\tdata {\n\t\tId  int\n\t}\n\tconditions {\n\t\t$cur = DBFind(\"@1contracts\").Columns(\"id,conditions,active,wallet_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\n\t\tif !$cur {\n\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t}\n\t\tif Int($cur[\"active\"]) == 1 {\n\t\t\terror Sprintf(\"The contract %d has been already activated\", $Id)\n\t\t}\n\t\tEval($cur[\"conditions\"])\n\t\tif $key_id != Int($cur[\"wallet_id\"]) {\n\t\t\terror Sprintf(\"Wallet %d cannot activate the contract\", $key_id)\n\t\t}\n\t}\n\taction {\n\t\tDBUpdate(\"@1contracts\", $Id, {\"active\": 1})\n\t\tActivate($Id, $ecosystem_id)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendMenu {\n\tdata {\n\t\tId     int\n\t\tValue      string\n\t}\n\tconditions {\n\t\tConditionById(\"menu\", false)\n\t}\n\taction {\n\t\tvar row map\n\t\trow = DBFind(\"@1menu\").Columns(\"value\").Where({id: $Id, ecosystem: $ecosystem_id})Row()\n        var val string\n        val = row[\"value\"] + \"\\r\\n\" + $Value\n\t\tDBUpdate(\"@1menu\", $Id, {\"value\": val})\n\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendPage {\n\tdata {\n\t\tId         int\n\t\tValue      string\n\t}\n\tconditions {\n\t\tRowConditions(\"@1pages\", $Id, false)\n\t}\n\taction {\n\t\tvar value string\n\t\tvar row map\n\t\trow = DBFind(\"@1pages\").Columns(\"value\").Where({id: $Id, ecosystem: $ecosystem_id})Row()\n\t\tvalue = row[\"value\"]\n\t\tif Contains(value, \"PageEnd:\") {\n\t\t\tvalue = Replace(value, \"PageEnd:\", $Value) + \"\\r\\nPageEnd:\"\n\t\t} else {\n\t\t\tvalue = value + \"\\r\\n\" + $Value\n\t\t}\n\t\tDBUpdate(\"@1pages\", $Id, {\"value\":  value })\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "CallDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CallDelayedContract {\n\tdata {\n\t\tId int\n\t}\n\tconditions {\n\t\tvar rows array\n\t\trows = DBFind(\"@1delayed_contracts\").Where({id: $Id, deleted: \"false\"} )\n\n\t\tif !Len(rows) {\n\t\t\terror Sprintf(\"Delayed contract %d does not exist\", $Id)\n\t\t}\n\t\t$cur = rows[0]\n\n\t\tif $key_id != Int($cur[\"key_id\"]) {\n\t\t\terror \"Access denied\"\n\t\t}\n\n\t\tif $block < Int($cur[\"block_id\"]) {\n\t\t\terror Sprintf(\"Delayed contract %d must run on block %s, current block %d\", $Id, $cur[\"block_id\"], $block)\n\t\t}\n\t}\n\taction {\n\t\tvar limit, counter, block_id int\n\n\t\tlimit = Int($cur[\"limit\"])\n\t\tcounter = Int($cur[\"counter\"])+1\n\t\tblock_id = $block\n\n\t\tif limit == 0 || limit > counter {\n\t\t\tblock_id = block_id + Int($cur[\"every_block\"])\n\t\t}\n\t\tDBUpdate(\"@1delayed_contracts\", $Id, {\"counter\": counter, \"block_id\": block_id})\n\n\t\tvar params map\n\t\tCallContract($cur[\"contract\"], params)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "CheckNodesBan",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CheckNodesBan {\n\taction {\n\t\tUpdateNodesBan($block_time)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeactivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DeactivateContract {\n\tdata {\n\t\tId         int\n\t}\n\tconditions {\n\t\t$cur = DBFind(\"@1contracts\").Columns(\"id,conditions,active,wallet_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\n\t\tif !$cur {\n\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t}\n\t\tif Int($cur[\"active\"]) == 0 {\n\t\t\terror Sprintf(\"The contract %d has been already deactivated\", $Id)\n\t\t}\n\t\tEval($cur[\"conditions\"])\n\t\tif $key_id != Int($cur[\"wallet_id\"]) {\n\t\t\terror Sprintf(\"Wallet %d cannot deactivate the contract\", $key_id)\n\t\t}\n\t}\n\taction {\n\t\tDBUpdate(\"@1contracts\", $Id, {\"active\": 0})\n\t\tDeactivate($Id, $ecosystem_id)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\n\tdata {\n\t\tApplicationId int\n\t\tValue int \"optional\"\n\t}\n    \n\tconditions {\n    \n        if(!DBFind(\"@1applications\").Columns(\"id,ecosystem\").Where({id: $ApplicationId,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n\n\t\tif $Value < 0 || $Value > 1 {\n\t\t\terror \"Incorrect value\"\n\t\t}\n\t\tRowConditions(\"@1applications\", $ApplicationId, false)\n\t}\n    \n\taction {\n\t\tDBUpdate(\"@1applications\", $ApplicationId, {\"deleted\": $Value})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        if(!DBFind(\"@1app_params\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n\n        RowConditions(\"@1app_params\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars map\n        if $Value {\n            pars[\"value\"] = $Value\n        }\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if pars {\n            DBUpdate(\"@1app_params\", $Id, pars)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\n    data {\n        ApplicationId int\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && false\n    }\n\n    conditions {\n        if(!DBFind(\"@1applications\").Columns(\"id,ecosystem\").Where({id: $ApplicationId,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        \n        RowConditions(\"@1applications\", $ApplicationId, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars map\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if pars {\n            DBUpdate(\"@1applications\", $ApplicationId, pars)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlock {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        if(!DBFind(\"@1blocks\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        RowConditions(\"@1blocks\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars map\n        if $Value {\n            pars[\"value\"] = $Value\n        }\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if pars {\n            DBUpdate(\"@1blocks\", $Id, pars)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\n    data {\n        TableName string\n        Name string\n        UpdatePerm string\n        ReadPerm string\n    }\n\n    conditions {\n        if(!DBFind(\"@1tables\").Columns(\"name,ecosystem\").Where({name: $TableName,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        var permissions map\n        permissions[\"update\"] = $UpdatePerm\n        permissions[\"read\"] = $ReadPerm\n        $Permissions = permissions\n        ColumnCondition($TableName, $Name, \"\", JSONEncode($Permissions))\n    }\n\n    action {\n        PermColumn($TableName, $Name, JSONEncode($Permissions))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditContract {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n        WalletId string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$WalletId\n    }\n\n    conditions {\n        RowConditions(\"@1contracts\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n        $cur = DBFind(\"@1contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\n        if !$cur {\n            error Sprintf(\"Contract %d does not exist\", $Id)\n        }\n        if $Value {\n            ValidateEditContractNewValue($Value, $cur[\"value\"])\n        }\n        if $WalletId != \"\" {\n            $recipient = AddressToId($WalletId)\n            if $recipient == 0 {\n                error Sprintf(\"New contract owner %s is invalid\", $WalletId)\n            }\n            if Int($cur[\"active\"]) == 1 {\n                error \"Contract must be deactivated before wallet changing\"\n            }\n        } else {\n            $recipient = Int($cur[\"wallet_id\"])\n        }\n    }\n\n    action {\n        UpdateContract($Id, $Value, $Conditions, $WalletId, $recipient, $cur[\"active\"], $cur[\"token_id\"])\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditDelayedContract {\n\tdata {\n\t\tId int\n\t\tContract string\n\t\tEveryBlock int\n\t\tConditions string\n\t\tBlockID int \"optional\"\n\t\tLimit int \"optional\"\n\t\tDeleted int \"optional\"\n\t}\n\tconditions {\n\t\tConditionById(\"delayed_contracts\", true)\n\n\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t}\n\n\t\tif GetContractByName($Contract) == 0 {\n\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t}\n\n\t\tif $BlockID == 0 {\n\t\t\t$BlockID = $block + $EveryBlock\n\t\t}\n\n\t\tif $BlockID <= $block {\n\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t}\n\t}\n\taction {\n        DBUpdate(\"@1delayed_contracts\", $Id, {\"contract\": $Contract,\"key_id\": $key_id,\n          \"block_id\": $BlockID,\"every_block\": $EveryBlock,\n          \"counter\": 0,\"limit\": $Limit, \"deleted\": $Deleted,\"conditions\": $Conditions})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditEcosystemName",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditEcosystemName {\n\tdata {\n\t\tEcosystemID int\n\t\tNewName string\n\t}\n\tconditions {\n\t\tvar rows array\n\t\trows = DBFind(\"@1ecosystems\").Where({id: $EcosystemID})\n\t\tif !Len(rows) {\n\t\t\terror Sprintf(\"Ecosystem %d does not exist\", $EcosystemID)\n\t\t}\n\t}\n\taction {\n\t\tEditEcosysName($EcosystemID, $NewName)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\n    data {\n        Id int\n        Trans string\n    }\n\n    conditions {\n        EvalCondition(\"@1parameters\", \"changing_language\", \"value\")\n        $lang = DBFind(\"@1languages\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\n        if (!$lang){\n            warning(\"Access is denied\")\n        }\n    }\n\n    action {\n        EditLanguage($Id, $lang[\"name\"], $Trans)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLangJoint {\n    data {\n        Id int\n        ValueArr array\n        LocaleArr array\n    }\n\n    conditions {\n        var i int\n        while i < Len($LocaleArr) {\n            if Size($LocaleArr[i]) == 0 {\n                info(\"Locale is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var Trans map\n        while i < Len($LocaleArr) {\n            Trans[$LocaleArr[i]] = $ValueArr[i]\n            i = i + 1\n        }\n        var params map\n        params[\"Id\"] = $Id \n        params[\"Trans\"] = JSONEncode(Trans)\n        CallContract(\"EditLang\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditMenu {\n    data {\n        Id int\n        Value string \"optional\"\n        Title string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$Title\n    }\n\n    conditions {\n        if(!DBFind(\"@1menu\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        RowConditions(\"@1menu\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars map\n        if $Value {\n            pars[\"value\"] = $Value\n        }\n        if $Title {\n            pars[\"title\"] = $Title\n        }\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if pars {\n            DBUpdate(\"@1menu\", $Id, pars)\n        }            \n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditPage {\n    data {\n        Id int\n        Value string \"optional\"\n        Menu string \"optional\"\n        Conditions string \"optional\"\n        ValidateCount int \"optional\"\n        ValidateMode string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$Menu && !$ValidateCount \n    }\n    func preparePageValidateCount(count int) int {\n        var min, max int\n        min = Int(EcosysParam(\"min_page_validate_count\"))\n        max = Int(EcosysParam(\"max_page_validate_count\"))\n        if count < min {\n            count = min\n        } else {\n            if count > max {\n                count = max\n            }\n        }\n        return count\n    }\n\n    conditions {\n        if(!DBFind(\"@1pages\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        RowConditions(\"@1pages\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n        $ValidateCount = preparePageValidateCount($ValidateCount)\n    }\n\n    action {\n        var pars map\n        if $Value {\n            pars[\"value\"] = $Value\n        }\n        if $Menu {\n            pars[\"menu\"] = $Menu\n        }\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if $ValidateCount {\n            pars[\"validate_count\"] = $ValidateCount\n        }\n        if $ValidateMode {\n            if $ValidateMode != \"1\" {\n                $ValidateMode = \"0\"\n            }\n            pars[\"validate_mode\"] = $ValidateMode\n        }\n        if pars {\n            DBUpdate(\"@1pages\", $Id, pars)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        RowConditions(\"@1parameters\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n\t\t$Name = DBFind(\"@1parameters\").Where({id: $Id, ecosystem: $ecosystem_id}).One(\"name\")\n\t\tif $Name == \"founder_account\" {\n\t\t\tif !DBFind(\"@1members\").Where({id:$Value, ecosystem: $ecosystem_id}).One(\"id\") {\n\t\t\t\t warning Sprintf(\"User %v not found\", $Value)\n\t\t\t}\n\t\t}\n        if $Name == \"max_block_user_tx\" || $Name == \"money_digit\" || $Name == \"max_sum\" || $Name == \"min_page_validate_count\" || $Name == \"max_page_validate_count\" {\n\t\t\tif Size($Value) == 0 {\n\t\t\t\twarning \"Value was not received\"\n\t\t\t}\n            if Int($Value) <= 0 {\n\t\t\t\twarning \"Value must be greater than zero\"\n\t\t\t}\n        }\n    }\n\n    action {\n        var pars map\n        if $Value {\n            pars[\"value\"] = $Value\n        }\n        if $Conditions {\n            pars[\"conditions\"] = $Conditions\n        }\n        if pars {\n            DBUpdate(\"@1parameters\", $Id, pars)\n        }\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "EditSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSection {\n\tdata {\n\t\tid int\n\t\ttitle string\n\t\tstatus int\n\t\turlname string\n\t\tpage string\n\t}\n\n\tconditions {\n        if(!DBFind(\"@1sections\").Columns(\"id,ecosystem\").Where({id: $id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n\t\tif $status < 0 || $status > 2 {\n\t\t\twarning \"Status must be in range 0..2\"\n\t\t}\n\t\tif $status == 0 || $status == 1 {\n\t\t\tvar status_check map\n\t\t\tstatus_check = DBFind(\"@1sections\").Columns(\"id,status\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\n\t\t\tif (Int(JSONDecode(status_check[\"status\"]))==2) {\n\t\t\t\twarning \"Section with \"\"Main section\"\" status must be only one and can be only reassigned\"\n\t\t\t}\n\t\t}\n\t\tif !DBFind(\"@1sections\").Columns(\"id\").Where({id:$id,ecosystem:$ecosystem_id}) {\n\t\t\twarning Sprintf(\"Section with id '%v' not exists\", $id)\n\t\t}\n\t}\n\n\taction {\n\t\tif $status == 2 {\n\t\t\tvar status_check map\n\t\t\tvar curr_id int\n\t\t\tstatus_check = DBFind(\"@1sections\").Columns(\"id,status\").Where({\"status\":$status,ecosystem:$ecosystem_id}).Row()\n\t\t\tcurr_id = Int(JSONDecode(status_check[\"id\"]))\n\t\t\tDBUpdate(\"@1sections\", curr_id, {\"status\":1})\n\t\t}\n\t\tDBUpdate(\"@1sections\", $id, {\"title\":$title,\"status\":$status,\"urlname\":$urlname,\"page\":$page}) \n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditSign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSign {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && false\n    }\n\n    conditions {\n        if(!DBFind(\"@1contracts\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\n            warning(\"Access is denied\")\n        }\n        RowConditions(\"@1contracts\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n    action {\n        var pars map\n        if $Value {\n            pars[\"confirmation\"] = $Value\n        }\n        if pars {\n            DBUpdate(\"@1contracts\", $Id, pars)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditSignJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSignJoint {\n    data {\n        Id int\n        Title string\n        Parameter string\n    }\n\n    conditions {\n        if !$Title {\n            info(\"Title is empty\")\n        }\n        if !$Parameter {\n            info(\"Parameter is empty\")\n        }\n    }\n\n    action {\n        var Value map\n        Value[\"title\"] = $Title \n        Value[\"params\"] = $Parameter\n\n        var params map\n        params[\"Id\"] = $Id \n        params[\"Value\"] = JSONEncode(Value)\n        CallContract(\"EditSign\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\n    data {\n        Name string\n        InsertPerm string\n        UpdatePerm string\n        ReadPerm string\n        NewColumnPerm string\n    }\n\n    conditions {\n        if !$InsertPerm {\n            info(\"Insert condition is empty\")\n        }\n        if !$UpdatePerm {\n            info(\"Update condition is empty\")\n        }\n        if !$ReadPerm {\n            info(\"Read condition is empty\")\n        }\n        if !$NewColumnPerm {\n            info(\"New column condition is empty\")\n        }\n\n        var permissions map\n        permissions[\"insert\"] = $InsertPerm\n        permissions[\"update\"] = $UpdatePerm\n        permissions[\"read\"] = $ReadPerm\n        permissions[\"new_column\"] = $NewColumnPerm\n        $Permissions = permissions\n        TableConditions($Name, \"\", JSONEncode($Permissions))\n    }\n\n    action {\n        PermTable($Name, JSONEncode($Permissions))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "UploadBinary",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\n    data {\n        ApplicationId int\n        Name string\n        Data bytes \"file\"\n        DataMimeType string \"optional\"\n    }\n\n    conditions {\n        $Id = Int(DBFind(\"@1binaries\").Columns(\"id\").Where({app_id: $ApplicationId,\n            member_id: $key_id, name: $Name, ecosystem: $ecosystem_id}).One(\"id\"))\n\n        if $Id == 0 {\n            if $ApplicationId == 0 {\n                warning \"Application id cannot equal 0\"\n            }\n        }\n    }\n    action {\n        var hash string\n        hash = Hash($Data)\n\n        if $DataMimeType == \"\" {\n            $DataMimeType = \"application/octet-stream\"\n        }\n\n        if $Id != 0 {\n            DBUpdate(\"@1binaries\", $Id, {\"data\": $Data,\"hash\": hash,\"mime_type\": $DataMimeType})\n        } else {\n            $Id = DBInsert(\"@1binaries\", {\"app_id\": $ApplicationId,\"member_id\": $key_id,\n               \"name\": $Name,\"data\": $Data,\"hash\": hash, \"mime_type\": $DataMimeType, \"ecosystem\":$ecosystem_id})\n        }\n\n        $result = $Id\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "ExportNewApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExportNewApp {\n    data {\n        ApplicationId int\n    }\n\n    conditions {\n        $app_map = DBFind(\"@1applications\").Columns(\"id,name\").Where({id: $ApplicationId, ecosystem: $ecosystem_id}).Row()\n        if !$app_map{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n\n        //=====================================================================================================\n        //------------------------------------Menu search------------------------------------------------------\n        var i int\n        var pages_array array\n        var menu_name_array array\n        var menu_id_array array\n\n        i = 0\n        var pages_ret array\n        pages_ret = DBFind(\"@1pages\").Where({app_id: $ApplicationId, ecosystem: $ecosystem_id})\n        while i < Len(pages_ret) {\n            var page_map map\n            page_map = pages_ret[i]\n\n            pages_array = Append(pages_array, Sprintf(\"%v\", Str(page_map[\"menu\"])))\n            i = i + 1\n        }\n\n        if Len(pages_array) > 0 {\n            var where_for_menu map\n            where_for_menu[\"name\"] = {\"$in\" : pages_array}\n\n            i = 0\n            var menu_ret array\n            menu_ret = DBFind(\"@1menu\").Where(where_for_menu)\n            while i < Len(menu_ret) {\n                var menu_map map\n                menu_map = menu_ret[i]\n\n                menu_name_array = Append(menu_name_array, Str(menu_map[\"name\"]))\n                menu_id_array = Append(menu_id_array, Str(menu_map[\"id\"]))\n                i = i + 1\n            }\n        }\n\n        //=====================================================================================================\n        //------------------------------------Creating settings------------------------------------------------\n\n        var value map\n        value[\"app_id\"] = Str($ApplicationId)\n        value[\"app_name\"] = Str($app_map[\"name\"])\n\n        if Len(menu_name_array) > 0 {\n            value[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\n            value[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\n            value[\"count_menu\"] = Str(Len(menu_name_array))\n        } else {\n            value[\"menu_id\"] = \"0\"\n            value[\"menu_name\"] = \"\"\n            value[\"count_menu\"] = \"0\"\n        }\n\n        $buffer_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"export\", ecosystem: $ecosystem_id}).One(\"id\")\n        if !$buffer_id {\n            DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"export\", \"value\": value})\n        } else {\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": value})\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "Import",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\n    data {\n        Data string\n    }\n    func decodeGlobals(s string) string {\n        var globs array i lenGlobs int r map prefix from to string\n        prefix = \"import_\"\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\n        lenGlobs = Len(globs)\n        while i < lenGlobs{\n            r = globs[i]\n            from = ToUpper(\"#\" + prefix + r + \"#\")\n            to = \"#\" + r + \"#\"\n            s = Replace(s, from, to)\n            i = i + 1\n        }\n        return s\n    }\n\n    conditions {\n        $Data = decodeGlobals($Data)\n        $ApplicationId = 0\n        var app_map map\n        app_map = DBFind(\"@1buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\", member_id: $key_id, ecosystem: $ecosystem_id}).Row()\n\n        if app_map{\n            var app_id int ival string\n            ival = Str(app_map[\"value.app_name\"])\n            app_id = DBFind(\"@1applications\").Columns(\"id\").Where({name: ival, ecosystem: $ecosystem_id}).One(\"id\")\n            if app_id {\n                $ApplicationId = Int(app_id)\n            }\n        }\n    }\n\n    action {\n        var editors, creators map\n        editors[\"pages\"] = \"EditPage\"\n        editors[\"blocks\"] = \"EditBlock\"\n        editors[\"menu\"] = \"EditMenu\"\n        editors[\"app_params\"] = \"EditAppParam\"\n        editors[\"languages\"] = \"EditLang\"\n        editors[\"contracts\"] = \"EditContract\"\n        editors[\"tables\"] = \"\" // nothing\n\n        creators[\"pages\"] = \"NewPage\"\n        creators[\"blocks\"] = \"NewBlock\"\n        creators[\"menu\"] = \"NewMenu\"\n        creators[\"app_params\"] = \"NewAppParam\"\n        creators[\"languages\"] = \"NewLang\"\n        creators[\"contracts\"] = \"NewContract\"\n        creators[\"tables\"] = \"NewTable\"\n\n        var dataImport array\n        dataImport = JSONDecode($Data)\n        var i int\n        while i < Len(dataImport){\n            var item cdata map type name string\n            cdata = dataImport[i]\n            if cdata {\n                cdata[\"ApplicationId\"] = $ApplicationId\n                type = cdata[\"Type\"]\n                name = cdata[\"Name\"]\n                // Println(Sprintf(\"import %v: %v\", type, cdata[\"Name\"]))\n\n\t\t\t\tvar tbl string\n\t\t\t\ttbl = \"@1\" + Str(type)\n                item = DBFind(tbl).Where({name: name, ecosystem: $ecosystem_id}).Row()\n                var contractName string\n                if item {\n                    contractName = editors[type]\n                    cdata[\"Id\"] = Int(item[\"id\"])\n                    if type == \"contracts\" {\n                        if item[\"conditions\"] == \"false\"{\n                            // ignore updating impossibled\n                            contractName = \"\"\n                        }\n                    } elif type == \"menu\"{\n                        var menu menuItem string\n                        menu = Replace(item[\"value\"], \" \", \"\")\n                        menu = Replace(menu, \"\\n\", \"\")\n                        menu = Replace(menu, \"\\r\", \"\")\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\n                        if Contains(menu, menuItem) {\n                            // ignore repeated\n                            contractName = \"\"\n                        }else{\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\n                        }\n                    }\n                } else {\n                    contractName = creators[type]\n                }\n\n                if contractName != \"\"{\n                    CallContract(contractName, cdata)\n                }\n            }\n            i = i + 1\n        }\n        // Println(Sprintf(\"> time: %v\", $time))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ImportUpload",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\n    data {\n        input_file string \"file\"\n    }\n    func encodeGlobals(s string) string {\n        var globs array i lenGlobs int r map prefix from to string\n        prefix = \"import_\"\n        globs = [\"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\n        lenGlobs = Len(globs)\n        while i < lenGlobs{\n            r = globs[i]\n            from = \"#\" + r + \"#\"\n            to = ToUpper(\"#\" + prefix + r + \"#\")\n            s = Replace(s, from, to)\n            i = i + 1\n        }\n        return s\n    }\n\n    conditions {\n        $input_file = BytesToString($input_file)\n        $input_file = encodeGlobals($input_file)\n        $limit = 10 // data piece size of import\n    }\n\n    action {\n        // init buffer_data, cleaning old buffer\n        var initJson map\n        $import_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"import\", ecosystem: $ecosystem_id}).One(\"id\")\n        if $import_id {\n            $import_id = Int($import_id)\n            DBUpdate(\"@1buffer_data\", $import_id, {\"value\": initJson})\n        } else {\n            $import_id = DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"import\", \"value\": initJson,\"ecosystem\": $ecosystem_id})\n        }\n\n        $info_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"import_info\", ecosystem: $ecosystem_id}).One(\"id\")\n        if $info_id {\n            $info_id = Int($info_id)\n            DBUpdate(\"@1buffer_data\", $info_id, {\"value\": initJson})\n        } else {\n            $info_id = DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\", \"value\": initJson,\"ecosystem\": $ecosystem_id})\n        }\n        \n        var input map arrData array\n        input = JSONDecode($input_file)\n        arrData = input[\"data\"]\n\n        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array\n\n        // import info\n        var i lenArrData int item map\n        lenArrData = Len(arrData)\n        while i < lenArrData{\n            item = arrData[i]\n\n            if item[\"Type\"] == \"pages\" {\n                pages_arr = Append(pages_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"blocks\" {\n                blocks_arr = Append(blocks_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"menu\" {\n                menu_arr = Append(menu_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"app_params\" {\n                parameters_arr = Append(parameters_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"languages\" {\n                languages_arr = Append(languages_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"contracts\" {\n                contracts_arr = Append(contracts_arr, item[\"Name\"])\n            }elif item[\"Type\"] == \"tables\" {\n                tables_arr = Append(tables_arr, item[\"Name\"])\n            }\n\n            i = i + 1\n        }\n\n        var inf map\n        inf[\"app_name\"] = input[\"name\"]\n        inf[\"pages\"] = Join(pages_arr, \", \")\n        inf[\"pages_count\"] = Len(pages_arr)\n        inf[\"blocks\"] = Join(blocks_arr, \", \")\n        inf[\"blocks_count\"] = Len(blocks_arr)\n        inf[\"menu\"] = Join(menu_arr, \", \")\n        inf[\"menu_count\"] = Len(menu_arr)\n        inf[\"parameters\"] = Join(parameters_arr, \", \")\n        inf[\"parameters_count\"] = Len(parameters_arr)\n        inf[\"languages\"] = Join(languages_arr, \", \")\n        inf[\"languages_count\"] = Len(languages_arr)\n        inf[\"contracts\"] = Join(contracts_arr, \", \")\n        inf[\"contracts_count\"] = Len(contracts_arr)\n        inf[\"tables\"] = Join(tables_arr, \", \")\n        inf[\"tables_count\"] = Len(tables_arr)\n\n        if 0 == inf[\"pages_count\"] + inf[\"blocks_count\"] + inf[\"menu_count\"] + inf[\"parameters_count\"] + inf[\"languages_count\"] + inf[\"contracts_count\"] + inf[\"tables_count\"] {\n            warning \"Invalid or empty import file\"\n        }\n\n        // import data\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\n        var sliced contracts array\n        i = 0\n        while i <lenArrData{\n            var items array l int item map\n            while l < $limit && (i + l < lenArrData) {\n                item = arrData[i + l]\n                if item[\"Type\"] == \"contracts\" {\n                    contracts = Append(contracts, item)\n                }else{\n                    items = Append(items, item)\n                }\n                l = l + 1\n            }\n            var batch map\n            batch[\"Data\"] = JSONEncode(items)\n            sliced = Append(sliced, batch)\n            i = i + $limit\n        }\n        if Len(contracts) > 0{\n            var batch map\n            batch[\"Data\"] = JSONEncode(contracts)\n            sliced = Append(sliced, batch)\n        }\n        input[\"data\"] = sliced\n\n        // storing\n        DBUpdate(\"@1buffer_data\", $import_id, {\"value\": input})\n        DBUpdate(\"@1buffer_data\", $info_id, {\"value\": inf})\n\n        var name string\n        name = Str(input[\"name\"])\n        var cndns string\n        cndns = Str(input[\"conditions\"])\n\n        if !DBFind(\"@1applications\").Columns(\"id\").Where({name:name, ecosystem: $ecosystem_id}).One(\"id\") {\n            DBInsert(\"@1applications\", {\"name\": name, \"conditions\": cndns,\"ecosystem\": $ecosystem_id})\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ItemChangeAppId",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ItemChangeAppId {\n    data {\n        Table string\n        AppId int\n        Id int\n    }\n\n    conditions {\n        $item = DBFind($Table).Where({id: $Id, ecosystem: $ecosystem_id}).Row()\n        if !$item{\n            warning \"Item not found\"\n        }\n    }\n\n    action {\n        DBUpdate($Table, Int($item[\"id\"]), {\"app_id\": $AppId})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MainCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MainCondition {\n\tconditions {\n\t\tif EcosysParam(\"founder_account\")!=$key_id\n\t\t{\n\t\t\twarning \"Sorry, you do not have access to this action.\"\n\t\t}\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "MoneyTransfer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MoneyTransfer {\n\tdata {\n\t\tRecipient string\n\t\tAmount    string\n\t\tComment     string \"optional\"\n\t}\n\tconditions {\n\t\t$recipient = AddressToId($Recipient)\n\t\tif $recipient == 0 {\n\t\t\terror Sprintf(\"Recipient %s is invalid\", $Recipient)\n\t\t}\n\t\tvar total money\n\t\t$amount = Money($Amount) \n\t\tif $amount <= 0 {\n\t\t\terror \"Amount must be greater then zero\"\n\t\t}\n\n        var row map\n        var req money\n\t\trow = DBFind(\"@1keys\").Columns(\"amount\").Where({id: $key_id, ecosystem: $ecosystem_id}).Row()\n        total = Money(row[\"amount\"])\n        req = $amount + Money(100000000000000000) \n        if req > total {\n\t\t\terror Sprintf(\"Money is not enough. You have got %v but you should reserve %v\", total, req)\n\t\t}\n\t}\n\taction {\n\t\tDBUpdate(\"@1keys\", $key_id, {\"-amount\": $amount})\n\t\tif DBFind(\"@1keys\").Columns(\"id\").Where({id: $recipient, ecosystem: $ecosystem_id}).One(\"id\") == nil {\n\t\t\tDBInsert(\"@1keys\", {\"id\": $recipient,\"amount\": $amount})\n\t\t} else {\n\t\t\tDBUpdate(\"@1keys\", $recipient, {\"+amount\": $amount})\n\t\t}\n        DBInsert(\"@1history\", {\"sender_id\": $key_id,\"recipient_id\": $recipient,\n            \"amount\":$amount,\"comment\": $Comment,\"block_id\": $block,\"txhash\": $txhash})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"@1app_params\").Columns(\"id\").Where({\"name\":$Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Application parameter %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"@1app_params\", {\"app_id\": $ApplicationId, \"name\": $Name, \"value\": $Value,\n              \"conditions\": $Conditions,\"ecosystem\":$ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\n    data {\n        Name string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if Size($Name) == 0 {\n            warning \"Application name missing\"\n        }\n\n        if DBFind(\"@1applications\").Columns(\"id\").Where({\"name\":$Name, \"ecosystem\":$ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Application %s already exists\", $Name)\n        }\n    }\n\n    action {\n        $result = DBInsert(\"@1applications\", {\"name\":$Name, \"conditions\":$Conditions, \"ecosystem\":$ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBadBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBadBlock {\n\tdata {\n\t\tProducerNodeID int\n\t\tConsumerNodeID int\n\t\tBlockID int\n\t\tTimestamp int\n\t\tReason string\n\t}\n\taction {\n        DBInsert(\"@1bad_blocks\", {\"producer_node_id\": $ProducerNodeID,\"consumer_node_id\": $ConsumerNodeID,\n            \"block_id\": $BlockID, \"timestamp block_time\": $Timestamp, \"reason\": $Reason})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"@1blocks\").Columns(\"id\").Where({name:$Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Block %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"@1blocks\", {\"name\": $Name, \"value\": $Value, \"conditions\": $Conditions,\n              \"app_id\": $ApplicationId,\"ecosystem\": $ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\n    data {\n        TableName string\n        Name string\n        Type string\n        UpdatePerm string\n        ReadPerm string\n    }\n    conditions {\n    var permissions map\n        permissions[\"update\"] = $UpdatePerm\n        permissions[\"read\"] = $ReadPerm\n        $Permissions = permissions\n        ColumnCondition($TableName, $Name, $Type, JSONEncode($Permissions))\n    }\n    action {\n        CreateColumn($TableName, $Name, $Type, JSONEncode($Permissions))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\n    data {\n        ApplicationId int\n        Value string\n        Conditions string\n        Wallet string \"optional\"\n        TokenEcosystem int \"optional\"\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        $walletContract = $key_id\n        if $Wallet {\n            $walletContract = AddressToId($Wallet)\n            if $walletContract == 0 {\n                error Sprintf(\"wrong wallet %s\", $Wallet)\n            }\n        }\n\n        $contract_name = ContractName($Value)\n\n        if !$contract_name {\n            error \"must be the name\"\n        }\n\n        if !$TokenEcosystem {\n            $TokenEcosystem = 1\n        } else {\n            if !SysFuel($TokenEcosystem) {\n                warning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem)\n            }\n        }\n    }\n\n    action {\n        $result = CreateContract($contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewDelayedContract {\n\tdata {\n\t\tContract string\n\t\tEveryBlock int\n\t\tConditions string\n\t\tBlockID int \"optional\"\n\t\tLimit int \"optional\"\n\t}\n\tconditions {\n\t\tValidateCondition($Conditions, $ecosystem_id)\n\n\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t}\n\n\t\tif GetContractByName($Contract) == 0 {\n\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t}\n\n\t\tif $BlockID == 0 {\n\t\t\t$BlockID = $block + $EveryBlock\n\t\t}\n\n\t\tif $BlockID <= $block {\n\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t}\n\t}\n\taction {\n        DBInsert(\"@1delayed_contracts\", {\"contract\": $Contract, \"key_id\": $key_id, \"block_id\": $BlockID,\n            \"every_block\": $EveryBlock, \"limit\": $Limit, \"conditions\": $Conditions})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewEcosystem {\n\tdata {\n\t\tName  string\n\t}\n\taction {\n\t\t$result = CreateEcosystem($key_id, $Name)\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\n    data {\n        Name string\n        Trans string\n    }\n\n    conditions {\n        if DBFind(\"@1languages\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Language resource %s already exists\", $Name)\n        }\n\n        EvalCondition(\"@1parameters\", \"changing_language\", \"value\")\n    }\n\n    action {\n        CreateLanguage($Name, $Trans)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLangJoint {\n    data {\n        Name string\n        ValueArr array\n        LocaleArr array\n    }\n\n    conditions {\n        var i int\n        while i < Len($LocaleArr) {\n            if Size($LocaleArr[i]) == 0 {\n                info(\"Locale is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var Trans map\n        while i < Len($LocaleArr) {\n            Trans[$LocaleArr[i]] = $ValueArr[i]\n            i = i + 1\n        }\n        var params map\n        params[\"Name\"] = $Name\n        params[\"Trans\"] = JSONEncode(Trans)\n        CallContract(\"NewLang\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\n    data {\n        Name string\n        Value string\n        Title string \"optional\"\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if DBFind(\"@1menu\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Menu %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"@1menu\", {\"name\":$Name,\"value\": $Value, \"title\": $Title, \"conditions\": $Conditions, \"ecosystem\": $ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Menu string\n        Conditions string\n        ValidateCount int \"optional\"\n        ValidateMode string \"optional\"\n    }\n    func preparePageValidateCount(count int) int {\n        var min, max int\n        min = Int(EcosysParam(\"min_page_validate_count\"))\n        max = Int(EcosysParam(\"max_page_validate_count\"))\n\n        if count < min {\n            count = min\n        } else {\n            if count > max {\n                count = max\n            }\n        }\n        return count\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"@1pages\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf( \"Page %s already exists\", $Name)\n        }\n\n        $ValidateCount = preparePageValidateCount($ValidateCount)\n\n        if $ValidateMode {\n            if $ValidateMode != \"1\" {\n                $ValidateMode = \"0\"\n            }\n        }\n    }\n\n    action {\n        DBInsert(\"@1pages\", {\"name\": $Name,\"value\": $Value, \"menu\": $Menu,\n             \"validate_count\":$ValidateCount,\"validate_mode\": $ValidateMode,\n             \"conditions\": $Conditions,\"app_id\": $ApplicationId,\"ecosystem\":$ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    \n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n        \n        if DBFind(\"@1parameters\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\n            warning Sprintf(\"Parameter %s already exists\", $Name)\n        }\n    }\n    \n    action {\n        DBInsert(\"@1parameters\", {\"name\": $Name, \"value\":$Value, \"conditions\": $Conditions,\"ecosystem\": $ecosystem_id})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSection {\n\tdata {\n\t\ttitle string\n\t\tstatus int\n\t\turlname string\n\t\tpage string\n\t}\n\t\n\tconditions {\n\t\tif $status < 0 || $status > 2 {\n\t\t\twarning \"Status must be in range 0..2\"\n\t\t}\n\t\tif DBFind(\"@1sections\").Where({\"urlname\":$urlname,ecosystem:$ecosystem_id}) {\n\t\t\twarning Sprintf(\"Section with url name '%s' already exists\", $urlname)\n\t\t}\n\t}\n\t\n\taction {\n\t\tif $status == 2 {\n\t\t\tvar status_check map\n\t\t\tvar curr_id int\n\t\t\tstatus_check = DBFind(\"@1sections\").Where({\"status\":$status}).Columns(\"id,status\").Row()\n\t\t\tcurr_id = Int(JSONDecode(status_check[\"id\"]))\n\t\t\tDBUpdate(\"@1sections\", curr_id, {\"status\":1})\n\t\t}\n\t\tvar roles_access array\n\t\troles_access = JSONEncode(roles_access)\n\t\tDBInsert(\"@1sections\", {\"title\":$title, \"status\":$status, \"urlname\":$urlname, \"page\":$page, \"roles_access\":roles_access, \"ecosystem\":$ecosystem_id})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSign {\n    data {\n        Name string\n        Value string\n    }\n    conditions {\n        //ValidateCondition($Conditions, $ecosystem_id)\n\n\t\t$contract_map = DBFind(\"@1contracts\").Columns(\"id,name,confirmation\").Where({name: $Name, ecosystem: $ecosystem_id}).Row()\n        /*if $contract_map[\"confirmation\"] {\n            warning Sprintf(\"The signature %s already exists\", $Name)\n        }*/\n\t\t\n    }\n    action {\n\t\tDBUpdate(\"@1contracts\",Int($contract_map[\"id\"]),{\"confirmation\": $Value}) \n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSignJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSignJoint {\n    data {\n        Name string\n        Title string \"optional\"\n        ParamArr array \"optional\"\n        ValueArr array \"optional\"\n    }\n\n    conditions {\n        var i int\n        while i < Len($ParamArr) {\n            if Size($ParamArr[i]) == 0 {\n                info(\"Parameter is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var par_arr array\n\n        var i int\n        while i < Len($ParamArr) {\n            var par_map map\n            par_map[\"name\"] = $ParamArr[i]\n            par_map[\"text\"] = $ValueArr[i]\n            par_arr = Append(par_arr, JSONEncode(par_map))\n            i = i + 1\n        }\n\n        var params map\n        params[\"Name\"] = $Name \n        params[\"Value\"] = Sprintf(`{\"title\":\"%v\",\"params\":[%v]}`, $Title, Join(par_arr, \",\"))\n        CallContract(\"NewSign\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\n    data {\n        ApplicationId int\n        Name string\n        Columns string\n        Permissions string\n    }\n    conditions {\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n        TableConditions($Name, $Columns, $Permissions)\n    }\n    \n    action {\n        CreateTable($Name, $Columns, $Permissions, $ApplicationId)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTableJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTableJoint {\n    data {\n        ApplicationId int\n        Name string\n        ColumnsArr array\n        TypesArr array\n        InsertPerm string\n        UpdatePerm string\n        ReadPerm string\n        NewColumnPerm string\n    }\n\n    conditions {\n        var i int\n        while i < Len($ColumnsArr) {\n            if Size($ColumnsArr[i]) == 0 {\n                info(\"Columns is empty\")\n            }\n            if Size($TypesArr[i]) == 0 {\n                info(\"Type is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var col_arr array\n        while i < Len($ColumnsArr) {\n            var col_map map\n            col_map[\"name\"] = $ColumnsArr[i]\n            col_map[\"type\"] = $TypesArr[i]\n            col_map[\"conditions\"] = \"true\"\n            col_arr[i] = JSONEncode(col_map)\n            i = i + 1\n        }\n\n        var Permissions map\n        Permissions[\"insert\"] = $InsertPerm \n        Permissions[\"update\"] = $UpdatePerm\n        Permissions[\"read\"] = $ReadPerm\n        Permissions[\"new_column\"] = $NewColumnPerm\n\n        var params map\n        params[\"ApplicationId\"] = $ApplicationId \n        params[\"Name\"] = $Name\n        params[\"Columns\"] = JSONEncode(col_arr)\n        params[\"Permissions\"] = JSONEncode(Permissions)\n        CallContract(\"NewTable\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewUser",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewUser {\n\tdata {\n\t\tNewPubkey string\n\t}\n\tconditions {\n\t\t$newId = PubToID($NewPubkey)\n\t\tif $newId == 0 {\n\t\t\terror \"Wrong pubkey\"\n\t\t}\n\t\tif DBFind(\"@1keys\").Columns(\"id\").Where({id: $newId, ecosystem: $ecosystem_id}).One(\"id\") != nil {\n\t\t\terror \"User already exists\"\n\t\t}\n\n        $amount = Money(1000) * Money(1000000000000000000)\n\t}\n\taction {\n        NewMoney($newId, Str($amount), \"New user deposit\")\n        SetPubKey($newId, StringToBytes($NewPubkey))\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeOwnerCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeOwnerCondition {\n\tconditions {\n        $raw_full_nodes = SysParamString(\"full_nodes\")\n        if Size($raw_full_nodes) == 0 {\n            ContractConditions(\"MainCondition\")\n        } else {\n            $full_nodes = JSONDecode($raw_full_nodes)\n            var i int\n            while i < Len($full_nodes) {\n                $fn = $full_nodes[i]\n                if $fn[\"key_id\"] == $key_id {\n                    return true\n                }\n                i = i + 1\n            }\n            warning \"Sorry, you do not have access to this action.\"\n        }\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "PlatformAppsInstall",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract PlatformAppsInstall {\n    data {\n        Name string\n    }\n    func appendOnce(ar array, menu, page, item string) array{\n        if !Contains(menu, page) {\n            ar = Append(ar, item)\n        }\n        return ar\n    }\n\n    func getAdminMenu() string {\n        var items array currentMenu string\n        currentMenu = Str($admin_menu[\"value\"])\n\n        if $Name == \"System\" {\n            items = appendOnce(items, currentMenu, \"@1admin_index\", `MenuItem(Title:\"Dashboard\", Page:@1admin_index, Icon:\"icon-wrench\")`)\n            items = appendOnce(items, currentMenu, \"@1apps_list\", `MenuItem(Title:\"Applications\", Page:@1apps_list, Icon:\"icon-folder\")`)\n            items = appendOnce(items, currentMenu, \"@1params_list\", `MenuItem(Title:\"Ecosystem parameters\", Page:@1params_list, Icon:\"icon-settings\")`)\n            items = appendOnce(items, currentMenu, \"@1menus_list\", `MenuItem(Title:\"Menus\", Page:@1menus_list, Icon:\"icon-list\")`)\n            items = appendOnce(items, currentMenu, \"@1section_list\", `MenuItem(Title:\"Sections\", Page:@1section_list, Icon:\"icon-frame\")`)\n        }\n\n        if $Name == \"Basic application\" {\n            items = appendOnce(items, currentMenu, \"@1sysparams_list\", `MenuItem(Title:\"Platform parameters\", Page:@1sysparams_list, Icon:\"fa icon-settings\")`)\n        }\n        return Join(items array, \"\\n\")\n    }\n\n    func getDefaultMenu() string {\n        var items array currentMenu string\n        currentMenu = Str($default_menu[\"value\"])\n        if $Name == \"Basic application\" {\n            items = appendOnce(items, currentMenu, \"@1profile_view\", `MenuItem(Title:Wallet, Page:@1profile_view, Icon:\"icon-wallet\")`)\n            items = appendOnce(items, currentMenu, \"@1notifications_list\", `MenuItem(Title:Notifications, Page:@1notifications_list, Icon:\"icon-flag\")`)\n            items = appendOnce(items, currentMenu, \"@1members_list\", `MenuItem(Title:Membership, Page:@1members_list, Icon:\"fa icon-people\")`)\n            items = appendOnce(items, currentMenu, \"@1ecosystems_list\", `MenuItem(Title:Ecosystems, Page:@1ecosystems_list, Icon:\"fa fa-list-ul\")`)\n            if !(Contains(currentMenu, \"@1roles_list\") || Contains(currentMenu, \"@1voting_list\") || Contains(currentMenu, \"@1sysparams_candidates_list\") || Contains(currentMenu, \"@1tokenrefund_list\")){\n                items = Append(items, `MenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){`)\n                items = Append(items, `    MenuItem(Title:Roles, Page:@1roles_list, Icon:\"fa fa-list-ul\")`)\n                items = Append(items, `    MenuItem(Title:Voting, Page:@1voting_list, Icon:\"fa fa-edit\")`)\n                items = Append(items, `    MenuItem(Title:Candidate for validators, Page:@1sysparams_candidates_list, Icon:\"icon-list\")`)\n                items = Append(items, `    MenuItem(Title:Tokens refund list, Page:@1tokenrefund_list, Icon:\"icon-list\")`)\n                items = Append(items, `}`)\n            }\n        }\n        return Join(items array, \"\\n\")\n    }\n\n    conditions {\n        $admin_menu = DBFind(\"@1menu\").Columns(\"id,value\").Where({name: \"admin_menu\", ecosystem: $ecosystem_id}).Row()\n        $default_menu = DBFind(\"@1menu\").Columns(\"id,value\").Where({name: \"default_menu\", ecosystem: $ecosystem_id}).Row()\n\n        if !$admin_menu {\n            warning \"Admin menu not found\"\n        }\n        if !$default_menu {\n            warning \"Default menu not found\"\n        }\n    }\n\n    action {\n        var val_admin_menu string\n        val_admin_menu = Str($admin_menu[\"value\"]) + \"\\n\" + getAdminMenu()\n        EditMenu(\"Id,Value\",Int($admin_menu[\"id\"]), val_admin_menu)\n\n        var val_default_menu string\n        val_default_menu = Str($default_menu[\"value\"]) + \"\\n\" + getDefaultMenu()\n        EditMenu(\"Id,Value\", Int($default_menu[\"id\"]), val_default_menu)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "Restore",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Restore {\n    data {\n        Id int\n        Type string\n        IdHistory int\n    }\n    conditions {\n        var allowed map\n        allowed[\"page\"] = 1\n        allowed[\"block\"] = 1\n        allowed[\"menu\"] = 1\n        allowed[\"contract\"] = 1\n        if allowed[$Type] != 1 {\n            warning \"Wrong type\"\n        }\n\n        if $Type == \"page\" {\n            $history = GetHistory(\"pages\", $Id)\n        }elif $Type == \"block\" {\n            $history = GetHistory(\"blocks\", $Id)\n        }elif $Type == \"menu\" {\n            $history = GetHistory(\"menu\", $Id)\n        }elif $Type == \"contract\" {\n            $history = GetHistory(\"contracts\", $Id)\n        }\n    }\n    action {\n        var rec params map\n        rec = $history[$IdHistory]\n        params[\"Id\"] = $Id\n        params[\"Value\"] = rec[\"value\"]\n        params[\"Conditions\"] = rec[\"conditions\"]\n\n        if $Type == \"page\" {\n            params[\"Menu\"] = rec[\"menu\"]\n            CallContract(\"@1EditPage\", params)\n        }elif $Type == \"block\" {\n            CallContract(\"@1EditBlock\", params)\n        }elif $Type == \"menu\" {\n            CallContract(\"@1EditMenu\", params)\n        }elif $Type == \"contract\" {\n            CallContract(\"@1EditContract\", params)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelDown",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelDown {\n   \tdata {\n\t\tid int\n    }\n\t\n    conditions {\n\t\tif !DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":$id,ecosystem:$ecosystem_id}) {\n\t\t    warning Sprintf(\"Section with id '%v' not exists\", $id)\n\t\t}\n\t\t$next = DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":{\"$gt\":$id},ecosystem:$ecosystem_id})\n\t\tif !$next {\n\t\t    warning \"Section is already at bottom\"\n\t\t}\n    }\n\t\n\taction {\n\t\tvar next_id int\n\t\tvar last_id int\n\t\tnext_id = $id + 1\n\t\t$max_id = DBFind(\"@1sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\n\t\tlast_id = $max_id + 1\n\t\tDBUpdate(\"@1sections\", next_id, {\"id\":last_id})\n\t\tDBUpdate(\"@1sections\", $id, {\"id\":next_id})\n\t\tDBUpdate(\"@1sections\", last_id, {\"id\":$id})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelUp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelUp {\n\tdata {\n\t\tid int\n\t}\n\t\n\tconditions {\n\t\tif !DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":$id,ecosystem:$ecosystem_id}) {\n\t\t    warning Sprintf(\"Section with id '%v' not exists\", $id)\n\t\t}\n\t\t$next = DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":{\"$lt\":$id},ecosystem:$ecosystem_id})\n\t\tif !$next {\n\t\t    warning \"Section is already at top\"\n\t\t}\n\t}\n\t\n\taction {\n\t\tvar next_id int\n\t\tvar last_id int\n\t\tnext_id = $id - 1\n\t\t$max_id = DBFind(\"@1sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\n\t\tlast_id = $max_id + 1\n\t\tDBUpdate(\"@1sections\", next_id, {\"id\":last_id})\n\t\tDBUpdate(\"@1sections\", $id, {\"id\":next_id})\n\t\tDBUpdate(\"@1sections\", last_id, {\"id\":$id})\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionRoles",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionRoles {\n    data {\n        id int\n        rid int\n        operation string\n    }\n\n    conditions {\n        if $operation == \"add\" {\n            var roles_id map\n            var json array\n            var i int\n            i = 0\n            roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\n            json = JSONDecode(roles_id[\"roles_access\"])\n            while i < Len(json) {\n                if (json[i]==$rid) {\n                    warning \"This role is already have permission\"\n                }\n                i = i + 1\n            }\n        }\n    }\n\n    action {\n        var roles_array array\n        roles_array = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"roles_access\")\n        if $operation == \"add\" {\n            if (roles_array==\"[]\") {            \n                var roles_id array\n                roles_id[0] = $rid\n                roles_id = JSONEncode(roles_id)\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":roles_id})\n            } else {\n                var roles_id map\n                var json array\n                roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\n                json = JSONDecode(roles_id[\"roles_access\"])\n                json = Append(json, $rid)\n                json = JSONEncode(json)\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":json})\n            }\n        } \n        if $operation == \"remove\" {\n            var json array\n            var roles_id map\n            roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\n            json = JSONDecode(roles_id[\"roles_access\"])\n            if (Len(json)==1) {\n                var roles_access array\n                roles_access = JSONEncode(roles_access)\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":roles_access})\n            } else {\n                var buffer string\n                buffer = Join(json, \",\")\n                if Contains(buffer, Str($rid)) {\n                    buffer = Replace(buffer, `,` + Str($rid), ``)\n                }\n                if HasPrefix(buffer, Str($rid)) {\n                    buffer = Replace(buffer, Str($rid) + `,`, ``)\n                }\n                json = Split(buffer, \",\")\n                json = JSONEncode(json)\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":json})\n            }\n            }\n        }\n    }",
            "Type": "contracts"
        },
        {
            "Name": "SelectApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SelectApp {\n    data {\n        ApplicationId int\n    }\n\n    conditions {\n        $app = DBFind(\"@1applications\").Columns(\"id,name\").Where({id: $ApplicationId, ecosystem: $ecosystem_id}).Row()\n        if !$app{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n        var value map bufferId int\n        value[\"app_id\"] = Str($ApplicationId)\n        value[\"app_name\"] = $app[\"name\"]\n\n        bufferId = Int(DBFind(\"@1buffer_data\").Where({member_id: $key_id, key: \"export\", ecosystem: $ecosystem_id}).One(\"id\"))\n        if bufferId >0 {\n            DBUpdate(\"@1buffer_data\", bufferId, {\"value\": value})\n        } else {\n            DBInsert(\"@1buffer_data\", {\"member_id\": $key_id,\"key\": \"export\",\"value\": value, ecosystem: $ecosystem_id})\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "UpdateMetrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UpdateMetrics {\n\tconditions {\n\t\tContractConditions(\"MainCondition\")\n\t}\n\taction {\n\t\tvar values array\n\t\tvalues = DBCollectMetrics()\n\n\t\tvar i, id int\n\t\tvar v map\n\t\twhile (i < Len(values)) {\n            var inmap map\n\n            v = values[i]\n            inmap[\"time\"] = v[\"time\"]\n            inmap[\"key\"] = v[\"key\"]\n            inmap[\"metric\"] = v[\"metric\"]\n            \n            id = Int(DBFind(\"@1metrics\").Columns(\"id\").Where(inmap).One(\"id\"))\n            var ival int\n\t\t\tif id != 0 {\n                ival = Int(v[\"value\"])\n\t\t\t\tDBUpdate(\"@1metrics\", id, {\"value\": ival})\n\t\t\t} else {\n                inmap[\"value\"] = Int(v[\"value\"])\n\t\t\t\tDBInsert(\"@1metrics\", inmap )\n\t\t\t}\n\t\t\ti = i + 1\n\t\t}\n\t}\n}",
            "Type": "contracts"
        },
        {
            "Name": "UpdateSysParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UpdateSysParam {\n    data {\n        Name string\n        Value string\n        Conditions string \"optional\"\n    }\n\n    conditions {\n        if GetContractByName($Name) == 0{\n            warning \"System parameter not found\"\n        }\n    }\n\n    action {\n        var params map\n        params[\"Value\"] = $Value\n        CallContract($Name, params)\n        DBUpdateSysParam($Name, $Value, $Conditions)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "Export",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\n    data {}\n\n    func createExport(items array) string {\n        var res map\n        res[\"name\"] = $AppName\n        res[\"conditions\"] = $AppConditions\n        res[\"data\"] = items\n        return JSONEncodeIndent(res, \"    \")\n    }\n    func mapping(res map, resKey string, item map itemKey string){\n        if item[itemKey] {\n            res[resKey] = Str(item[itemKey])\n        }\n    }\n    func prepareItem(item map, type string) string {\n        var res map\n        res[\"Type\"] = type\n        mapping(res, \"Name\", item, \"name\")\n        mapping(res, \"Value\", item, \"value\")\n        mapping(res, \"Conditions\", item, \"conditions\")\n        mapping(res, \"Menu\", item, \"menu\")\n        mapping(res, \"Title\", item, \"title\")\n        mapping(res, \"Trans\", item, \"res\")\n        mapping(res, \"Columns\", item, \"columns\")\n        mapping(res, \"Permissions\", item, \"permissions\")\n        mapping(res, \"Confirmation\", item, \"confirmation\")\n        return res\n    }\n\n    func getColumnsWithType(table_name string, columnsJSON string) string {\n        var colsMap map result columns array\n        colsMap = JSONDecode(columnsJSON)\n        columns = GetMapKeys(colsMap)\n        var i int\n        while i < Len(columns){\n            if Size(columns[i]) > 0 {\n                var col map\n                col[\"name\"] = columns[i]\n                col[\"conditions\"] = colsMap[col[\"name\"]]\n                col[\"type\"] = GetColumnType(table_name, col[\"name\"])\n                result = Append(result, col)\n            }\n            i = i + 1\n        }\n        return JSONEncode(result)\n    }\n\n    func exportTable(type string, result array) array {\n        var items array limit offset i lenItems int item map\n        limit = 250\n        while true{\n            var rows array where map\n            if type == \"menu\" {\n                if Len($menus_names) > 0 {\n                    where[\"name\"] = {\"$in\": $menus_names}\n\t\t\t\t\twhere[\"ecosystem\"] = $ecosystem_id\n                }\n            }else{\n                where[\"app_id\"] = $AppID\n\t\t\t\twhere[\"ecosystem\"] = $ecosystem_id\n            }\n            if where {\n\t\t\t\tvar tbl string\n\t\t\t\ttbl = \"@1\" + Str(type)\n\t\t\t\tif (tbl == \"@1languages\"){\n\t\t\t\t\trows = DBFind(tbl).Limit(limit).Offset(offset).Where({ecosystem: $ecosystem_id})\n\t\t\t\t} else {\n                \trows = DBFind(tbl).Limit(limit).Offset(offset).Where(where)\n\t\t\t\t}\n            }\n            if Len(rows) > 0{\n                i = 0\n                while i < Len(rows){\n                    items = Append(items, rows[i])\n                    i = i + 1\n                }\n            }else{\n                break\n            }\n            offset = offset + limit\n        }\n        i = 0\n        lenItems = Len(items)\n        while i < lenItems {\n            item = items[i]\n            if type == \"tables\" {\n                item[\"columns\"] = getColumnsWithType(item[\"name\"], item[\"columns\"])\n            }\n            result = Append(result, prepareItem(item, type))\n            if type == \"pages\" {\n                $menus_names = Append($menus_names, Sprintf(\"'%v'\", item[\"menu\"]))\n            }\n            i = i + 1\n        }\n        return result\n    }\n\n    conditions {\n        var buf app map\n        buf = DBFind(\"@1buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where({member_id:$key_id, key: \"export\", ecosystem: $ecosystem_id}).Row()\n        if !buf{\n            warning \"Application not selected\"\n        }\n        $AppID = Int(buf[\"value.app_id\"])\n        $AppName = Str(buf[\"value.app_name\"])\n\n        app = DBFind(\"@1applications\").Columns(\"id,conditions\").Where({id:$AppID, ecosystem: $ecosystem_id}).Row()\n        if !app{\n            warning \"Application not found\"\n        }\n        $AppConditions = app[\"conditions\"]\n\n        $menus_names = []\n\t\t\n    }\n\n    action {\n        var exportJSON string items array\n        items = exportTable(\"pages\", items)\n        items = exportTable(\"contracts\", items)\n        items = exportTable(\"blocks\", items)\n        items = exportTable(\"languages\", items)\n        items = exportTable(\"app_params\", items)\n        items = exportTable(\"tables\", items)\n        items = exportTable(\"menu\", items)\n\n        exportJSON = createExport(items)\n\t\t\n        UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", \"export\", exportJSON, $AppID, \"application/json\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "block_reward",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract block_reward {\n    data {\n        Value string\n    }\n\n    conditions {\n        if Size($Value) == 0 {\n            warning \"Value was not received\"\n        }\n        if Int($Value) < 3 || Int($Value) > 9999 {\n            warning \"Value must be between 3 and 9999\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "blockchain_url",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract blockchain_url {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if !(HasPrefix($Value, \"http://\") || HasPrefix($Value, \"https://\")) {\n      warning \"URL ivalid (not found protocol)\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "column_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract column_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "commission_size",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract commission_size {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "commission_wallet",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract commission_wallet {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "contract_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract contract_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "default_ecosystem_contract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract default_ecosystem_contract {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "default_ecosystem_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract default_ecosystem_menu {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "default_ecosystem_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract default_ecosystem_page {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ecosystem_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ecosystem_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_activate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_activate {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_address_to_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_address_to_id {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_column_condition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_column_condition {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_compile_contract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_compile_contract {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_contains",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_contains {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_contracts_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_contracts_list {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_create_column",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_create_column {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_create_ecosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_create_ecosystem {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_create_table",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_create_table {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_deactivate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_deactivate {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_ecosys_param",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_ecosys_param {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_eval",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_eval {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_eval_condition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_eval_condition {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_flush_contract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_flush_contract {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_has_prefix",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_has_prefix {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_id_to_address",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_id_to_address {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_is_object",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_is_object {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_join",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_join {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_json_to_map",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_json_to_map {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_len",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_len {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_new_state",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_new_state {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_perm_column",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_perm_column {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_perm_table",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_perm_table {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_pub_to_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_pub_to_id {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_replace",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_replace {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_sha256",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_sha256 {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_size",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_size {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_substr",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_substr {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_sys_fuel",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_sys_fuel {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_sys_param_int",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_sys_param_int {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_sys_param_string",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_sys_param_string {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_table_conditions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_table_conditions {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_update_lang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_update_lang {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "extend_cost_validate_condition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract extend_cost_validate_condition {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "fuel_rate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract fuel_rate {\n  data {\n    Value string\n  }\n\n  conditions {\n    $Value = TrimSpace($Value)\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    // [[\"x1\",\"number\"]]\n    if !(HasPrefix($Value, \"[\") && \"]\" == Substr($Value, Size($Value)-1, 1)){\n      warning \"Invalid value\"\n    }\n    var rates newRate array\n    rates = JSONDecode($Value)\n    if Len(rates) > 1{\n      warning \"Invalid size array\"\n    }\n    newRate = rates[0]\n    if Len(newRate) != 2{\n      warning \"Invalid size new rate array\"\n    }\n    if newRate[0] != 1 {\n      warning \"Invalid ecosystem number\"\n    }\n    if Int(newRate[1]) <= 0 {\n      warning \"Invalid fuel value\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "full_nodes",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract full_nodes {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n\n    var full_nodes_arr array\n    full_nodes_arr = JSONDecode($Value)\n\n    var len_arr int\n    len_arr = Len(full_nodes_arr)\n\n    if len_arr == 0 {\n        warning \"Wrong array structure\"\n    }\n\n    var i int\n    while(i < len_arr){\n        var node_map map \n        node_map = full_nodes_arr[i]\n\n        var public_key string\n        var tcp_address string\n        var api_address string\n        var key_id string\n\n        public_key = node_map[\"public_key\"]\n        tcp_address = node_map[\"tcp_address\"]\n        api_address = node_map[\"api_address\"]\n        key_id = node_map[\"key_id\"]\n\n        if Size(public_key) == 0 {\n            warning \"Public key was not received\"\n        }\n        if Size(tcp_address) == 0 {\n            warning \"TCP address was not received\"\n        }\n        if Size(api_address) == 0 {\n            warning \"API address was not received\"\n        }\n        if Size(key_id) == 0 {\n            warning \"Key ID was not received\"\n        }\n\n        i = i + 1\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "gap_between_blocks",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract gap_between_blocks {\n    data {\n        Value string\n    }\n\n    conditions {\n        if Size($Value) == 0 {\n            warning \"Value was not received\"\n        }\n        if Int($Value) <= 0 || Int($Value) >= 86400 {\n            warning \"Value must be between 1 and 86399\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_block_generation_time",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_block_generation_time {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_block_size",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_block_size {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_block_user_tx",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_block_user_tx {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_columns",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_columns {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_forsign_size",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_forsign_size {\n    data {\n      Value string\n    }\n  \n    conditions {\n      if Size($Value) == 0 {\n        warning \"Value was not received\"\n      }\n      if Int($Value) <= 0 {\n        warning \"Value must be greater than zero\"\n      }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_fuel_block",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_fuel_block {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_fuel_tx",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_fuel_tx {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_indexes",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_indexes {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_tx_count",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_tx_count {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "max_tx_size",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract max_tx_size {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "menu_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract menu_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "new_version_url",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract new_version_url {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "number_of_nodes",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract number_of_nodes {\n    data {\n        Value string\n    }\n\n    conditions {\n        if Size($Value) == 0 {\n            warning \"Value was not received\"\n        }\n        if Int($Value) < 1 || Int($Value) > 999 {\n            warning \"Value must be between 1 and 999\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "page_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract page_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        },
        {
            "Name": "private_blockchain",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract private_blockchain {\n    data {\n        Value string\n    }\n\n    conditions {\n        if Int($Value) != 0 && Int($Value) != 1 {\n            warning \"Value must be 0 or 1\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "rb_blocks_1",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract rb_blocks_1 {\n    data {\n        Value string\n    }\n\n    conditions {\n        if Size($Value) == 0 {\n            warning \"Value was not received\"\n        }\n        if Int($Value) < 1 || Int($Value) > 999 {\n            warning \"Value must be between 1 and 999\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "table_price",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract table_price {\n  data {\n    Value string\n  }\n\n  conditions {\n    if Size($Value) == 0 {\n      warning \"Value was not received\"\n    }\n    if Int($Value) <= 0 {\n      warning \"Value must be greater than zero\"\n    }\n  }\n}",
            "Type": "contracts"
        }
    ]
}