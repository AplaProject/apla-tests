{
    "name": "System",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "admin_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#sort#==1){\r\n    SetVar(sort_name, \"{id:1}\")\r\n}.ElseIf(#sort#==2){\r\n    SetVar(sort_name, \"{id:-1}\")\r\n}.ElseIf(#sort#==3){\r\n    SetVar(sort_name, \"{name: 1}\")\r\n}.ElseIf(#sort#==4){\r\n    SetVar(sort_name, \"{name: -1}\")\r\n}.Else{\r\n    SetVar(sort, \"1\")\r\n    SetVar(sort_name, \"{id:1}\") \r\n}\r\n\r\nIf(Or(#width#==12,#width#==6,#width#==4)){\r\n}.Else{\r\n    SetVar(width, \"12\")\r\n}\r\n\r\nForm(){\r\n    Div(clearfix){\r\n        Div(pull-left){\r\n            DBFind(@1applications,apps).Where({ecosystem:#ecosystem_id#})\r\n            Select(Name:AppId, Source:apps, NameColumn: name, ValueColumn: id, Value: #buffer_value_app_id#, Class: bg-gray)\r\n        }\r\n        Div(pull-left){\r\n            Button(Class: fa fa-play btn bg-gray ml-sm, Page: #admin_page#, PageParams: \"sort=#sort#,width=#width#,current_page=#current_page#\", Contract: @1SelectApp, Params: \"ApplicationId=Val(AppId)\")\r\n        }\r\n        Div(pull-right){\r\n            If(#sort#==1){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.ElseIf(#sort#==2){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }\r\n            If(#sort#==3){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.ElseIf(#sort#==4){\r\n                Span(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Sort by NAME, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\r\n            }\r\n        }\r\n        Div(pull-right){\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==12){\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==6){\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n            If(#hideLink#==0){\r\n            }.ElseIf(#width#==4){\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }.Else{\r\n                Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Type": "blocks"
        },
        {
            "Name": "export_info",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1buffer_data).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key:'export', member_id: #key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\r\n\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1pages, src_pages).Where({app_id: #buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_pages)\r\n    DBFind(@1blocks, src_blocks).Where({app_id: #buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_blocks)\r\n    DBFind(@1app_params, src_parameters).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_parameters)\r\n    DBFind(@1languages, src_languages).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_languages)\r\n    DBFind(@1contracts, src_contracts).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_contracts)\r\n    DBFind(@1tables, src_tables).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Limit(250).Order(\"name\").Count(count_tables)\r\n}\r\n\r\nDiv(panel panel-primary){\r\n    If(#buffer_value_app_id# > 0){\r\n        Div(){\r\n            Button(Body: \"$@1export$ - #buffer_value_app_name#\", Class: btn btn-primary btn-block, Page: @1export_download, Contract: @1Export)\r\n        }\r\n    }.Else{\r\n        Div(panel-heading, \"$@1export$\")\r\n    }\r\n    Form(){\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1pages$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_pages# > 0){\r\n                        Span(\"(#count_pages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_pages# > 0){\r\n                        ForList(src_pages){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1blocks$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_blocks# > 0){\r\n                        Span(\"(#count_blocks#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_blocks# > 0){\r\n                        ForList(src_blocks){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1menu$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#buffer_value_app_id# > 0){\r\n                        Span(\"(#buffer_value_count_menu#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\r\n                        Span(Class: h6, Body:\"#buffer_value_menu_name#\")\r\n                    }.Else{\r\n                        Span(Class: h6, Body:\"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1params$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_parameters# > 0){\r\n                        Span(\"(#count_parameters#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_parameters# > 0){\r\n                        ForList(src_parameters){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1lang_res$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_languages# > 0){\r\n                        Span(\"(#count_languages#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_languages# > 0){\r\n                        ForList(src_languages){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    Span(\"$@1contracts$\")\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_contracts# > 0){\r\n                        Span(\"(#count_contracts#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_contracts# > 0){\r\n                        ForList(src_contracts){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(clearfix){\r\n                Div(pull-left){\r\n                    $@1tables$\r\n                }\r\n                Div(pull-right){\r\n                    If(#count_tables# > 0){\r\n                        Span(\"(#count_tables#)\")\r\n                    }.Else{\r\n                        Span(\"(0)\")\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 text-left text-muted){\r\n                    If(#count_tables# > 0){\r\n                        ForList(src_tables){\r\n                            Span(Class: h6, Body: \"#name#, \")\r\n                        }\r\n                    }.Else{\r\n                        Span(Class: h6, Body: \"$@1nothing_selected$\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#buffer_value_app_id# > 0){\r\n            Div(panel-footer text-right){\r\n                Button(Body: $@1export$, Class: btn btn-primary, Page: @1export_download, Contract: @1Export)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "export_link",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\r\n    SetVar(res_type, \"pages\")\r\n}\r\n\r\nDiv(breadcrumb){\r\n    If(#res_type#==\"pages\"){\r\n        Span(Class: text-muted, Body: \"$@1pages$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1pages$\", Page: @1export_resources,, \"res_type=pages\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"blocks\"){\r\n        Span(Class: text-muted, Body: \"$@1blocks$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1blocks$\", Page: @1export_resources,, \"res_type=blocks\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"menu\"){\r\n        Span(Class: text-muted, Body: \"$@1menu$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1menu$\", Page: @1export_resources,, \"res_type=menu\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"parameters\"){\r\n        Span(Class: text-muted, Body: \"$@1app_params$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1app_params$\", Page: @1export_resources,, \"res_type=parameters\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"languages\"){\r\n        Span(Class: text-muted, Body: \"$@1lang_res$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1lang_res$\", Page: @1export_resources,, \"res_type=languages\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"contracts\"){\r\n        Span(Class: text-muted, Body: \"$@1contracts$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1contracts$\", Page: @1export_resources,, \"res_type=contracts\")\r\n    }\r\n    Span(|,mh-sm)\r\n    If(#res_type#==\"tables\"){\r\n        Span(Class: text-muted, Body: \"$@1tables$\")\r\n    }.Else{\r\n        LinkPage(Body: \"$@1tables$\", Page: @1export_resources,, \"res_type=tables\")\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "pager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#).Where(#pager_where#).Count(records_count)\r\n    \r\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\r\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\r\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\r\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\r\n\r\nIf(#remainder# != 0){\r\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\r\n}.Else{\r\n    SetVar(last_page, #count_div_limit_int#)\r\n}\r\n\r\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\r\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\r\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\r\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\r\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\r\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\r\n\r\nIf(#current_page# < 5){\r\n    If(#last_page# >= 10){\r\n        Range(src_pages, 1, 11)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#) \r\n    }\r\n}.ElseIf(#delta_last_page# < 6){\r\n    If(#range_l_max# > 0){\r\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\r\n    }.Else{\r\n        Range(src_pages, 1, #last_page_plus_one#)\r\n    }\r\n}.Else{\r\n    Range(src_pages, #range_l#, #range_r#)\r\n}\r\n\r\nDiv(){\r\n    Span(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == 1){\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    ForList(src_pages){\r\n        Span(){\r\n            If(#id# == #current_page#){\r\n                Button(Body: #id#, Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n            }.Else{\r\n                Button(Body: #id#, Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n            }\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n    Span(){\r\n        If(#current_page# == #last_page#){\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\r\n        }.Else{\r\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\r\n        }\r\n    }\r\n}.Style(\"div {display:inline-block;}\")",
            "Type": "blocks"
        },
        {
            "Name": "pager_header",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#current_page# > 0){}.Else{\r\n    SetVar(current_page, 1)\r\n}\r\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\r\nSetVar(current_page, #current_page#)",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$@1applications$, Page:@1apps_list, Icon:\"icon-folder\")\r\nMenuItem(Title:$@1ecosystem_parameters$, Page:@1params_list, Icon:\"icon-settings\")\r\nMenuItem(Title:$@1menu$, Page:@1menus_list, Icon:\"icon-list\")\r\nMenuItem(Title:$@1sections$, Page:@1section_list, Icon:\"icon-frame\")\r\nMenuItem(Title:$@1language_resources$, Page:@1app_langres, Icon:\"icon-globe\")\r\nMenuItem(Title:$@1dashboard$, Page:@1admin_index, Icon:\"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "admin_resources",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$@1contracts$, Page:@1app_contracts, Icon:\"icon-briefcase\")\r\nMenuItem(Title:$@1pages$, Page:@1app_pages, Icon:\"icon-screen-desktop\")\r\nMenuItem(Title:$@1blocks$, Page:@1app_blocks, Icon:\"icon-grid\")\r\nMenuItem(Title:$@1tables$, Page:@1app_tables, Icon:\"icon-docs\")\r\nMenuItem(Title:$@1binaries_data$, Page:@1app_binary, Icon:\"icon-layers\")\r\nMenuItem(Title:$@1app_params$, Page:@1app_params, Icon:\"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "admin_index",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetVar(this_page, @1admin_index).(deleters_count,0)\r\nDBFind(@1contracts).Where({name:ItemChangeAppId,ecosystem:1}).Count(changer_count)\r\nDBFind(@1applications,src_apps).Where({deleted:0,ecosystem:#ecosystem_id#}).Order(id).Count(apps_count)\r\nIf(And(GetVar(Restore),GetVar(Table),GetVar(Id))){\r\n    Form(){\r\n        Select(Name:AppId, NameColumn: name, ValueColumn: id, Source: src_apps, Class:mb)\r\n        Div(){\r\n            Button(Class: btn btn-default, Page: #this_page#, PageParams: \"appid=0\", Body: \"$@1cancel$\")\r\n            Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: \"$@1confirm_button$\")\r\n        }\r\n    }\r\n}.ElseIf(GetVar(block)){\r\n    Div(breadcrumb){\r\n        LinkPage(Body:Dashboard,Page:#this_page#)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: Block: #block#)\r\n    }\r\n    Include(Name:#block#)\r\n}.Else{\r\n    DBFind(@1buffer_data).Columns(\"value->app_id\").Where({key:export,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\r\n    If(#Single#==binaries){\r\n        Data(tables, \"Table,Page,Name\"){\r\n            @1binaries,@1app_upload_binary,$@1binaries_data$\r\n        }\r\n    }.ElseIf(#Single#==languages){\r\n        Data(tables, \"Table,Cols,Page,Name\"){\r\n            @1languages,\"id,name,res\",@1langres_add,$@1lang_res$\r\n        }\r\n    }.Else{\r\n        Data(tables, \"Table,Cols,Page,Name\"){\r\n            @1contracts,\"id,app_id,name,active\",editor,$@1contracts$\r\n            @1pages,\"id,app_id,name\",editor,$@1pages$\r\n            @1blocks,\"id,app_id,name\",editor, $@1blocks$\r\n            @1tables,\"id,app_id,name\",@1table_create,$@1tables$\r\n            @1app_params,\"id,app_id,name,value\",@1app_params_edit,$@1app_params$\r\n        }\r\n    }\r\n    SetVar(active_btn,\"btn btn-info\").(create_icon,fa fa-plus-square).(cols,3)\r\n\r\n    If(GetVar(appid)!=\"\"){\r\n        SetVar(where,\"{app_id:#appid#,ecosystem:#ecosystem_id#}\")\r\n    }.Else{\r\n        If(#buffer_value_app_id#>0){\r\n            DBFind(@1applications).Where({id:#buffer_value_app_id#,deleted:0,ecosystem:#ecosystem_id#}).Vars(check)\r\n            If(#check_id# > 0){\r\n                SetVar(appid,#buffer_value_app_id#).(where,\"{app_id:#appid#,ecosystem:#ecosystem_id#}\")\r\n            }.Else{\r\n                SetVar(where,\"{id:{ $gt:0},ecosystem:#ecosystem_id#}\").(appid,1)\r\n            }\r\n        }.Else{\r\n            SetVar(where,\"{id:{ $gt:0},ecosystem:#ecosystem_id#}\").(appid,1)\r\n        }\r\n    }\r\n\r\n    If(#appid#==0){\r\n        SetVar(application_name,trash)\r\n    }.ElseIf(#appid#>0){\r\n        DBFind(@1applications).Where({id:#appid#,ecosystem:#ecosystem_id#}).Vars(application)\r\n    }\r\n    If(And(#appid# == 1,#ecosystem_id# != 1)){\r\n        SetTitle($@1dashboard$: $@1select_application$)\r\n    }.Else{\r\n        SetTitle($@1dashboard$: #application_name#)\r\n    }\r\n    Div(content-wrapper){\r\n        Div(panel panel-default){\r\n            If(GetVar(Single)){\r\n                Div(text-right){\r\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default btn-close fa fa-close)\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-sm-12 btn-group){\r\n                        ForList(src_apps){\r\n                            If(#src_apps_index#==1){\r\n                                If(#appid#==0){\r\n                                    LinkPage(Class: #active_btn# disabled, Body: Span(Class:fa fa-trash))\r\n                                }.Else{\r\n                                    LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=0\", Body: Span(Class:fa fa-trash))\r\n                                }\r\n                            }\r\n                            If(#appid#==#id#){\r\n                                LinkPage(Class: #active_btn# disabled, Body:\"#id#:#name#\")\r\n                            }.Else{\r\n                                LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=#id#\", Body:\"#id#:#name#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Div(panel-body){\r\n                If(And(#appid# == 1,#ecosystem_id# != 1)){\r\n                    Span(Class: text-muted,Body: $@1dashboard_hint$)\r\n                }.Else{\r\n                    SetVar(limit,250)\r\n                    ForList(tables){\r\n                        If(#Table#==@1binaries){\r\n                            DBFind(#Table#, src_table).Limit(#limit#).Order({ id: -1 }).Where(#where#).Count(items_count).Custom(_name){\r\n                                LinkPage(Page: #Page#, PageParams: \"id=#id#,application_id=#appid#\"){#name#}\r\n                            }.Custom(_img){\r\n                                Image(Src: Binary().ById(#id#), Class: preview)\r\n                            }\r\n                        }.ElseIf(#Table#==@1languages){\r\n                            If(GetVar(Search)!=\"\"){\r\n                                SetVar(where,\"{ecosystem:#ecosystem_id#, {$or:[{name:{$like:#Search#}}, {res:{$like:#Search#}}]}}\")\r\n                            }.Else{\r\n                                SetVar(where,\"{ecosystem:#ecosystem_id#}\").(Search,)\r\n                            }\r\n                            DBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where(#where#).Count(items_count)\r\n                        }.Else{\r\n                            DBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where(#where#).Count(items_count)\r\n                        }\r\n                        Div(list-group-item clearfix){\r\n                            If(#Table#==@1languages){\r\n                                Form(){\r\n                                    Div(input-group){\r\n                                        Div(input-group-addon){\r\n                                            LangRes(@1search)\r\n                                        }\r\n                                        Input(Name: Search, Value: #Search#)\r\n                                        Div(input-group-btn){\r\n                                            Button(Class: btn btn-primary fa fa-search, Page: #this_page#, PageParams: \"appid=#appid#,Search=Val(Search),Single=#Single#\")\r\n                                            If(GetVar(Search)!=\"\"){\r\n                                                Button(Class: btn btn-default fa fa-close, Page: #this_page#, PageParams: \"appid=#appid#,Single=#Single#\")\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(h3 pull-left mt-lg){\r\n                                #Name#\r\n                            }\r\n                            If(#appid#>0){\r\n                                Div(pull-right mt-lg){\r\n                                    If(#Table#==@1contracts){\r\n                                        LinkPage(Page: #Page#, PageParams: \"create=contract,appId=#appid#\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1pages){\r\n                                        LinkPage(Page: #Page#, PageParams: \"create=page,appId=#appid#\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1blocks){\r\n                                        LinkPage(Page: #Page#, PageParams: \"create=block,appId=#appid#\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1tables){\r\n                                        LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1app_params){\r\n                                        LinkPage(Page: #Page#, PageParams: \"application_id=#appid#,create=create\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1binaries){\r\n                                        LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }.ElseIf(#Table#==@1languages){\r\n                                        LinkPage(Page: #Page#){\r\n                                            Em(Class: #create_icon#) $@1create_button$ Em(Class: #create_icon#)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row pd){\r\n                                Div(col-sm-12){\r\n                                    If(#Table#==@1binaries){\r\n                                        If(#items_count#>0){\r\n                                            Div(items){\r\n                                                Table(src_table,\"=id,$@1edit_link$=_name,$@1download_link$=data,=_img\")\r\n                                            }\r\n                                        }.Else{\r\n                                            Div(text-muted h4 text-center){\r\n                                                #Name# $@1not_founded$\r\n                                            }\r\n                                        }\r\n                                    }.Else{\r\n                                        SetVar(value,).(res,)\r\n                                        If(#items_count#>0){\r\n                                            Div(cols){\r\n                                                ForList(src_table){\r\n                                                    Div(clearfix item){\r\n                                                        Div(pull-right){\r\n                                                            If(#Table#==@1contracts){\r\n                                                                If(#active#==1){\r\n                                                                    Span(actived,text-success mr-lg)\r\n                                                                }\r\n                                                                LinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")\r\n                                                            }\r\n                                                            If(#Table#==@1pages){\r\n                                                                LinkPage(Class: text-muted fa fa-eye, Page: #name#)\r\n                                                                LinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=page\")\r\n                                                            }\r\n                                                            If(#Table#==@1blocks){\r\n                                                                LinkPage(Class: text-muted fa fa-eye, Page: #this_page#, PageParams:\"block=#name#\")\r\n                                                                LinkPage(Class: text-muted fa fa-cogs, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=block\")\r\n                                                            }\r\n                                                            If(#Table#==@1tables){\r\n                                                                LinkPage(Class: text-muted fa fa-eye, Page: @1table_view, PageParams: \"tabl_id=#id#,table_name=#name#\")\r\n                                                            }\r\n                                                            If(#Table#!=@1languages){\r\n                                                                If(#changer_count#==1){\r\n                                                                    If(#appid#==0){\r\n                                                                        Button(Class: btn-link text-muted fa fa-recycle, Page: #this_page#, PageParams: \"Restore=1,Table=#Table#,Id=#id#\").Popup(30, \"$@1restore_select$\")\r\n                                                                    }.Else{\r\n                                                                        If(#ecosystem_id#==1){\r\n                                                                            Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"$@1remove_confirmation$\", \"$@1confirm_button$\", \"$@1cancel$\")\r\n                                                                        }.Else{\r\n                                                                            Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"$@1remove_confirmation$\", \"$@1confirm_button$\", \"$@1cancel$\")\r\n\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        If(#Table#==@1contracts){\r\n                                                            LinkPage(Page: #Page#, PageParams: \"open=contract,name=#name#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(#Table#==@1pages){\r\n                                                            LinkPage(Page: #Page#, PageParams: \"open=page,name=#name#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(#Table#==@1blocks){\r\n                                                            LinkPage(Page: #Page#, PageParams: \"open=block,name=#name#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(#Table#==@1tables){\r\n                                                            LinkPage(Page: @1table_edit, PageParams: \"tabl_id=#id#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(#Table#==@1app_params){\r\n                                                            LinkPage(Page: #Page#, PageParams: \"id=#id#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(#Table#==@1languages){\r\n                                                            LinkPage(Page: @1langres_edit, PageParams: \"lang_id=#id#,back_page=#this_page#\"){#name#}\r\n                                                        }\r\n                                                        If(`#value#`!=\"\"){\r\n                                                            :Div(text-muted){`#value#`}.Style(max-height:1.5em;overflow:hidden;)\r\n                                                        }.ElseIf(`#res#`!=\"\"){\r\n                                                            :Div(text-muted){`#res#`}\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }.Else{\r\n                                            Div(text-muted h4 text-center){\r\n                                                #Name# $@1not_founded$\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(And(#appid# == 1,#ecosystem_id# != 1)){\r\n            }.Else{\r\n                Div(panel-footer){\r\n                    If(GetVar(Single)){\r\n                        Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default mr, Body: $@1back$)\r\n                    }.Else{\r\n                        Button(Page: #this_page#, PageParams: \"Single=binaries,appid=#appid#\", Class: btn btn-default mr, Body: $@1binaries$)\r\n                        Button(Page: #this_page#, PageParams: \"Single=languages\", Class: btn btn-default, Body: $@1languages$)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .pull-right a {\r\n            margin-right:10px;\r\n        }\r\n        .text-muted {\r\n            color: #909fa7!important;\r\n        }\r\n        .cols {\r\n            -moz-column-count: #cols#;\r\n            -webkit-column-count: #cols#;\r\n            column-count: #cols#;\r\n        }\r\n        .item:hover {\r\n            background-color: #fafafa;\r\n        }\r\n        .items tr:hover {\r\n            background-color: #fafafa;\r\n        }\r\n        .preview {\r\n            height:30px;\r\n        }\r\n        .btn-close {\r\n            background-color: #00000000;\r\n        }\r\n    )\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1binaries$: #application_name#)\r\n        AddToolButton(Title:$@1binary_upload$, Page: @1app_upload_binary, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\r\n\r\n        SetVar(pager_table, @1binaries).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_binary).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_binary)\r\n        SetVar(hideLink, 0)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1binaries, src_binparameters).Limit(#pager_limit#).Count(cnt).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_name){\r\n            LinkPage(Page: @1app_upload_binary, PageParams: \"id=#id#,application_id=#buffer_value_app_id#\", Body: #name#)\r\n        }.Custom(_img){\r\n            Div(pull-right){\r\n                Image(Src: Binary().ById(#id#), Class: preview).Style(height: 40px; widht 40px;)\r\n            }\r\n        }\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    Div(col-md-#width# col-sm-12){\r\n                        If(#cnt#>0){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-12){\r\n                                        Table(src_binparameters,\"$@1name$=_name,$@1download_link$=data,=_img\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1binaries$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_blocks",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1blocks$: #application_name#)\r\n        AddToolButton(Title: $@1button_create$, Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, @1blocks).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_blocks).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_blocks)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_blocks){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=block\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=block\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1blocks$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_contracts",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1contracts$: #application_name#)\r\n        AddToolButton(Title: $@1button_create$, Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, @1contracts).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_contracts).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_contracts)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_contracts){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=contract\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            If(#active#==1){\r\n                                                Span(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\r\n                                            }.Else{\r\n                                                Span(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1contracts$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $1@apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1application$)\r\n    Div(breadcrumb){\r\n        LinkPage($@1applications$, @1apps_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        If(#id# > 0){\r\n            Span(Class: text-muted, Body: $@1edit$)\r\n        }.Else{\r\n            Span(Class: text-muted, Body: $@1new_app$)\r\n        }\r\n    }\r\n    \r\n    Form(){\r\n        If(#id# > 0){\r\n            DBFind(@1applications, src_apps).Columns(\"id,name,conditions,deleted\").Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n            Div(form-group){\r\n                Label($@1name$)\r\n                Input(Name: Name, Disabled: \"true\", Value: #application_name#)\r\n            }\r\n            Div(form-group){\r\n                Label($@1change_conditions$)\r\n                Input(Name: Conditions, Value: #application_conditions#)\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(text-left col-md-6){\r\n                        If(#application_deleted# == 0){\r\n                            Button(Body: $@1delete$, Class: btn btn-danger, Page: @1apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#application_id#,Value=1\")\r\n                        }\r\n                    }\r\n                    Div(text-right col-md-6){\r\n                        Button(Body: $@1save$, Class: btn btn-primary, Page: @1apps_list, Contract: @1EditApplication, Params: \"ApplicationId=#id#\")\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(form-group){\r\n                Label($@1name$)\r\n                Input(Name: Name)\r\n            }\r\n            Div(form-group){\r\n                Label($@1change_conditions$)\r\n                Input(Name: Conditions)\r\n            }\r\n            Div(form-group){\r\n                Div(text-right){\r\n                    Button(Body: $@1save$, Class: btn btn-primary, Page: @1apps_list, Contract: @1NewApplication)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_langres",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle(\"$@1lang_res$\")\r\n    AddToolButton(Title: \"$@1button_create$\", Page: @1langres_add, Icon: icon-plus)\r\n    DBFind(@1languages, src_languages).Where({ecosystem:#ecosystem_id#}).Vars(check)\r\n    If(#check_id# > 0){\r\n        Div(breadcrumb){\r\n            Span(Class: text-muted, Body: \"$@1application_lang_res$\")\r\n        }\r\n\r\n        SetVar(pager_table, @1languages).(pager_where, \"{ecosystem:#ecosystem_id#}\").(pager_page, @1app_langres).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        DBFind(@1languages, src_languages).Limit(#pager_limit#).Where({ecosystem:#ecosystem_id#}).Order({id:-1}).Offset(#pager_offset#).Custom(lang_name){\r\n            LinkPage(Page: @1langres_edit, Class: text-primary h5, Body: \"#name#\", PageParams: \"lang_id=#id#\")\r\n        }\r\n        \r\n        Table(src_languages, \"$@1name$=lang_name,$@1value$=res\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc;\r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr > *:first-child {\r\n            padding-left:20px;\r\n        }\r\n        tr > *:last-child {\r\n            padding-right:15px;\r\n            padding-left:80px;\r\n            text-align:left;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        })\r\n        Div(panel-footer){\r\n            Include(@1pager)\r\n        }\r\n    }.Else{\r\n        Div(breadcrumb){\r\n            Span(Class: text-muted, Body: \"$@1no_lang_res$\")\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_pages",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1pages$ : #application_name#)\r\n        AddToolButton(Title: $@1button_create$, Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\r\n\r\n        SetVar(pager_table, @1pages).(pager_where, {app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).(pager_page, @1app_pages).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_pages)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_pages){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        LinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: @1history, PageParams: \"id=#id#,type=page\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=page\")).Style(margin-right: 15px;)\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1pages$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#},ecosystem:#ecosystem_id#).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1app_params$: #application_name#)\r\n        AddToolButton(Title: $@1button_create$, Page: @1app_params_edit, Icon: icon-plus, PageParams: \"application_id=#application_id#,create=create\")\r\n\r\n        SetVar(pager_table, @1app_params).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_params).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_params)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_appparameters){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5, Body: \"#name#\")\r\n                                    }\r\n                                    Div(col-md-8 text-right){\r\n                                        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1app_params_edit, PageParams: \"id=#id#\"))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1app_params$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(back_page)){}.Else{\r\n    SetVar(back_page, @1app_params)\r\n}\r\nDiv(content-wrapper){\r\n    If(#create# == create){\r\n        SetVar(param_name, \"$@1new_param$\")\r\n    }.Else{\r\n        DBFind(@1app_params, src_params).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"param\")\r\n    }\r\n    \r\n    SetTitle($@1app_param$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1app_params$, @1app_params)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #param_name#)\r\n    }\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Label(\"$@1name$\")\r\n            If(#create# == create){\r\n                Input(Name: name)\r\n            }.Else{\r\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            If(#create# == create){\r\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n            }.Else{\r\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Label($@1change_conditions$)\r\n            If(#create# == create){\r\n                Input(Name: conditions)\r\n            }.Else{\r\n                Input(Name: conditions, Value: #param_conditions#)\r\n            }\r\n        }\r\n        Div(form-group text-right){\r\n            If(#create# == create){\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#application_id#\", Page: #back_page#)\r\n            }.Else{\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: #back_page#)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "app_tables",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id\").Where({key:export, member_id:#key_id#, ecosystem:#ecosystem_id#}).Vars(buffer)\r\nIf(#buffer_value_app_id# > 0){\r\n    DBFind(@1applications, src_app).Where({id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Vars(\"application\")\r\n\r\n    Div(content-wrapper){\r\n        SetTitle($@1tables$ : #application_name#)\r\n        AddToolButton(Title: $@1button_create$, Page: @1table_create, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\r\n\r\n        SetVar(pager_table, @1tables).(pager_where, \"{app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}\").(pager_page, @1app_tables).(pager_limit, 50)\r\n        Include(@1pager_header)\r\n\r\n        SetVar(admin_page, @1app_tables)\r\n        Include(@1admin_link)\r\n\r\n        DBFind(@1tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#})\r\n\r\n        Form(panel panel-primary){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    ForList(src_tables){\r\n                        Div(col-md-#width# col-sm-12){\r\n                            Div(list-group-item){\r\n                                Div(row){\r\n                                    Div(col-md-4){\r\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\r\n                                        LinkPage(Page: @1table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"tabl_id=#id#\")\r\n                                    }\r\n                                    Div(col-md-8){\r\n                                        Div(pull-right){\r\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1table_edit, PageParams: \"tabl_id=#id#\"))\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\r\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer clearfix){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    SetTitle($@1tables$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1apps_select_error$)\r\n    }\r\n}",
            "Menu": "admin_resources",
            "Type": "pages"
        },
        {
            "Name": "app_upload_binary",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1binaries$)\r\n    Div(breadcrumb){\r\n        LinkPage($@1binaries$, @1app_binary)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        If(#id# > 0){\r\n            Span($@1edit$, text-muted)\r\n            DBFind(@1binaries).Columns(name).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(binary)\r\n        }.Else{\r\n            Span($@1button_upload$, text-muted)\r\n        }\r\n    }\r\n    \r\n    Form(){\r\n        Div(form-group){\r\n            Div(text-left){\r\n                Label($@1name$)\r\n            }\r\n            If(#id# > 0){\r\n                Input(Name: name, Disabled: disabled, Value: #binary_name#)\r\n            }.Else{\r\n                Input(Name: name)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(text-left){\r\n                Label($@1file$)\r\n            }\r\n            Input(Name: databin, Type: file)\r\n        }\r\n        Div(form-group text-right){\r\n            Button(Body: $@1button_upload$, Contract: @1UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),ApplicationId=#application_id#,Data=Val(databin),MemberID=#key_id#\", Page: @1app_binary)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "apps_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    If(#deleted# == deleted){\r\n        SetTitle($@1apps_inactive$)\r\n        Div(breadcrumb){\r\n            LinkPage(\"$@1applications$\", @1apps_list)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span(Class: text-muted, Body: \"$@1apps_inactive$\")\r\n        }\r\n        DBFind(@1applications, src_applications).Where({deleted:1,ecosystem:#ecosystem_id#}).Order(\"id\").Count(countvar).Custom(_actions){\r\n            Button(Class: btn btn-link, Page: @1apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#id#\", Body: \"$@1restore$\")\r\n        }\r\n        If(#countvar# > 0) {\r\n            Table(Source: src_applications, Columns: \"$@1name$=name,$@1conditions$=conditions,=_actions\")\r\n        }.Else{\r\n            Div(content-wrapper){\r\n                Span(Class: text-muted, Body: $@1inactive_warning$)\r\n            }\r\n        }\r\n    }.Else{\r\n        SetTitle($@1applications$)\r\n        Div(breadcrumb){\r\n            Span(Class: text-muted, Body: $@1apps_list$)\r\n        }\r\n        AddToolButton(Title: $@1import$, Page: @1import_upload, Icon: icon-cloud-upload)\r\n        AddToolButton(Title: $@1apps_inactive$, Page: @1apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\r\n        AddToolButton(Title: $@1button_create$, Page: @1app_edit, Icon: icon-plus)\r\n\r\n        DBFind(@1buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\r\n        DBFind(@1applications, src_applications).Where({deleted:0,ecosystem:#ecosystem_id#}).Order(\"id\").Custom(_export){\r\n            Button(Class: btn btn-link, Contract: @1ExportNewApp, Params: \"ApplicationId=#id#\", Page: @1export_resources, Body: \"$@1export_app$\")\r\n        }.Custom(custom_name){\r\n            If(#id#==#buffer_value_app_id#){\r\n                Button(Class: btn btn-link, Page: @1app_contracts, Body: #name#)\r\n            }.Else{\r\n                Button(Class: btn btn-link, Contract: @1SelectApp, Params: \"ApplicationId=#id#\", Page: @1app_contracts, Body: #name#)\r\n            }  \r\n        }.Custom(custom_actions){\r\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: @1app_edit, PageParams: \"id=#id#\")\r\n        }\r\n\r\n        Table(Source: src_applications, Columns: \"$@1name$=custom_name,$@1conditions$=conditions,$@1export$=_export,=custom_actions\")\r\n    }\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:15px;\r\n        text-align:right;\r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1tables$)\r\n    Div(breadcrumb){\r\n        Div(){\r\n            LinkPage($@1tables$, @1app_tables)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage($@1edit_table$, @1table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span($@1column_add$, text-muted)\r\n        }\r\n    }\r\n\r\n    Form(panel panel-default){\r\n        Div(panel-body){\r\n            Div(form-group){\r\n                Label($@1column$)\r\n                Input(Name: ColumnName)\r\n            }\r\n            Div(form-group){\r\n                Data(src_type,\"type,name\"){\r\n                    text,\"Text\"\r\n                    number,\"Number\"\r\n                    varchar,\"Varchar\"\r\n                    datetime,\"Date/Time\"\r\n                    money,\"Money\"\r\n                    double,\"Double\"\r\n                    character,\"Character\"\r\n                    json,\"JSON\"\r\n                }\r\n                Label($@1type$)\r\n                Select(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type, Value:\"text\")\r\n            }\r\n            Div(form-group){\r\n                Label($@1update$)\r\n                Input(Name: UpdateColumn, Value: \"true\")\r\n            }\r\n            Div(form-group){\r\n                Label($@1reading$)\r\n                Input(Name: ReadColumn, Value: \"true\")\r\n            }\r\n        }\r\n        Div(panel-footer clearfix text-right){\r\n            Button(Body: $@1column_add$, Contract: @1NewColumn, Class: btn btn-primary, Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "column_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1edit_column$)\r\n    Div(breadcrumb){\r\n        Div(){\r\n            LinkPage($@1tables$, @1app_tables)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage($@1edit_table$, @1table_edit, PageParams:\"tabl_id=#tabl_id#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span($@1edit_column$, text-muted)\r\n        }\r\n    }\r\n\r\n    DBFind(@1tables, src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).Where({id:#tabl_id#,ecosystem:#ecosystem_id#})\r\n    JsonToSource(src_columns, #pre_columns#)\r\n    Form(panel panel-default){\r\n        Div(panel-body){\r\n            ForList(src_columns){\r\n                If(#key# == #name_column#){\r\n                    Div(form-group){\r\n                        Label($@1column$)\r\n                        Input(Name: ColumnName, Disabled: \"true\", Value: #name_column#)\r\n                    }\r\n                    Div(form-group){\r\n                        Label($@1type$)\r\n                        SetVar(col_type, GetColumnType(#pre_name#, #key#))\r\n                        If(#col_type# == character){\r\n                            SetVar(input_type, \"Character\")\r\n                        }\r\n                        If(#col_type# == text){\r\n                            SetVar(input_type, \"Text\")\r\n                        }\r\n                        If(#col_type# == number){\r\n                            SetVar(input_type, \"Number\")\r\n                        }\r\n                        If(#col_type# == money){\r\n                            SetVar(input_type, \"Money\")\r\n                        }\r\n                        If(#col_type# == varchar){\r\n                            SetVar(input_type, \"Varchar\")\r\n                        }\r\n                        If(#col_type# == datetime){\r\n                            SetVar(input_type, \"Date/Time\")\r\n                        }\r\n                        If(#col_type# == double){\r\n                            SetVar(input_type, \"Double\")\r\n                        }\r\n                        If(#col_type# == json){\r\n                            SetVar(input_type, \"JSON\")\r\n                        }\r\n                        If(#col_type# == bytea){\r\n                            SetVar(input_type, \"Binary Data\")\r\n                        }\r\n                        If(#col_type# == uuid){\r\n                            SetVar(input_type, \"UUID\")\r\n                        }\r\n                        Input(Name: Coltype, Disabled: \"true\", Value: #input_type#)\r\n                    }\r\n                        Div(form-group){\r\n                        Label($@1update$)\r\n                        Input(Name: UpdateColumn)\r\n                    }\r\n                    Div(form-group){\r\n                        Label($@1reading$)\r\n                        Input(Name: ReadColumn)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer clearfix text-right){\r\n            Button(Body: $@1save$, Contract: @1EditColumn, Class: btn btn-primary, Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),UpdatePerm=Val(UpdateColumn),ReadPerm=Val(ReadColumn)\")\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#ecosystem_id#==0){\r\n    SetTitle(\"\")\r\n}.Else{\r\n    Div(content-wrapper){\r\n        Div(panel panel-primary){\r\n            Div(list-group-item text-center){\r\n                P(Class: h3 m0 text-bold, Body: $@1default_main$)\r\n            }\r\n            Div(list-group-item){\r\n                Span(Class: h3, Body: $@1default1$)\r\n                Span(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\r\n                Span(Class: h3, Body: $@1default2$)\r\n                Span(Class: h3 text-primary, Body: \" https://genesiskernel.readthedocs.io\")\r\n            }\r\n            Div(panel-footer text-right clearfix){\r\n                Div(pull-left){\r\n                    Button(Body: $@1ecosys_params$, Class: btn btn-default, Page: @1params_list)\r\n                }.Style(margin-right: 20px;)\r\n                Div(pull-left){\r\n                    Button(Body: $@1dashboard$, Class: btn btn-default, Page: @1admin_index)\r\n                }\r\n                Button(Body: $@1import$, Class: btn btn-primary, Page: @1import_upload)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "export_download",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle($@1export$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1payload$)\r\n    }\r\n\r\n    DBFind(Name: @1buffer_data, Source: src_buffer).Columns(\"value->app_name,value->app_id\").Where({key: export,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\r\n    DBFind(@1binaries, src_binaries).Where({name: export, member_id:#key_id#,ecosystem:#ecosystem_id#,app_id:#buffer_value_app_id#}).Custom(app_name){\r\n        Span(#buffer_value_app_name#)\r\n    }\r\n\r\n    Table(Source: src_binaries, \"$@1application$=app_name,=data\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc;\r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr > *:first-child {\r\n            padding-left:20px;\r\n        }\r\n        tr > *:last-child {\r\n            padding-right:20px;\r\n            text-align:right;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        }\r\n    )\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "export_resources",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetVar(pager_limit, 25).(pager_page, @1export_resources)\r\n    If(GetVar(res_type)){\r\n        SetVar(page_params,`{\"res_type\":\"#res_type#\"}`)\r\n    }.Else{\r\n        SetVar(res_type,)\r\n        JsonToSource(src_params, #page_params#)\r\n        ForList(src_params){\r\n            If(#key#==res_type){\r\n                SetVar(res_type,#value#)\r\n            }\r\n        }\r\n    }\r\n    SetTitle($@1application_export$)\r\n    Div(breadcrumb text-muted){\r\n        $@1application_export_select$\r\n    }\r\n    DBFind(@1buffer_data).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where({key: export, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(buffer)\r\n\r\n    Include(@1export_link)\r\n\r\n    If(#buffer_value_app_id# > 0){\r\n        If(#res_type#==\"pages\"){\r\n            SetVar(pager_table, @1pages).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1pages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"blocks\"){\r\n            SetVar(pager_table, @1blocks).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1blocks, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"menu\"){\r\n            SetVar(pager_table, @1menu).(pager_where, \"{id: {$in: [#buffer_value_menu_id#]}}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1menu, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({id: {$in: [#buffer_value_menu_id#]},ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"parameters\"){\r\n            SetVar(pager_table, @1app_params).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1app_params, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"languages\"){\r\n            SetVar(pager_table, @1languages)\r\n            Include(@1pager_header)\r\n            DBFind(@1languages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"contracts\"){\r\n            SetVar(pager_table, @1contracts).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1contracts, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n        If(#res_type#==\"tables\"){\r\n            SetVar(pager_table, @1tables).(pager_where, \"{app_id:#buffer_value_app_id#}\")\r\n            Include(@1pager_header)\r\n            DBFind(@1tables, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where({app_id:#buffer_value_app_id#,ecosystem:#ecosystem_id#}).Custom(_cbox){\r\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\r\n            }.Order(\"id\")\r\n        }\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-9){\r\n            Table(src_pages, \"ID=id,$@1name$=name,=_cbox\")\r\n            If(#pages_count#>#pager_limit#){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n        Div(col-md-3){\r\n            Include(@1export_info)\r\n        }\r\n    }\r\n\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n        padding: 8px 20px !important;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:15px;\r\n        width: 50px;\r\n        text-align:right;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "history",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n\r\n    If(GetVar(type) == page){\r\n        DBFind(@1pages, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\r\n        SetTitle($@1page_history$: #res_name#)\r\n    }\r\n    If(GetVar(type) == block){\r\n        DBFind(@1blocks, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\r\n        SetTitle($@1block_history$: #res_name#)\r\n    }\r\n    If(GetVar(type) == contract){\r\n        DBFind(@1contracts, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\r\n        SetTitle($@1contract_history$: #res_name#)\r\n    }\r\n    If(GetVar(type) == menu){\r\n        DBFind(@1menu, src_res).Where({id:#id#,ecosystem:#ecosystem_id#}).Limit(1).Vars(\"res\")\r\n        SetTitle($@1menu_history$: #res_name#)\r\n    }\r\n    SetVar(admin_page, page_history)\r\n    If(#sort#==1){\r\n        SetVar(sort_name, \"id asc\")\r\n    }.ElseIf(#sort#==2){\r\n        SetVar(sort_name, \"id desc\")\r\n    }.ElseIf(#sort#==3){\r\n        SetVar(sort_name, \"name asc\")\r\n    }.ElseIf(#sort#==4){\r\n        SetVar(sort_name, \"name desc\")\r\n    }.Else{\r\n        SetVar(sort, \"1\")\r\n        SetVar(sort_name, \"id asc\")\r\n    }\r\n\r\n    If(GetVar(type) == page){\r\n        GetHistory(Source: src_history, Name:pages, Id: #id#)\r\n    }\r\n    If(GetVar(type) == block){\r\n        GetHistory(Source: src_history, Name: blocks, Id: #id#)\r\n    }\r\n    If(GetVar(type) == contract){\r\n        GetHistory(Source: src_history, Name: contracts, Id: #id#)\r\n    }\r\n    If(GetVar(type) == menu){\r\n        GetHistory(Source: src_history, Name: menu, Id: #id#)\r\n    }\r\n\r\n\r\n    If(Or(#width#==12,#width#==6,#width#==4)){\r\n    }.Else{\r\n        SetVar(width, \"12\")\r\n    }\r\n\r\n    Form(){\r\n        Div(clearfix){\r\n            Div(pull-right){\r\n                If(#width#==12){\r\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n                If(#width#==6){\r\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n                If(#width#==4){\r\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                ForList(Source: src_history){\r\n                    Div(col-md-#width# col-sm-12){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-1){\r\n                                    Span(Class: h5, Body: \"#src_history_index#\")\r\n                                }\r\n                                Div(col-md-3){\r\n                                    Span(Class: h5, Body: \"#name#\")\r\n                                }\r\n                                Div(col-md-4){\r\n                                    Span(Class: h5, Body: \"#conditions#\")\r\n                                }\r\n                                Div(col-md-4){\r\n                                    Div(pull-right){\r\n                                        Button(Body: Em(Class: fa fa-recycle), Class: btn btn-primary, Page: @1history, PageParams: \"width=#width#,id=#id#,type=#type#\", Contract: @1Restore, Params: \"Id=#id#,IdHistory=#src_history_index#,Type=#type#\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_app",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1buffer_data).Columns(\"id,value->name,value->data\").Where({key:import, member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(import)\r\n    DBFind(@1buffer_data).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where({key:import_info,member_id:#key_id#,ecosystem:#ecosystem_id#}).Vars(info)\r\n\r\n    SetTitle(\"$@1import$ - #info_value_app_name#\")\r\n    Data(data_info, \"DataName,DataCount,DataInfo\"){\r\n        Pages,\"#info_value_pages_count#\",\"#info_value_pages#\"\r\n        Blocks,\"#info_value_blocks_count#\",\"#info_value_blocks#\"\r\n        Menu,\"#info_value_menu_count#\",\"#info_value_menu#\"\r\n        Parameters,\"#info_value_parameters_count#\",\"#info_value_parameters#\"\r\n        Language resources,\"#info_value_languages_count#\",\"#info_value_languages#\"\r\n        Contracts,\"#info_value_contracts_count#\",\"#info_value_contracts#\"\r\n        Tables,\"#info_value_tables_count#\",\"#info_value_tables#\"\r\n    }\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1import_data$)\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        ForList(data_info){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-10 mc-sm text-left){\r\n                        Span(Class: text-bold, Body: \"#DataName#\")\r\n                    }\r\n                    Div(col-md-2 mc-sm text-right){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: text-bold, Body: \"(#DataCount#)\")\r\n                        }.Else{\r\n                            Span(Class: text-muted, Body: \"(0)\")\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-12 mc-sm text-left){\r\n                        If(#DataCount# > 0){\r\n                            Span(Class: h6, Body: \"#DataInfo#\")\r\n                        }.Else{\r\n                            Span(Class: text-muted h6, Body: $@1nothing_selected$)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#import_id# > 0){\r\n            Div(list-group-item text-right){\r\n                Button(Body: $@1import$, Class: btn btn-primary, Page: @1apps_list).CompositeContract(@1Import, \"#import_value_data#\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "import_upload",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1import$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1payload_select$)\r\n    }\r\n    If(#ecosystem_id#>1){\r\n        AddToolButton(Title: $@1platform_apps_install$, Page: @1platform_apps, Icon: icon-cloud-upload)\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(list-group-item){\r\n            Input(Name: input_file, Type: file)\r\n        }\r\n        Div(list-group-item text-right){\r\n            Button(Body: $@1load$, Class: btn btn-primary, Contract: @1ImportUpload, Page: @1import_app)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(name)){}.Else{\r\n    SetVar(name,)\r\n}\r\nDiv(content-wrapper){\r\n    SetTitle($@1lang_res$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1lang_res$, @1app_langres)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $@1button_create$)\r\n    }\r\n\r\n    Form(panel panel-default){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Label($@1name$)\r\n                    Input(Name:Name, Value:#name#)\r\n                }\r\n            }\r\n            Div(row text-muted){\r\n                Div(col-md-1 mt-lg){\r\n                    Label(){$@1localization$}\r\n                }\r\n                Div(col-md-10 mt-lg){\r\n                    Label(){$@1value$}\r\n                }\r\n                Div(col-md-1 mt-lg){\r\n                    Label(){$@1action$}\r\n                }\r\n            }\r\n            If(GetVar(cs)==\"\"){\r\n                SetVar(cs,0)\r\n            }\r\n            If(#del# == 1){\r\n                SetVar(cs,Calculate(#cs# - 1))\r\n            }.Else{\r\n                SetVar(cs,Calculate(#cs# + 1))\r\n            }\r\n            Range(params_range, 0, #cs#)\r\n            ForList(Source: params_range){\r\n                Div(row mt-sm){\r\n                    Div(col-md-1){\r\n                        Input(Name:LocaleArr)\r\n                    }.Style(input {padding: 6px;text-align:center;})\r\n                    Div(col-md-10){\r\n                        Input(Name:ValueArr)\r\n                    }\r\n                    Div(col-md-1){\r\n                        If(And(#cs#==#params_range_index#,#cs#>1)){\r\n                            Button(Class:fa fa-trash btn btn-default, PageParams: \"cs=#cs#,del=1\", Page: @1langres_add)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    LinkPage(Body:$@1locale_add$, Page: @1langres_add, PageParams:\"cs=#cs#\")\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: $@1save$, Class: btn btn-primary, Contract: @1NewLangJoint, Page: @1app_langres)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "langres_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetVar(this_page,\"@1langres_edit\")\r\nIf(GetVar(back_page)==\"\"){\r\n    SetVar(back_page,\"@1app_langres\")\r\n}\r\nDiv(content-wrapper){\r\n    SetTitle($@1lang_res$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1lang_res$, @1app_langres)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $@1edit$)\r\n    }\r\n    \r\n    Form(panel panel-default){\r\n        Div(panel-body){\r\n            DBFind(@1languages, src_leng).Vars(pre).Where({id:#lang_id#,ecosystem:#ecosystem_id#})\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Label($@1name$)\r\n                    Input(Name: LangName, Disabled: \"true\", Value: #pre_name#)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-1 mt-lg){\r\n                    Label(Class: text-muted, Body: $@1localization$)\r\n                }\r\n                Div(col-md-10 mt-lg){\r\n                    Label(Class: text-muted, Body: $@1value$)\r\n                }\r\n                Div(col-md-1 mt-lg){\r\n                    Label(Class: text-muted, Body: $@1action$)\r\n                }\r\n            }\r\n\r\n            JsonToSource(pv, #pre_res#)\r\n            ForList(Source: pv, Index:s_ind){\r\n                SetVar(max_sec, #s_ind#)\r\n            }\r\n            If(GetVar(cs)==\"\"){\r\n                SetVar(cs, #max_sec#)\r\n            }\r\n            If(Or(#del_flag#==1,#del_data#>0)){\r\n                SetVar(cs, Calculate(Exp:#cs#-1, Type: int))\r\n            }\r\n            \r\n            SetVar(next_sec, Calculate(Exp:#cs#+1, Type: int))\r\n            SetVar(data_sec, Calculate(Exp:#cs#-#max_sec#, Type: int))\r\n\r\n            ForList(Source: pv, Index:s_ind){\r\n                If(#s_ind#>#cs#){\r\n                }.Else{\r\n                    Div(row){\r\n                        Div(col-md-1 mt-sm){\r\n                            Input(Name: LocaleArr, Value: `#key#`)\r\n                        }.Style(input {padding: 6px;text-align:center;})\r\n                        Div(col-md-10 mt-sm){\r\n                            Input(Name: ValueArr, Value: `#value#`)\r\n                        }\r\n                        Div(col-md-1 mt-sm){\r\n                            If(And(#s_ind#>1,#s_ind#==#cs#)){\r\n                                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_data=#s_ind#\", Page: #this_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Range(params_range, #max_sec#, #cs#)\r\n            ForList(Source: params_range, Index:s_ind){\r\n                Div(row){\r\n                    Div(col-md-1 mt-sm){\r\n                        Input(Name:LocaleArr)\r\n                    }.Style(input {padding: 6px;text-align:center;})\r\n                    Div(col-md-10 mt-sm){\r\n                        Input(Name:ValueArr)\r\n                    }\r\n                    Div(col-md-1 mt-sm){\r\n                        If(#s_ind#==#data_sec#){\r\n                            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_flag=1\", Page: #this_page#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-12 mt-lg){\r\n                    LinkPage(Body: $@1locale_add$, Page: @1langres_edit, PageParams: \"lang_id=#lang_id#,cs=#next_sec#\")\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: $@1save$, Class: btn btn-primary, Contract: @1EditLangJoint, Params: \"Id=#lang_id#\", Page: #back_page#)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "menus_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle($@1menu$)\r\n    AddToolButton(Title: $@1button_create$, Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1menu_section$)\r\n    }\r\n\r\n    DBFind(@1menu, src_menus).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"id\").Custom(action){\r\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\r\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\r\n    }\r\n\r\n    Table(src_menus, \"$@1name$=name,$@1titleb$=title,$@1conditions$=conditions,=action\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    If(#stylesheet# == stylesheet){\r\n        DBFind(@1parameters, src_params).Where({name: #stylesheet#,ecosystem:#ecosystem_id#}).Vars(\"param\")\r\n    }.Else{\r\n        If(#id#>0){\r\n            DBFind(@1parameters, src_params).Where({id:#id#,ecosystem:#ecosystem_id#}).Vars(\"param\")\r\n        }.Else{\r\n            SetVar(param_name, $@1new_parameter$)\r\n        }\r\n    }\r\n\r\n    SetTitle($@1ecosys_params$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1ecosys_params$, @1params_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #param_name#)\r\n    }\r\n    \r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1name$)\r\n            If(#param_id#>0){\r\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\r\n            }.Else{\r\n                Input(Name: name)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            If(#param_id#>0){\r\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\r\n            }.Else{\r\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Label($@1change_conditions$)\r\n            If(#param_id#>0){\r\n                Input(Name: conditions, Value: #param_conditions#)\r\n            }.Else{\r\n                Input(Name: conditions)\r\n            }\r\n        }\r\n        Div(form-group text-right){\r\n            If(#param_id#>0){\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\", Page: @1params_list)\r\n            }.Else{\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\", Page: @1params_list)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "params_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle($@1ecosys_params$)\r\n    AddToolButton(Title: $@1style_manage$, Page: @1params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\r\n    AddToolButton(Title: $@1button_create$, Page: @1params_edit, Icon: icon-plus)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1sysparams_section$)\r\n    }\r\n\r\n    DBFind(@1parameters, src_appparameters).Where({ecosystem:#ecosystem_id#}).Order(\"id\").Custom(custom_actions){\r\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1params_edit, PageParams: \"id=#id#\")\r\n    }\r\n\r\n    Table(src_appparameters, \"$@1name$=name,$@1value$=value,$@1conditions$=conditions,=custom_actions\").Style(\r\n        tbody > tr:nth-of-type(odd) {\r\n            background-color: #fafbfc;\r\n        }\r\n        tbody > tr > td {\r\n            word-break: break-all;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            color: #666;\r\n            border-top: 1px solid #eee;\r\n            vertical-align: middle;\r\n        }\r\n        tr > *:first-child {\r\n            padding-left:20px;\r\n        }\r\n        tr > *:last-child {\r\n            padding-right:30px;\r\n            text-align:right;\r\n            width: 100px;\r\n        }\r\n        thead {\r\n            background-color: #eee;\r\n        }\r\n    )\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "platform_apps",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle($@1platform_apps$)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1platform_section$)\r\n    }\r\n\r\n    Data(src_applications, \"id,name\"){\r\n        1,System\r\n        2,Basic\r\n    }.Custom(_actions){\r\n        Button(Class: btn btn-link, Page: @1platform_apps, Contract: @1PlatformAppsInstall, Params: \"Name=#name#\", Body: $@1install$)\r\n    }\r\n\r\n    Table(Source: src_applications, Columns: \"ID=id,$@1name$=name,=_actions\")\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:15px;\r\n        text-align:right;\r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "properties_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\r\n    SetTitle($@1edit_properties$)\r\n    Div(breadcrumb){\r\n        Div(){\r\n            If(#type# == page){\r\n                LinkPage($@1pages$, @1app_pages)\r\n                Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n                Span($@1edit_page$, text-muted)\r\n                DBFind(Name: @1pages, Source: src_page).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\r\n                DBFind(@1menu, src_menus).Where({\"ecosystem\":#ecosystem_id#})\r\n            }\r\n            If(#type# == contract){\r\n                DBFind(Name: @1contracts, Source: src_contract).Columns(\"id,name,value,wallet_id,token_id,active,conditions,app_id\").Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\r\n                LinkPage($@1contracts$, @1app_contracts)\r\n                Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n                Span($@1edit_contract$, text-muted)\r\n            }\r\n            If(#type# == block){\r\n                LinkPage($@1blocks$, @1app_blocks)\r\n                Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n                Span($@1edit_block$, text-muted)\r\n                DBFind(Name: @1blocks, Source: src_block).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\r\n            }\r\n            If(#type# == menu){\r\n                LinkPage($@1menu$, @1menus_list)\r\n                Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n                Span($@1edit_menu$, text-muted)\r\n                DBFind(Name: @1menu, Source: src_menu).Where({\"id\":#edit_property_id#,\"ecosystem\":#ecosystem_id#}).Vars(item)\r\n            }\r\n        }\r\n    }\r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1name$)\r\n            Input(Name: Name, Value: #item_name#, Disabled: \"true\")\r\n        }\r\n        If(#type# == page){\r\n            Div(form-group){\r\n                Label($@1menu$)\r\n                Select(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)\r\n            }\r\n            Div(form-group){\r\n                Label($@1conditions$)\r\n                Input(Name: Conditions, Value: #item_conditions#)\r\n            }\r\n            Div(form-group text-right){\r\n                Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_pages, Contract: @1EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n            }\r\n        }\r\n        If(#type# == contract){\r\n            Div(form-group){\r\n                Label($@1conditions$)\r\n                Input(Name: Conditions, Value: #item_conditions#)\r\n            }\r\n            Div(form-group){\r\n                Label($@1wallet$)\r\n                Div(row){\r\n                    Div(col-md-10){\r\n                        SetVar(address_item_wallet_id, Address(#item_wallet_id#))\r\n                        Input(Name: Wallet,Value: #address_item_wallet_id#)\r\n                    }\r\n                    Div(col-md-2){\r\n                        If(#item_active# == 0){\r\n                            Button(Body: $@1bind$, Class: btn btn-primary btn-block, Contract: @1ActivateContract, Params: \"Id=#edit_property_id#\", Page: @1app_contracts)\r\n                        }.Else{\r\n                            Button(Body: $@1unbind$, Class: btn btn-primary btn-block, Contract: @1DeactivateContract, Params: \"Id=#edit_property_id#\", Page: @1properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group text-right){\r\n                Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_contracts, Contract: @1EditContract, Params: \"Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\r\n            }\r\n        }\r\n        If(#type# == block){\r\n            Div(form-group){\r\n                Label($@1conditions$)\r\n                Input(Name: Conditions, Value: #item_conditions#)\r\n            }\r\n            Div(form-group text-right){\r\n                Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_blocks, Contract: @1EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\r\n            }\r\n        }\r\n        If(#type# == menu){\r\n            Div(form-group){\r\n                Label($@1menu_title$)\r\n                Input(Name: Title, Value: #item_title#)\r\n            }\r\n            Div(form-group){\r\n                Label($@1conditions$)\r\n                Input(Name: Conditions, Value: #item_conditions#)\r\n            }\r\n            Div(form-group text-right){\r\n                Button(Body: $@1save$, Class: btn btn-primary, Page: @1menus_list, Contract: @1EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_access",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1sections).Where({ecosystem:#ecosystem_id#}).WhereId(#id#).Vars(section)\r\nDiv(content-wrapper){\r\n    SetTitle($@1section_access_rights$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1sections$, @1section_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #section_title#)\r\n    }\r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1sections_roles_access$)\r\n            DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"id,role_name\").Order(id)\r\n            Div(input-group mb-sm){\r\n                Select(Name: access_rid, Source:src_roles, NameColumn:role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn btn-primary fa fa-plus, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=Val(access_rid),operation=add\")\r\n                }\r\n            }\r\n            DBFind(@1sections).Where({ecosystem:#ecosystem_id#, id:#section_id#}).Columns(\"roles_access\").Vars(json)\r\n                If(#json_roles_access#==\"[]\"){\r\n                    Span(Body: $@1available_sections$, Class: m0 text-muted)\r\n                }.Else{\r\n                  DBFind(@1roles,src_roles_access).Where({ecosystem:#ecosystem_id#, id:{\"$in\":#json_roles_access#}}).Columns(\"id,role_name\")\r\n                    ForList(src_roles_access){\r\n                        If(#role_id#==1){\r\n                            Button(Class: btn btn-info mr-sm mb-sm, Page: @1section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\r\n                        }.Else{\r\n                            Button(Class: btn btn-default mr-sm mb-sm, Page: @1section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=#id#,operation=remove\", Body: Span(Class: fa fa-remove) #role_name#)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1section_add$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1sections$, @1section_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $@1new_section$)\r\n    }\r\n    \r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1title$)\r\n            Input(Name: title)\r\n        }\r\n        Div(form-group){\r\n            Data(src_status, \"name,value\",\r\n                $@1hidden_section$,0\r\n                $@1regular_section$,1\r\n                $@1main_section$,2\r\n            )\r\n            Label($@1status$)\r\n            Select(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\r\n            Span(Body: $@1main_section_warning$, Class: m0 text-muted)\r\n        }\r\n        Div(form-group){\r\n            Label($@1link$)\r\n            Input(Name: urlname)\r\n        }\r\n        Div(form-group){\r\n            Label($@1section_main_page$)\r\n            Input(Name: page)\r\n        }\r\n        Div(form-group){\r\n            Button(Class: btn btn-primary, Body: $@1save$, Contract: @1NewSection, Page: @1section_list)\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(@1sections).Where({\"ecosystem\":#ecosystem_id#}).WhereId(#id#).Vars(section)\r\nDiv(content-wrapper){\r\n    SetTitle($@1section_edit$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($@1sections$, @1section_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #section_title#)\r\n    }\r\n    \r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1title$)\r\n            Input(Name: title, Value: #section_title#)\r\n        }\r\n        Div(form-group){\r\n            Data(src_status, \"name,value\",\r\n                $@1hidden_section$,0\r\n                $@1regular_section$,1\r\n                $@1main_section$,2\r\n            )\r\n            Label($@1status$)\r\n            If(#section_status#==2){\r\n                Input(Name: placeholder,Value: \"$@1main_section$\", Disabled: \"true\")\r\n                Span(Body: $@1main_section_warning$, Class: m0 text-muted)\r\n            }.Else{\r\n                Select(Name: status, Value: #section_status#, Source: src_status, NameColumn: \"name\", ValueColumn: \"value\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Label($@1link$)\r\n            Input(Name: urlname, Value: #section_urlname#)\r\n        }\r\n        Div(form-group){\r\n            Label($@1section_main_page$)\r\n            Input(Name: page, Value: #section_page#)\r\n        }\r\n        Div(form-group){\r\n            If(#section_status#==2){\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1EditSection, Page: @1section_list, Params: \"id=#section_id#, status=#section_status#\")\r\n            }.Else{\r\n                Button(Class: btn btn-primary, Body: $@1save$, Contract: @1EditSection, Page: @1section_list, Params: \"id=#section_id#\")\r\n            }\r\n            \r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "section_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\r\n    SetTitle($@1sections$)\r\n    AddToolButton(Title: $@1button_create$, Page: @1section_add, Icon: icon-plus)\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $@1sections_manage_page$)\r\n    }\r\n\r\n    DBFind(@1sections, src_sections).Where({ecosystem:#ecosystem_id#}).Limit(250).Order(\"id\").Custom(custom_status){\r\n        If(#status# == 0){\r\n            $@1hidden_section$\r\n        }\r\n        If(#status# == 1){\r\n            $@1regular_section$\r\n        }\r\n        If(#status# == 2){\r\n            $@1main_section$\r\n        }\r\n    }.Custom(custom_order){\r\n        Button(Body: Em(Class: fa fa-arrow-down), Class: btn btn-link, Page: @1section_list, Contract: @1SectionLevelDown, Params: \"id=#id#\")\r\n        Button(Body: Em(Class: fa fa-arrow-up), Class: btn btn-link, Page: @1section_list, Contract: @1SectionLevelUp, Params: \"id=#id#\")\r\n    }.Custom(custom_action){\r\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1section_access, PageParams: \"id=#id#\")).Style(margin-right: 20px;)\r\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: @1section_edit, PageParams: \"id=#id#\"))\r\n    }\r\n    \r\n    Table(src_sections, \"$@1name$=name,$@1title$=title,$@1link$=urlname,$@1section_page$=page,$@1status$=custom_status,=custom_order,=custom_action\").Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc; \r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr  > *:first-child {\r\n        padding-left:20px;\r\n    }\r\n    tr  > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right; \r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    })\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_create",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1table_create$)\r\n    Div(breadcrumb){\r\n        Div(){\r\n            LinkPage($@1tables$, @1app_tables)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span($@1create$, text-muted)\r\n        }\r\n    }\r\n\r\n    Data(src_type,\"type,name\"){\r\n        text,\"Text\"\r\n        number,\"Number\"\r\n        varchar,\"Varchar\"\r\n        datetime,\"Date/Time\"\r\n        money,\"Money\"\r\n        double,\"Double\"\r\n        character,\"Character\"\r\n        json,\"JSON\"\r\n    }\r\n    Form(){\r\n        Div(panel panel-default){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    Div(col-md-12){\r\n                        Label($@1name$)\r\n                        Input(Name:Name)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-4 mt-lg){\r\n                        Label(Class: text-muted, Body: $@1columns$)\r\n                        Input(Name:disinp, Disabled: true, Value: id)\r\n                    }\r\n                    Div(col-md-7 mt-lg){\r\n                        Label(Class: text-muted, Body: $@1type$)\r\n                        Input(Name: disinp, Disabled: true, Value: Number)\r\n                    }\r\n                    Div(col-md-1 mt-lg){\r\n                        Label(Class: text-muted, Body: $@1actions$)\r\n                    }\r\n                }\r\n                If(GetVar(cs)==\"\"){\r\n                    SetVar(cs, Calculate( Exp: 0, Type: int))\r\n                }\r\n                If(#del# == 1){\r\n                    SetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\r\n                }.Else{\r\n                    SetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\r\n                }\r\n                Range(params_range, 0, #cs#)\r\n                ForList(Source: params_range){\r\n                    Div(row){\r\n                        Div(col-md-4 mt-sm){\r\n                            Input(Name:ColumnsArr)\r\n                        }\r\n                        Div(col-md-7 mt-sm){\r\n                            Select(Name: TypesArr, Source: src_type, NameColumn: name, ValueColumn: type)\r\n                        }\r\n                        Div(col-md-1 mt-sm){\r\n                            If(And(#cs#==#params_range_index#, #cs# > 1)){\r\n                                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: @1table_create)\r\n                            }\r\n                        }\r\n                    }\r\n                }            \r\n            }\r\n            Div(panel-footer text-right){\r\n                Button(Body: $@1column_add$, Class: btn btn-primary, Page: @1table_create, PageParams: \"cs=#cs#,application_id=#application_id#\")\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6){\r\n                Div(panel panel-default){\r\n                    Div(panel-heading, Body: $@1write_permissions$)\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Label($@1insert$)\r\n                            Input(Name: InsertPerm, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1update$)\r\n                            Input(Name: UpdatePerm, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1new_column$)\r\n                            Input(Name: NewColumnPerm, Value: ContractConditions(\"MainCondition\"))\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1reading$)\r\n                            Input(Name: ReadPerm, Value: \"true\")\r\n                        }\r\n                    }\r\n                    Div(panel-footer  text-right){\r\n                        Button(Body: $@1save$, Class: btn btn-primary, Contract: @1NewTableJoint, Page: @1app_tables, Params: \"ApplicationId=#application_id#\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1tables).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column,permissions->read\").Vars(pre).Where({id:#tabl_id#,ecosystem:#ecosystem_id#})\r\n    \r\n    SetTitle($@1tables$)\r\n    Div(breadcrumb){\r\n        Div(){\r\n            LinkPage($@1tables$, @1app_tables)\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            LinkPage(#pre_name#, @1table_view,, \"tabl_id=#tabl_id#\")\r\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n            Span($@1edit$, text-muted)\r\n        }\r\n    }\r\n\r\n    Form(){\r\n        Div(panel panel-default){\r\n            Div(panel-body){\r\n                Div(row){\r\n                    Div(col-md-3 h4){\r\n                        Label($@1name$)\r\n                    }\r\n                    Div(col-md-2 h4){\r\n                        Label($@1type$)\r\n                    }\r\n                    Div(col-md-5 h4){\r\n                        Label($@1conditions$)\r\n                    }\r\n                    Div(col-md-2 h4 text-right){\r\n                    }\r\n                }\r\n                JsonToSource(src_columns, #pre_columns#)\r\n                ForList(src_columns){\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-3 h5){\r\n                                Span(#key#)\r\n                            }\r\n                            Div(col-md-2 h5){\r\n                                SetVar(col_type,GetColumnType(#pre_name#, #key#))\r\n                                If(#col_type# == text){\r\n                                    Span(\"Text\")\r\n                                }\r\n                                If(#col_type# == number){\r\n                                    Span(\"Number\")\r\n                                }\r\n                                If(#col_type# == money){\r\n                                    Span(\"Money\")\r\n                                }\r\n                                If(#col_type# == varchar){\r\n                                    Span(\"Varchar\")\r\n                                }\r\n                                If(#col_type# == datetime){\r\n                                    Span(\"Date/Time\")\r\n                                }\r\n                                If(#col_type# == double){\r\n                                    Span(\"Double\")\r\n                                }\r\n                                If(#col_type# == character){\r\n                                    Span(\"Character\")\r\n                                }\r\n                                If(#col_type# == json){\r\n                                    Span(\"JSON\")\r\n                                }\r\n                                If(#col_type# == bytea){\r\n                                    Span(\"Binary Data\")\r\n                                }\r\n                                If(#col_type# == uuid){\r\n                                    Span(\"UUID\")\r\n                                }\r\n                            }\r\n                            Div(col-md-5 h5){\r\n                                Span(`#value#`)\r\n                            }\r\n                            Div(col-md-2 text-right){\r\n                                Button(Body: $@1edit$, Class: btn btn-primary, Page: @1column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(panel-footer text-right){\r\n                Button(Body: $@1column_add$, Class: btn btn-primary, Page: @1column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6){\r\n                Div(panel panel-default){\r\n                    Div(panel-heading){$@1write_permissions$}\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Label($@1insert$)\r\n                            Input(Name: InsertPerm, Type: text, Value: #pre_permissions_insert#)\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1update$)\r\n                            Input(Name: UpdatePerm, Type: text, Value: #pre_permissions_update#)\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1new_column$)\r\n                            Input(Name: NewColumnPerm, Type: text, Value: #pre_permissions_new_column#)\r\n                        }\r\n                        Div(form-group){\r\n                            Label($@1reading$)\r\n                            Input(Name: ReadPerm, Type: text, Value: #pre_permissions_read#)\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        Button(Body: $@1save$, Class: btn btn-primary, Contract: @1EditTable, Page: @1app_tables, Params: \"Name=#pre_name#\")\r\n                    }\r\n                }\r\n            }\r\n            Div(col-md-6){\r\n                Div(panel panel-default){\r\n                    Div(panel-heading){$@1conditions_for_change$}\r\n                    Div(panel-body){\r\n                        Div(form-group){\r\n                            Input(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "table_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1tables).Where({id:#tabl_id#,ecosystem:#ecosystem_id#}).Columns(\"id,name\").Vars(pre)\r\n\r\n    SetTitle($@1tables$)\r\n    Div(breadcrumb){\r\n        LinkPage($@1tables$, @1app_tables)\r\n        Span(/,mh)\r\n        Span(#pre_name#, text-muted)\r\n        Span(/,mh)\r\n        LinkPage(Body:$@1edit$, Page: @1table_edit, PageParams: \"tabl_id=#tabl_id#\")\r\n    }\r\n\r\n    DBFind(#pre_name#).Count(count)\r\n    If(#page#>0){\r\n        SetVar(prev_page,Calculate(#page#-1)\r\n    }.Else{\r\n        SetVar(page,0).(prev_page,0)\r\n    }\r\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\r\n    If(#count#>Calculate(#off#+#per_page#)){\r\n        SetVar(next_page,Calculate(#page#+1)\r\n    }\r\n    Div(button-group){\r\n        If(#page#>0){\r\n            Button(Body:\"1\", Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=0\")\r\n        }.Else{\r\n            Button(Body:\"1\", Class:btn btn-default disabled)\r\n        }\r\n        If(#page#>1){\r\n            Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#prev_page#\")\r\n        }\r\n        If(And(#page#>0,#page#<#last_page#)){\r\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\r\n        }\r\n        If(#next_page#<#last_page#){\r\n            Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#next_page#\")\r\n        }\r\n        If(#page#<#last_page#){\r\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page: @1table_view, PageParams: \"tabl_id=#tabl_id#,page=#last_page#\")\r\n        }.ElseIf(#last_page#>0){\r\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\r\n        }\r\n    }\r\n    Div(panel panel-default){\r\n        Div(panel-body){\r\n            Div(table-responsive){\r\n                DBFind(#pre_name#, src_mem).Offset(#off#).Order(id)\r\n                Table(src_mem)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ActivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ActivateContract {\r\n    data {\r\n        Id int\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        $cur = DBFind(\"@1contracts\").Columns(\"id,conditions,active,wallet_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\r\n        if !$cur {\r\n            error Sprintf(LangRes(\"@1template_contract_not_exist\", $Lang), $Id)\r\n        }\r\n        if Int($cur[\"active\"]) == 1 {\r\n            error Sprintf(LangRes(\"@1template_contract_already_activated\", $Lang), $Id)\r\n        }\r\n        Eval($cur[\"conditions\"])\r\n        if $key_id != Int($cur[\"wallet_id\"]) {\r\n            error Sprintf(LangRes(\"@1template_wallet_cannot_activate_contract\", $Lang), $key_id)\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"@1contracts\", $Id, {\"active\": 1})\r\n        Activate($Id, $ecosystem_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendMenu {\r\n    data {\r\n        Id     int\r\n        Value      string\r\n    }\r\n    conditions {\r\n        ConditionById(\"menu\", false)\r\n    }\r\n    action {\r\n        var row map\r\n        row = DBFind(\"@1menu\").Columns(\"value\").Where({id: $Id, ecosystem: $ecosystem_id})Row()\r\n        var val string\r\n        val = row[\"value\"] + \"\\r\\n\" + $Value\r\n        DBUpdate(\"@1menu\", $Id, {\"value\": val})\r\n\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "AppendPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract AppendPage {\r\n    data {\r\n        Id         int\r\n        Value      string\r\n    }\r\n    conditions {\r\n        RowConditions(\"@1pages\", $Id, false)\r\n    }\r\n    action {\r\n        var value string\r\n        var row map\r\n        row = DBFind(\"@1pages\").Columns(\"value\").Where({id: $Id, ecosystem: $ecosystem_id})Row()\r\n        value = row[\"value\"]\r\n        if Contains(value, \"PageEnd:\") {\r\n            value = Replace(value, \"PageEnd:\", $Value) + \"\\r\\nPageEnd:\"\r\n        } else {\r\n            value = value + \"\\r\\n\" + $Value\r\n        }\r\n        DBUpdate(\"@1pages\", $Id, {\"value\":  value })\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CallDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CallDelayedContract {\r\n    data {\r\n        Id int\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        var rows array\r\n        rows = DBFind(\"@1delayed_contracts\").Where({id: $Id, deleted: \"false\"})\r\n\r\n        if !Len(rows) {\r\n            error Sprintf(LangRes(\"@1template_delayed_contract_not_exist\", $Lang), $Id)\r\n        }\r\n        $cur = rows[0]\r\n\r\n        if $key_id != Int($cur[\"key_id\"]) {\r\n            error LangRes(\"@1access_denied\", $Lang)\r\n        }\r\n\r\n        if $block < Int($cur[\"block_id\"]) {\r\n            error Sprintf(LangRes(\"@1template_delayed_contract_error\", $Lang), $Id, $cur[\"block_id\"], $block)\r\n        }\r\n    }\r\n    action {\r\n        var limit, counter, block_id int\r\n\r\n        limit = Int($cur[\"limit\"])\r\n        counter = Int($cur[\"counter\"]) + 1\r\n        block_id = $block\r\n\r\n        if limit == 0 || limit > counter {\r\n            block_id = block_id + Int($cur[\"every_block\"])\r\n        }\r\n        DBUpdate(\"@1delayed_contracts\", $Id, {\"counter\": counter, \"block_id\": block_id})\r\n\r\n        var params map\r\n        CallContract($cur[\"contract\"], params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "CheckNodesBan",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CheckNodesBan {\r\n    action {\r\n        UpdateNodesBan($block_time)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeactivateContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DeactivateContract {\r\n    data {\r\n        Id int\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        $cur = DBFind(\"@1contracts\").Columns(\"id,conditions,active,wallet_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\r\n        if !$cur {\r\n            error Sprintf(LangRes(\"@1template_contract_not_exist\", $Lang), $Id)\r\n        }\r\n        if Int($cur[\"active\"]) == 0 {\r\n            error Sprintf(LangRes(\"@1template_contract_already_deactivated\", $Lang), $Id)\r\n        }\r\n        Eval($cur[\"conditions\"])\r\n        if $key_id != Int($cur[\"wallet_id\"]) {\r\n            error Sprintf(LangRes(\"@1template_wallet_cannot_deactivate_contract\", $Lang), $key_id)\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"@1contracts\", $Id, {\"active\": 0})\r\n        Deactivate($Id, $ecosystem_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\r\n    data {\r\n        ApplicationId int\r\n        Value int \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1applications\").Columns(\"id,ecosystem\").Where({id: $ApplicationId,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n\r\n        if $Value < 0 || $Value > 1 {\r\n            error LangRes(\"@1value_incorrect\", $Lang)\r\n        }\r\n        RowConditions(\"@1applications\", $ApplicationId, false)\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1applications\", $ApplicationId, {\"deleted\": $Value})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1app_params\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n\r\n        RowConditions(\"@1app_params\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1app_params\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\r\n    data {\r\n        ApplicationId int\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && false\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1applications\").Columns(\"id,ecosystem\").Where({id: $ApplicationId,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n        \r\n        RowConditions(\"@1applications\", $ApplicationId, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1applications\", $ApplicationId, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlock {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1blocks\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n        RowConditions(\"@1blocks\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1blocks\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\r\n    data {\r\n        TableName string\r\n        Name string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1tables\").Columns(\"name,ecosystem\").Where({name: $TableName,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n        var permissions map\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        $Permissions = permissions\r\n        ColumnCondition($TableName, $Name, \"\", JSONEncode($Permissions))\r\n    }\r\n\r\n    action {\r\n        PermColumn($TableName, $Name, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditContract {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n        WalletId string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$WalletId\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"@1contracts\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $cur = DBFind(\"@1contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\r\n        if !$cur {\r\n            error Sprintf(LangRes(\"@1template_contract_not_exist\", $Lang), $Id)\r\n        }\r\n        if $Value {\r\n            ValidateEditContractNewValue($Value, $cur[\"value\"])\r\n        }\r\n        if $WalletId != \"\" {\r\n            $recipient = AddressToId($WalletId)\r\n            if $recipient == 0 {\r\n                error Sprintf(LangRes(\"@1template_new_owner_invalid\", $Lang), $WalletId)\r\n            }\r\n            if Int($cur[\"active\"]) == 1 {\r\n                error LangRes(\"@1contract_must_deactivated\", $Lang)\r\n            }\r\n        } else {\r\n            $recipient = Int($cur[\"wallet_id\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        UpdateContract($Id, $Value, $Conditions, $WalletId, $recipient, $cur[\"active\"], $cur[\"token_id\"])\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditDelayedContract {\r\n    data {\r\n        Id int\r\n        Contract string\r\n        EveryBlock int\r\n        Conditions string\r\n        BlockID int \"optional\"\r\n        Limit int \"optional\"\r\n        Deleted int \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        ConditionById(\"delayed_contracts\", true)\r\n\r\n        if !HasPrefix($Contract, \"@\") {\r\n            $Contract = \"@\" + Str($ecosystem_id) + $Contract\r\n        }\r\n\r\n        if GetContractByName($Contract) == 0 {\r\n            error Sprintf(LangRes(\"@1template_unknown_contract\", $Lang), $Contract)\r\n        }\r\n\r\n        if $BlockID == 0 {\r\n            $BlockID = $block + $EveryBlock\r\n        }\r\n\r\n        if $BlockID <= $block {\r\n            error LangRes(\"@1blockid_must_greater\", $Lang)\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"@1delayed_contracts\", $Id, {\"contract\": $Contract,\"key_id\": $key_id,\r\n          \"block_id\": $BlockID,\"every_block\": $EveryBlock,\r\n          \"counter\": 0,\"limit\": $Limit, \"deleted\": $Deleted,\"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditEcosystemName",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditEcosystemName {\r\n    data {\r\n        EcosystemID int\r\n        NewName string\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        var rows array\r\n        rows = DBFind(\"@1ecosystems\").Where({id: $EcosystemID})\r\n        if !Len(rows) {\r\n            error Sprintf(LangRes(\"@1template_eco_not_exist\", $Lang), $EcosystemID)\r\n        }\r\n    }\r\n    action {\r\n        EditEcosysName($EcosystemID, $NewName)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\r\n    data {\r\n        Id int\r\n        Trans string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        EvalCondition(\"@1parameters\", \"changing_language\", \"value\")\r\n        $lang = DBFind(\"@1languages\").Where({id: $Id, ecosystem: $ecosystem_id}).Row()\r\n        if (!$lang){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        EditLanguage($Id, $lang[\"name\"], $Trans)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLangJoint {\r\n    data {\r\n        Id int\r\n        ValueArr array\r\n        LocaleArr array\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($LocaleArr) {\r\n            if Size($LocaleArr[i]) == 0 {\r\n                info LangRes(\"@1locale_empty\", $Lang)\r\n            }\r\n            if Size($ValueArr[i]) == 0 {\r\n                info LangRes(\"@1value_empty\", $Lang)\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var Trans map\r\n        while i < Len($LocaleArr) {\r\n            Trans[$LocaleArr[i]] = $ValueArr[i]\r\n            i = i + 1\r\n        }\r\n        var params map\r\n        params[\"Id\"] = $Id \r\n        params[\"Trans\"] = JSONEncode(Trans)\r\n        CallContract(\"EditLang\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditMenu {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Title string \"optional\"\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$Title\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1menu\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n            \r\n        }\r\n        RowConditions(\"@1menu\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Title {\r\n            pars[\"title\"] = $Title\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1menu\", $Id, pars)\r\n        }            \r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditPage {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Menu string \"optional\"\r\n        Conditions string \"optional\"\r\n        ValidateCount int \"optional\"\r\n        ValidateMode string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value && !$Menu && !$ValidateCount\r\n    }\r\n    func preparePageValidateCount(count int) int {\r\n        var min, max int\r\n        min = Int(EcosysParam(\"min_page_validate_count\"))\r\n        max = Int(EcosysParam(\"max_page_validate_count\"))\r\n        if count < min {\r\n            count = min\r\n        } else {\r\n            if count > max {\r\n                count = max\r\n            }\r\n        }\r\n        return count\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1pages\").Columns(\"id,ecosystem\").Where({id: $Id,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n        RowConditions(\"@1pages\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $ValidateCount = preparePageValidateCount($ValidateCount)\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Menu {\r\n            pars[\"menu\"] = $Menu\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if $ValidateCount {\r\n            pars[\"validate_count\"] = $ValidateCount\r\n        }\r\n        if $ValidateMode {\r\n            if $ValidateMode != \"1\" {\r\n                $ValidateMode = \"0\"\r\n            }\r\n            pars[\"validate_mode\"] = $ValidateMode\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1pages\", $Id, pars)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\r\n    data {\r\n        Id int\r\n        Value string \"optional\"\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func onlyConditions() bool {\r\n        return $Conditions && !$Value\r\n    }\r\n\r\n    conditions {\r\n        RowConditions(\"@1parameters\", $Id, onlyConditions())\r\n        if $Conditions {\r\n            ValidateCondition($Conditions, $ecosystem_id)\r\n        }\r\n        $Name = DBFind(\"@1parameters\").Where({id: $Id, ecosystem: $ecosystem_id}).One(\"name\")\r\n        if $Name == \"founder_account\" {\r\n            if !DBFind(\"@1members\").Where({id:$Value, ecosystem: $ecosystem_id}).One(\"id\") {\r\n                 warning Sprintf(LangRes(\"@1template_user_not_found\", $Lang), $Value)\r\n            }\r\n        }\r\n        if $Name == \"max_block_user_tx\" || $Name == \"money_digit\" || $Name == \"max_sum\" || $Name == \"min_page_validate_count\" || $Name == \"max_page_validate_count\" {\r\n            if Size($Value) == 0 {\r\n                warning LangRes(\"@1value_not_received\", $Lang)\r\n            }\r\n            if Int($Value) <= 0 {\r\n                warning LangRes(\"@1value_must_greater_zero\", $Lang)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        if $Value {\r\n            pars[\"value\"] = $Value\r\n        }\r\n        if $Conditions {\r\n            pars[\"conditions\"] = $Conditions\r\n        }\r\n        if pars {\r\n            DBUpdate(\"@1parameters\", $Id, pars)\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "EditSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSection {\r\n    data {\r\n        id int\r\n        title string\r\n        status int\r\n        urlname string\r\n        page string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if(!DBFind(\"@1sections\").Columns(\"id,ecosystem\").Where({id: $id,ecosystem: $ecosystem_id})){\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n        if $status < 0 || $status > 2 {\r\n            warning LangRes(\"@1status_must_0_2\", $Lang)\r\n        }\r\n        if $status == 0 || $status == 1 {\r\n            var status_check map\r\n            status_check = DBFind(\"@1sections\").Columns(\"id,status\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\r\n            if (Int(JSONDecode(status_check[\"status\"]))==2) {\r\n                warning LangRes(\"@1main_section_warning\", $Lang)\r\n            }\r\n        }\r\n        if !DBFind(\"@1sections\").Columns(\"id\").Where({id:$id,ecosystem:$ecosystem_id}) {\r\n            warning Sprintf(LangRes(\"@1template_section_not_exist\", $Lang), $id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $status == 2 {\r\n            var status_check map\r\n            var curr_id int\r\n            status_check = DBFind(\"@1sections\").Columns(\"id,status\").Where({\"status\":$status,ecosystem:$ecosystem_id}).Row()\r\n            curr_id = Int(JSONDecode(status_check[\"id\"]))\r\n            DBUpdate(\"@1sections\", curr_id, {\"status\":1})\r\n        }\r\n        DBUpdate(\"@1sections\", $id, {\"title\":$title,\"status\":$status,\"urlname\":$urlname,\"page\":$page}) \r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "EditTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\r\n    data {\r\n        Name string\r\n        InsertPerm string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n        NewColumnPerm string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if !$InsertPerm {\r\n            info LangRes(\"@1insert_condition_empty\", $Lang)\r\n        }\r\n        if !$UpdatePerm {\r\n            info LangRes(\"@1update_condition_empty\", $Lang)\r\n        }\r\n        if !$ReadPerm {\r\n            info LangRes(\"@1read_condition_empty\", $Lang)\r\n        }\r\n        if !$NewColumnPerm {\r\n            info LangRes(\"@1new_column_condition_empty\", $Lang)\r\n        }\r\n\r\n        var permissions map\r\n        permissions[\"insert\"] = $InsertPerm\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        permissions[\"new_column\"] = $NewColumnPerm\r\n        $Permissions = permissions\r\n        TableConditions($Name, \"\", JSONEncode($Permissions))\r\n    }\r\n\r\n    action {\r\n        PermTable($Name, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UploadBinary",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Data bytes \"file\"\r\n        DataMimeType string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $Id = Int(DBFind(\"@1binaries\").Columns(\"id\").Where({app_id: $ApplicationId,\r\n            member_id: $key_id, name: $Name, ecosystem: $ecosystem_id}).One(\"id\"))\r\n\r\n        if $Id == 0 {\r\n            if $ApplicationId == 0 {\r\n                warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        var hash string\r\n        hash = Hash($Data)\r\n\r\n        if $DataMimeType == \"\" {\r\n            $DataMimeType = \"application/octet-stream\"\r\n        }\r\n\r\n        if $Id != 0 {\r\n            DBUpdate(\"@1binaries\", $Id, {\"data\": $Data,\"hash\": hash,\"mime_type\": $DataMimeType})\r\n        } else {\r\n            $Id = DBInsert(\"@1binaries\", {\"app_id\": $ApplicationId,\"member_id\": $key_id,\r\n               \"name\": $Name,\"data\": $Data,\"hash\": hash, \"mime_type\": $DataMimeType, \"ecosystem\":$ecosystem_id})\r\n        }\r\n\r\n        $result = $Id\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "ExportNewApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExportNewApp {\r\n    data {\r\n        ApplicationId int\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $app_map = DBFind(\"@1applications\").Columns(\"id,name\").Where({id: $ApplicationId, ecosystem: $ecosystem_id}).Row()\r\n        if !$app_map{\r\n            warning LangRes(\"@1app_not_found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int pages_array menu_name_array menu_id_array pages_ret array\r\n        // Search menu\r\n        pages_ret = DBFind(\"@1pages\").Where({app_id: $ApplicationId, ecosystem: $ecosystem_id})\r\n        while i < Len(pages_ret) {\r\n            var page_map map\r\n            page_map = pages_ret[i]\r\n\r\n            pages_array = Append(pages_array, Sprintf(\"%v\", Str(page_map[\"menu\"])))\r\n            i = i + 1\r\n        }\r\n\r\n        if Len(pages_array) > 0 {\r\n            var where_for_menu map\r\n            where_for_menu[\"name\"] = {\"$in\" : pages_array}\r\n\r\n            i = 0\r\n            var menu_ret array\r\n            menu_ret = DBFind(\"@1menu\").Where(where_for_menu)\r\n            while i < Len(menu_ret) {\r\n                var menu_map map\r\n                menu_map = menu_ret[i]\r\n\r\n                menu_name_array = Append(menu_name_array, Str(menu_map[\"name\"]))\r\n                menu_id_array = Append(menu_id_array, Str(menu_map[\"id\"]))\r\n                i = i + 1\r\n            }\r\n        }\r\n\r\n        // Creating settings\r\n        var value map\r\n        value[\"app_id\"] = Str($ApplicationId)\r\n        value[\"app_name\"] = Str($app_map[\"name\"])\r\n\r\n        if Len(menu_name_array) > 0 {\r\n            value[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\r\n            value[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\r\n            value[\"count_menu\"] = Str(Len(menu_name_array))\r\n        } else {\r\n            value[\"menu_id\"] = \"0\"\r\n            value[\"menu_name\"] = \"\"\r\n            value[\"count_menu\"] = \"0\"\r\n        }\r\n\r\n        $buffer_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"export\", ecosystem: $ecosystem_id}).One(\"id\")\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"export\", \"value\": value})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": value})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Import",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\r\n    data {\r\n        Data string\r\n    }\r\n    func decodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"guest_key\", \"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = ToUpper(\"#\" + prefix + r + \"#\")\r\n            to = \"#\" + r + \"#\"\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $Data = decodeGlobals($Data)\r\n        $ApplicationId = 0\r\n        var app_map map\r\n        app_map = DBFind(\"@1buffer_data\").Columns(\"value->app_name\").Where({key: \"import_info\", member_id: $key_id, ecosystem: $ecosystem_id}).Row()\r\n\r\n        if app_map{\r\n            var app_id int ival string\r\n            ival = Str(app_map[\"value.app_name\"])\r\n            app_id = DBFind(\"@1applications\").Columns(\"id\").Where({name: ival, ecosystem: $ecosystem_id}).One(\"id\")\r\n            if app_id {\r\n                $ApplicationId = Int(app_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var editors, creators map\r\n        editors[\"pages\"] = \"EditPage\"\r\n        editors[\"blocks\"] = \"EditBlock\"\r\n        editors[\"menu\"] = \"EditMenu\"\r\n        editors[\"app_params\"] = \"EditAppParam\"\r\n        editors[\"languages\"] = \"EditLang\"\r\n        editors[\"contracts\"] = \"EditContract\"\r\n        editors[\"tables\"] = \"\" // nothing\r\n\r\n        creators[\"pages\"] = \"NewPage\"\r\n        creators[\"blocks\"] = \"NewBlock\"\r\n        creators[\"menu\"] = \"NewMenu\"\r\n        creators[\"app_params\"] = \"NewAppParam\"\r\n        creators[\"languages\"] = \"NewLang\"\r\n        creators[\"contracts\"] = \"NewContract\"\r\n        creators[\"tables\"] = \"NewTable\"\r\n\r\n        var dataImport array\r\n        dataImport = JSONDecode($Data)\r\n        var i int\r\n        while i < Len(dataImport){\r\n            var item cdata map type name string\r\n            cdata = dataImport[i]\r\n            if cdata {\r\n                cdata[\"ApplicationId\"] = $ApplicationId\r\n                type = cdata[\"Type\"]\r\n                name = cdata[\"Name\"]\r\n                // Println(Sprintf(\"import %v: %v\", type, cdata[\"Name\"]))\r\n\r\n                var tbl string\r\n                tbl = \"@1\" + Str(type)\r\n                item = DBFind(tbl).Where({name: name, ecosystem: $ecosystem_id}).Row()\r\n                var contractName string\r\n                if item {\r\n                    contractName = editors[type]\r\n                    cdata[\"Id\"] = Int(item[\"id\"])\r\n                    if type == \"contracts\" {\r\n                        if item[\"conditions\"] == \"false\"{\r\n                            // ignore updating impossibled\r\n                            contractName = \"\"\r\n                        }\r\n                    } elif type == \"menu\"{\r\n                        var menu menuItem string\r\n                        menu = Replace(item[\"value\"], \" \", \"\")\r\n                        menu = Replace(menu, \"\\n\", \"\")\r\n                        menu = Replace(menu, \"\\r\", \"\")\r\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\r\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\r\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\r\n                        if Contains(menu, menuItem) {\r\n                            // ignore repeated\r\n                            contractName = \"\"\r\n                        }else{\r\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\r\n                        }\r\n                    }\r\n                } else {\r\n                    contractName = creators[type]\r\n                }\r\n\r\n                if contractName != \"\"{\r\n                    CallContract(contractName, cdata)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // Println(Sprintf(\"> time: %v\", $time))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ImportUpload",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\r\n    data {\r\n        input_file string \"file\"\r\n    }\r\n    func encodeGlobals(s string) string {\r\n        var globs array i lenGlobs int r map prefix from to string\r\n        prefix = \"import_\"\r\n        globs = [\"guest_key\", \"ecosystem_id\", \"key_id\", \"isMobile\", \"role_id\", \"ecosystem_name\", \"app_id\", \"info_value_pages_count\", \"info_value_pages\", \"info_value_blocks_count\", \"info_value_blocks\",\"info_value_menu_count\", \"info_value_menu\", \"info_value_parameters_count\", \"info_value_parameters\",\"info_value_languages_count\", \"info_value_languages\", \"info_value_contracts_count\", \"info_value_contracts\", \"info_value_tables_count\", \"info_value_tables\", \"DataName\", \"DataCount\", \"DataInfo\", \"info_value_app_name\", \"import_id\"]\r\n        lenGlobs = Len(globs)\r\n        while i < lenGlobs{\r\n            r = globs[i]\r\n            from = \"#\" + r + \"#\"\r\n            to = ToUpper(\"#\" + prefix + r + \"#\")\r\n            s = Replace(s, from, to)\r\n            i = i + 1\r\n        }\r\n        return s\r\n    }\r\n\r\n    conditions {\r\n        $input_file = BytesToString($input_file)\r\n        $input_file = encodeGlobals($input_file)\r\n        $limit = 10 // data piece size of import\r\n    }\r\n\r\n    action {\r\n        // init buffer_data, cleaning old buffer\r\n        var initJson map\r\n        $import_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"import\", ecosystem: $ecosystem_id}).One(\"id\")\r\n        if $import_id {\r\n            $import_id = Int($import_id)\r\n            DBUpdate(\"@1buffer_data\", $import_id, {\"value\": initJson})\r\n        } else {\r\n            $import_id = DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"import\", \"value\": initJson,\"ecosystem\": $ecosystem_id})\r\n        }\r\n\r\n        $info_id = DBFind(\"@1buffer_data\").Where({member_id:$key_id, key: \"import_info\", ecosystem: $ecosystem_id}).One(\"id\")\r\n        if $info_id {\r\n            $info_id = Int($info_id)\r\n            DBUpdate(\"@1buffer_data\", $info_id, {\"value\": initJson})\r\n        } else {\r\n            $info_id = DBInsert(\"@1buffer_data\", {\"member_id\":$key_id,\"key\": \"import_info\", \"value\": initJson,\"ecosystem\": $ecosystem_id})\r\n        }\r\n        \r\n        var input map arrData array\r\n        input = JSONDecode($input_file)\r\n        arrData = input[\"data\"]\r\n\r\n        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array\r\n\r\n        // import info\r\n        var i lenArrData int item map\r\n        lenArrData = Len(arrData)\r\n        while i < lenArrData{\r\n            item = arrData[i]\r\n\r\n            if item[\"Type\"] == \"pages\" {\r\n                pages_arr = Append(pages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"blocks\" {\r\n                blocks_arr = Append(blocks_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"menu\" {\r\n                menu_arr = Append(menu_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"app_params\" {\r\n                parameters_arr = Append(parameters_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"languages\" {\r\n                languages_arr = Append(languages_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"contracts\" {\r\n                contracts_arr = Append(contracts_arr, item[\"Name\"])\r\n            }elif item[\"Type\"] == \"tables\" {\r\n                tables_arr = Append(tables_arr, item[\"Name\"])\r\n            }\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        var inf map\r\n        inf[\"app_name\"] = input[\"name\"]\r\n        inf[\"pages\"] = Join(pages_arr, \", \")\r\n        inf[\"pages_count\"] = Len(pages_arr)\r\n        inf[\"blocks\"] = Join(blocks_arr, \", \")\r\n        inf[\"blocks_count\"] = Len(blocks_arr)\r\n        inf[\"menu\"] = Join(menu_arr, \", \")\r\n        inf[\"menu_count\"] = Len(menu_arr)\r\n        inf[\"parameters\"] = Join(parameters_arr, \", \")\r\n        inf[\"parameters_count\"] = Len(parameters_arr)\r\n        inf[\"languages\"] = Join(languages_arr, \", \")\r\n        inf[\"languages_count\"] = Len(languages_arr)\r\n        inf[\"contracts\"] = Join(contracts_arr, \", \")\r\n        inf[\"contracts_count\"] = Len(contracts_arr)\r\n        inf[\"tables\"] = Join(tables_arr, \", \")\r\n        inf[\"tables_count\"] = Len(tables_arr)\r\n\r\n        if 0 == inf[\"pages_count\"] + inf[\"blocks_count\"] + inf[\"menu_count\"] + inf[\"parameters_count\"] + inf[\"languages_count\"] + inf[\"contracts_count\"] + inf[\"tables_count\"] {\r\n            warning \"Invalid or empty import file\"\r\n        }\r\n\r\n        // import data\r\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\r\n        var sliced contracts array\r\n        i = 0\r\n        while i <lenArrData{\r\n            var items array l int item map\r\n            while l < $limit && (i + l < lenArrData) {\r\n                item = arrData[i + l]\r\n                if item[\"Type\"] == \"contracts\" {\r\n                    contracts = Append(contracts, item)\r\n                }else{\r\n                    items = Append(items, item)\r\n                }\r\n                l = l + 1\r\n            }\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(items)\r\n            sliced = Append(sliced, batch)\r\n            i = i + $limit\r\n        }\r\n        if Len(contracts) > 0{\r\n            var batch map\r\n            batch[\"Data\"] = JSONEncode(contracts)\r\n            sliced = Append(sliced, batch)\r\n        }\r\n        input[\"data\"] = sliced\r\n\r\n        // storing\r\n        DBUpdate(\"@1buffer_data\", $import_id, {\"value\": input})\r\n        DBUpdate(\"@1buffer_data\", $info_id, {\"value\": inf})\r\n\r\n        var name string\r\n        name = Str(input[\"name\"])\r\n        var cndns string\r\n        cndns = Str(input[\"conditions\"])\r\n\r\n        if !DBFind(\"@1applications\").Columns(\"id\").Where({name:name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            DBInsert(\"@1applications\", {\"name\": name, \"conditions\": cndns,\"ecosystem\": $ecosystem_id})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ItemChangeAppId",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ItemChangeAppId {\r\n    data {\r\n        Table string\r\n        AppId int\r\n        Id int\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $item = DBFind($Table).Where({id: $Id, ecosystem: $ecosystem_id}).Row()\r\n        if !$item{\r\n            warning LangRes(\"@1item_not_found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate($Table, Int($item[\"id\"]), {\"app_id\": $AppId})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MainCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MainCondition {\r\n    conditions {\r\n        if EcosysParam(\"founder_account\")!=$key_id\r\n        {\r\n            warning \"Sorry, you do not have access to this action.\"\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MoneyTransfer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MoneyTransfer {\r\n    data {\r\n        Recipient string\r\n        Amount    string\r\n        Comment     string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        $recipient = AddressToId($Recipient)\r\n        if $recipient == 0 {\r\n            error Sprintf(LangRes(\"@1template_recipient_invalid\", $Lang), $Recipient)\r\n        }\r\n        var total money\r\n        $amount = Money($Amount) \r\n        if $amount <= 0 {\r\n            error LangRes(\"@1amount_must_greather_zero\", $Lang)\r\n        }\r\n\r\n        var row map\r\n        var req money\r\n        row = DBFind(\"@1keys\").Columns(\"amount\").Where({id: $key_id, ecosystem: $ecosystem_id}).Row()\r\n        total = Money(row[\"amount\"])\r\n        req = $amount + Money(100000000000000000) \r\n        if req > total {\r\n            error Sprintf(LangRes(\"@1template_money_not_enough\", $Lang), total, req)\r\n        }\r\n    }\r\n    action {\r\n        DBUpdate(\"@1keys\", $key_id, {\"-amount\": $amount})\r\n        if DBFind(\"@1keys\").Columns(\"id\").Where({id: $recipient, ecosystem: $ecosystem_id}).One(\"id\") == nil {\r\n            DBInsert(\"@1keys\", {\"id\": $recipient,\"amount\": $amount})\r\n        } else {\r\n            DBUpdate(\"@1keys\", $recipient, {\"+amount\": $amount})\r\n        }\r\n        DBInsert(\"@1history\", {\"sender_id\": $key_id,\"recipient_id\": $recipient,\r\n            \"amount\":$amount,\"comment\": $Comment,\"block_id\": $block,\"txhash\": $txhash})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewAppParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n        }\r\n\r\n        if DBFind(\"@1app_params\").Columns(\"id\").Where({\"name\":$Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_appparam_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1app_params\", {\"app_id\": $ApplicationId, \"name\": $Name, \"value\": $Value,\r\n              \"conditions\": $Conditions,\"ecosystem\":$ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewApplication",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\r\n    data {\r\n        Name string\r\n        Conditions string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if Size($Name) == 0 {\r\n            warning LangRes(\"@1app_name_missing\", $Lang)\r\n        }\r\n\r\n        if DBFind(\"@1applications\").Columns(\"id\").Where({\"name\":$Name, \"ecosystem\":$ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_app_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        $result = DBInsert(\"@1applications\", {\"name\":$Name, \"conditions\":$Conditions, \"ecosystem\":$ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBadBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBadBlock {\r\n    data {\r\n        ProducerNodeID int\r\n        ConsumerNodeID int\r\n        BlockID int\r\n        Timestamp int\r\n        Reason string\r\n    }\r\n    action {\r\n        DBInsert(\"@1bad_blocks\", {\"producer_node_id\": $ProducerNodeID,\"consumer_node_id\": $ConsumerNodeID,\r\n            \"block_id\": $BlockID, \"timestamp block_time\": $Timestamp, \"reason\": $Reason})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewBlock",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n        }\r\n\r\n        if DBFind(\"@1blocks\").Columns(\"id\").Where({name:$Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_block_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1blocks\", {\"name\": $Name, \"value\": $Value, \"conditions\": $Conditions,\r\n              \"app_id\": $ApplicationId,\"ecosystem\": $ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewColumn",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\r\n    data {\r\n        TableName string\r\n        Name string\r\n        Type string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n    }\r\n    conditions {\r\n    var permissions map\r\n        permissions[\"update\"] = $UpdatePerm\r\n        permissions[\"read\"] = $ReadPerm\r\n        $Permissions = permissions\r\n        ColumnCondition($TableName, $Name, $Type, JSONEncode($Permissions))\r\n    }\r\n    action {\r\n        CreateColumn($TableName, $Name, $Type, JSONEncode($Permissions))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\r\n    data {\r\n        ApplicationId int\r\n        Value string\r\n        Conditions string\r\n        Wallet string \"optional\"\r\n        TokenEcosystem int \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n        }\r\n\r\n        $walletContract = $key_id\r\n        if $Wallet {\r\n            $walletContract = AddressToId($Wallet)\r\n            if $walletContract == 0 {\r\n                \r\n                error Sprintf(LangRes(\"@1template_wrong_wallet\", $Lang), $Wallet)\r\n            }\r\n        }\r\n\r\n        $contract_name = ContractName($Value)\r\n\r\n        if !$contract_name {\r\n            error LangRes(\"@1must_name\", $Lang)\"must be the name\"\r\n        }\r\n\r\n        if !$TokenEcosystem {\r\n            $TokenEcosystem = 1\r\n        } else {\r\n            if !SysFuel($TokenEcosystem) {\r\n                warning Sprintf(LangRes(\"@1template_eco_isnot_system\", $Lang), $TokenEcosystem)\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        $result = CreateContract($contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewDelayedContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewDelayedContract {\r\n    data {\r\n        Contract string\r\n        EveryBlock int\r\n        Conditions string\r\n        BlockID int \"optional\"\r\n        Limit int \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n\r\n        if !HasPrefix($Contract, \"@\") {\r\n            $Contract = \"@\" + Str($ecosystem_id) + $Contract\r\n        }\r\n\r\n        if GetContractByName($Contract) == 0 {\r\n            error Sprintf(LangRes(\"@1template_unknown_contract\", $Lang), $Contract)\r\n        }\r\n\r\n        if $BlockID == 0 {\r\n            $BlockID = $block + $EveryBlock\r\n        }\r\n\r\n        if $BlockID <= $block {\r\n            error LangRes(\"@1blockid_must_greater\", $Lang)\r\n        }\r\n    }\r\n    action {\r\n        DBInsert(\"@1delayed_contracts\", {\"contract\": $Contract, \"key_id\": $key_id, \"block_id\": $BlockID,\r\n            \"every_block\": $EveryBlock, \"limit\": $Limit, \"conditions\": $Conditions})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewEcosystem {\r\n    data {\r\n        Name  string\r\n    }\r\n    action {\r\n        $result = CreateEcosystem($key_id, $Name)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLang",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\r\n    data {\r\n        Name string\r\n        Trans string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        EvalCondition(\"@1parameters\", \"changing_language\", \"value\")\r\n        if DBFind(\"@1languages\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_langres_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        CreateLanguage($Name, $Trans)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewLangJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLangJoint {\r\n    data {\r\n        Name string\r\n        ValueArr array\r\n        LocaleArr array\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($LocaleArr) {\r\n            if Size($LocaleArr[i]) == 0 {\r\n                info LangRes(\"@1locale_empty\", $Lang)\r\n            }\r\n            if Size($ValueArr[i]) == 0 {\r\n                info LangRes(\"@1value_empty\", $Lang)\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var Trans map\r\n        while i < Len($LocaleArr) {\r\n            Trans[$LocaleArr[i]] = $ValueArr[i]\r\n            i = i + 1\r\n        }\r\n        var params map\r\n        params[\"Name\"] = $Name\r\n        params[\"Trans\"] = JSONEncode(Trans)\r\n        CallContract(\"NewLang\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewMenu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Title string \"optional\"\r\n        Conditions string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if DBFind(\"@1menu\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_menu_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1menu\", {\"name\":$Name,\"value\": $Value, \"title\": $Title, \"conditions\": $Conditions, \"ecosystem\": $ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Value string\r\n        Menu string\r\n        Conditions string\r\n        ValidateCount int \"optional\"\r\n        ValidateMode string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n    func preparePageValidateCount(count int) int {\r\n        var min, max int\r\n        min = Int(EcosysParam(\"min_page_validate_count\"))\r\n        max = Int(EcosysParam(\"max_page_validate_count\"))\r\n\r\n        if count < min {\r\n            count = min\r\n        } else {\r\n            if count > max {\r\n                count = max\r\n            }\r\n        }\r\n        return count\r\n    }\r\n\r\n    conditions {\r\n        ValidateCondition($Conditions,$ecosystem_id)\r\n\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n        }\r\n\r\n        if DBFind(\"@1pages\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_page_exists\", $Lang), $Name)\r\n        }\r\n\r\n        $ValidateCount = preparePageValidateCount($ValidateCount)\r\n\r\n        if $ValidateMode {\r\n            if $ValidateMode != \"1\" {\r\n                $ValidateMode = \"0\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1pages\", {\"name\": $Name,\"value\": $Value, \"menu\": $Menu,\r\n             \"validate_count\":$ValidateCount,\"validate_mode\": $ValidateMode,\r\n             \"conditions\": $Conditions,\"app_id\": $ApplicationId,\"ecosystem\":$ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewParameter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Conditions string\r\n        Lang string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        ValidateCondition($Conditions, $ecosystem_id)\r\n        \r\n        if DBFind(\"@1parameters\").Columns(\"id\").Where({name: $Name, ecosystem: $ecosystem_id}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1template_parameter_exists\", $Lang), $Name)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        DBInsert(\"@1parameters\", {\"name\": $Name, \"value\":$Value, \"conditions\": $Conditions,\"ecosystem\": $ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewSection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSection {\r\n    data {\r\n        title string\r\n        status int\r\n        urlname string\r\n        page string\r\n        Lang string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if $status < 0 || $status > 2 {\r\n            warning LangRes(\"@1status_must_0_2\", $Lang)\r\n        }\r\n        if DBFind(\"@1sections\").Where({\"urlname\":$urlname,ecosystem:$ecosystem_id}) {\r\n            warning Sprintf(\"Section with url name '%s' already exists\", $urlname)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        if $status == 2 {\r\n            var status_check map\r\n            var curr_id int\r\n            status_check = DBFind(\"@1sections\").Where({\"status\":$status}).Columns(\"id,status\").Row()\r\n            curr_id = Int(JSONDecode(status_check[\"id\"]))\r\n            DBUpdate(\"@1sections\", curr_id, {\"status\":1})\r\n        }\r\n        var roles_access array\r\n        roles_access = JSONEncode(roles_access)\r\n        DBInsert(\"@1sections\", {\"title\":$title, \"status\":$status, \"urlname\":$urlname, \"page\":$page, \"roles_access\":roles_access, \"ecosystem\":$ecosystem_id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTable",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        Columns string\r\n        Permissions string\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        if $ApplicationId == 0 {\r\n            warning LangRes(\"@1aid_cannot_zero\", $Lang)\r\n        }\r\n        TableConditions($Name, $Columns, $Permissions)\r\n    }\r\n    \r\n    action {\r\n        CreateTable($Name, $Columns, $Permissions, $ApplicationId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewTableJoint",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTableJoint {\r\n    data {\r\n        ApplicationId int\r\n        Name string\r\n        ColumnsArr array\r\n        TypesArr array\r\n        InsertPerm string\r\n        UpdatePerm string\r\n        ReadPerm string\r\n        NewColumnPerm string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        var i int\r\n        while i < Len($ColumnsArr) {\r\n            if Size($ColumnsArr[i]) == 0 {\r\n                info LangRes(\"@1columns_empty\", $Lang)\r\n            }\r\n            if Size($TypesArr[i]) == 0 {\r\n                info LangRes(\"@1type_empty\", $Lang)\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        var col_arr array\r\n        while i < Len($ColumnsArr) {\r\n            var col_map map\r\n            col_map[\"name\"] = $ColumnsArr[i]\r\n            col_map[\"type\"] = $TypesArr[i]\r\n            col_map[\"conditions\"] = \"true\"\r\n            col_arr[i] = JSONEncode(col_map)\r\n            i = i + 1\r\n        }\r\n\r\n        var Permissions map\r\n        Permissions[\"insert\"] = $InsertPerm \r\n        Permissions[\"update\"] = $UpdatePerm\r\n        Permissions[\"read\"] = $ReadPerm\r\n        Permissions[\"new_column\"] = $NewColumnPerm\r\n\r\n        var params map\r\n        params[\"ApplicationId\"] = $ApplicationId \r\n        params[\"Name\"] = $Name\r\n        params[\"Columns\"] = JSONEncode(col_arr)\r\n        params[\"Permissions\"] = JSONEncode(Permissions)\r\n        CallContract(\"NewTable\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NewUser",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewUser {\r\n    data {\r\n        NewPubkey string\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        $newId = PubToID($NewPubkey)\r\n        if $newId == 0 {\r\n            error LangRes(\"@1wrong_pub\", $Lang)\r\n        }\r\n        if DBFind(\"@1keys\").Columns(\"id\").Where({id: $newId, ecosystem: $ecosystem_id}).One(\"id\") != nil {\r\n            error LangRes(\"@1template_user_exists\", $Lang)\r\n        }\r\n\r\n        $amount = Money(1000) * Money(1000000000000000000)\r\n    }\r\n    action {\r\n        NewMoney($newId, Str($amount), \"New user deposit\")\r\n        SetPubKey($newId, StringToBytes($NewPubkey))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeOwnerCondition",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeOwnerCondition {\r\n    conditions {\r\n        $raw_full_nodes = SysParamString(\"full_nodes\")\r\n        if Size($raw_full_nodes) == 0 {\r\n            ContractConditions(\"MainCondition\")\r\n        } else {\r\n            $full_nodes = JSONDecode($raw_full_nodes)\r\n            var i int\r\n            while i < Len($full_nodes) {\r\n                $fn = $full_nodes[i]\r\n                if $fn[\"key_id\"] == $key_id {\r\n                    return true\r\n                }\r\n                i = i + 1\r\n            }\r\n            warning \"Sorry, you do not have access to this action.\"\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "PlatformAppsInstall",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract PlatformAppsInstall {\r\n    data {\r\n        Name string\r\n        Lang string \"optional\"\r\n    }\r\n    func appendOnce(ar array, menu, page, item string) array{\r\n        if !Contains(menu, page) {\r\n            ar = Append(ar, item)\r\n        }\r\n        return ar\r\n    }\r\n\r\n    func getAdminMenu() string {\r\n        var items array currentMenu string\r\n        currentMenu = Str($admin_menu[\"value\"])\r\n\r\n        if $Name == \"System\" {\r\n            items = appendOnce(items, currentMenu, \"@1apps_list\", `MenuItem(Title:$@1applications$, Page:@1apps_list, Icon:\"icon-folder\")`)\r\n            items = appendOnce(items, currentMenu, \"@1params_list\", `MenuItem(Title:$@1ecosystem_parameters$, Page:@1params_list, Icon:\"icon-settings\")`)\r\n            items = appendOnce(items, currentMenu, \"@1menus_list\", `MenuItem(Title:$@1menu$, Page:@1menus_list, Icon:\"icon-list\")`)\r\n            items = appendOnce(items, currentMenu, \"@1section_list\", `MenuItem(Title:$@1sections$, Page:@1section_list, Icon:\"icon-frame\")`)\r\n            items = appendOnce(items, currentMenu, \"@1app_langres\", `MenuItem(Title:$@1language_resources$, Page:@1app_langres, Icon:\"icon-globe\")`)\r\n            items = appendOnce(items, currentMenu, \"@1admin_index\", `MenuItem(Title:$@1dashboard$, Page:@1admin_index, Icon:\"icon-wrench\")`)\r\n        }\r\n        return Join(items array, \"\\n\")\r\n    }\r\n\r\n    func getDefaultMenu() string {\r\n        var items array currentMenu string\r\n        currentMenu = Str($default_menu[\"value\"])\r\n        if $Name == \"Basic\" {\r\n            items = appendOnce(items, currentMenu, \"@1profile_view\", `MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")`)\r\n            items = appendOnce(items, currentMenu, \"@1notifications_list\", `MenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")`)\r\n            items = appendOnce(items, currentMenu, \"@1members_list\", `MenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"fa icon-people\")`)\r\n            items = appendOnce(items, currentMenu, \"@1ecosystems_list\", `MenuItem(Title:$@1ecosystems$, Page:@1ecosystems_list, Icon:\"fa fa-list-ul\")`)\r\n            if !(Contains(currentMenu, \"@1roles_list\") || Contains(currentMenu, \"@1voting_list\") || Contains(currentMenu, \"@1sysparams_candidates_list\") || Contains(currentMenu, \"@1tokenrefund_list\")){\r\n                items = Append(items, `MenuGroup(Title:$@1admin$, Icon:\"icon-arrow-right\"){`)\r\n                items = Append(items, `    MenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"fa fa-list-ul\")`)\r\n                items = Append(items, `    MenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"fa fa-edit\")`)\r\n                items = Append(items, `}`)\r\n            }\r\n        }\r\n        return Join(items array, \"\\n\")\r\n    }\r\n\r\n    conditions {\r\n        $admin_menu = DBFind(\"@1menu\").Columns(\"id,value\").Where({name: \"admin_menu\", ecosystem: $ecosystem_id}).Row()\r\n        $default_menu = DBFind(\"@1menu\").Columns(\"id,value\").Where({name: \"default_menu\", ecosystem: $ecosystem_id}).Row()\r\n\r\n        if !$admin_menu {\r\n            warning LangRes(\"@1admin_menu_not_found\", $Lang)\r\n        }\r\n        if !$default_menu {\r\n            warning LangRes(\"@1default_menu_not_found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var val_admin_menu string\r\n        val_admin_menu = Str($admin_menu[\"value\"]) + \"\\n\" + getAdminMenu()\r\n        EditMenu(\"Id,Value\",Int($admin_menu[\"id\"]), val_admin_menu)\r\n\r\n        var val_default_menu string\r\n        val_default_menu = Str($default_menu[\"value\"]) + \"\\n\" + getDefaultMenu()\r\n        EditMenu(\"Id,Value\", Int($default_menu[\"id\"]), val_default_menu)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Restore",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Restore {\r\n    data {\r\n        Id int\r\n        Type string\r\n        IdHistory int\r\n        Lang string \"optional\"\r\n    }\r\n    conditions {\r\n        var allowed map\r\n        allowed[\"page\"] = 1\r\n        allowed[\"block\"] = 1\r\n        allowed[\"menu\"] = 1\r\n        allowed[\"contract\"] = 1\r\n        if allowed[$Type] != 1 {\r\n            warning LangRes(\"@1wrong_type\", $Lang)\r\n        }\r\n\r\n        if $Type == \"page\" {\r\n            $history = GetHistory(\"pages\", $Id)\r\n        }elif $Type == \"block\" {\r\n            $history = GetHistory(\"blocks\", $Id)\r\n        }elif $Type == \"menu\" {\r\n            $history = GetHistory(\"menu\", $Id)\r\n        }elif $Type == \"contract\" {\r\n            $history = GetHistory(\"contracts\", $Id)\r\n        }\r\n    }\r\n    action {\r\n        var rec params map\r\n        rec = $history[$IdHistory]\r\n        params[\"Id\"] = $Id\r\n        params[\"Value\"] = rec[\"value\"]\r\n        params[\"Conditions\"] = rec[\"conditions\"]\r\n\r\n        if $Type == \"page\" {\r\n            params[\"Menu\"] = rec[\"menu\"]\r\n            CallContract(\"@1EditPage\", params)\r\n        }elif $Type == \"block\" {\r\n            CallContract(\"@1EditBlock\", params)\r\n        }elif $Type == \"menu\" {\r\n            CallContract(\"@1EditMenu\", params)\r\n        }elif $Type == \"contract\" {\r\n            CallContract(\"@1EditContract\", params)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelDown",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelDown {\r\n       data {\r\n        id int\r\n        Lang string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if !DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":$id,ecosystem:$ecosystem_id}) {\r\n            warning Sprintf(LangRes(\"@1template_section_not_exist\", $Lang), $id)\r\n        }\r\n        $next = DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":{\"$gt\":$id},ecosystem:$ecosystem_id})\r\n        if !$next {\r\n            warning LangRes(\"@1section_already_bottom\", $Lang)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var next_id int\r\n        var last_id int\r\n        next_id = $id + 1\r\n        $max_id = DBFind(\"@1sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\r\n        last_id = $max_id + 1\r\n        DBUpdate(\"@1sections\", next_id, {\"id\":last_id})\r\n        DBUpdate(\"@1sections\", $id, {\"id\":next_id})\r\n        DBUpdate(\"@1sections\", last_id, {\"id\":$id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionLevelUp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionLevelUp {\r\n    data {\r\n        id int\r\n        Lang string \"optional\"\r\n    }\r\n    \r\n    conditions {\r\n        if !DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":$id,ecosystem:$ecosystem_id}) {\r\n            warning Sprintf(LangRes(\"@1template_section_not_exist\", $Lang), $id)\r\n        }\r\n        $next = DBFind(\"@1sections\").Columns(\"id\").Where({\"id\":{\"$lt\":$id},ecosystem:$ecosystem_id})\r\n        if !$next {\r\n            warning  LangRes(\"@1section_already_top\", $Lang)\r\n        }\r\n    }\r\n    \r\n    action {\r\n        var next_id int\r\n        var last_id int\r\n        next_id = $id - 1\r\n        $max_id = DBFind(\"@1sections\").Columns(\"id\").Order({\"id\":\"-1\"}).One(\"id\")\r\n        last_id = $max_id + 1\r\n        DBUpdate(\"@1sections\", next_id, {\"id\":last_id})\r\n        DBUpdate(\"@1sections\", $id, {\"id\":next_id})\r\n        DBUpdate(\"@1sections\", last_id, {\"id\":$id})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "SectionRoles",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SectionRoles {\r\n    data {\r\n        id int\r\n        rid int\r\n        operation string\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $operation == \"add\" {\r\n            var roles_id map\r\n            var json array\r\n            var i int\r\n            i = 0\r\n            roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\r\n            json = JSONDecode(roles_id[\"roles_access\"])\r\n            while i < Len(json) {\r\n                if (json[i]==$rid) {\r\n                    warning LangRes(\"@1role_already_permission\", $Lang)\r\n                }\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var roles_array array\r\n        roles_array = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"roles_access\")\r\n        if $operation == \"add\" {\r\n            if (roles_array==\"[]\") {            \r\n                var roles_id array\r\n                roles_id[0] = $rid\r\n                roles_id = JSONEncode(roles_id)\r\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":roles_id})\r\n            } else {\r\n                var roles_id map\r\n                var json array\r\n                roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\r\n                json = JSONDecode(roles_id[\"roles_access\"])\r\n                json = Append(json, $rid)\r\n                json = JSONEncode(json)\r\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":json})\r\n            }\r\n        } \r\n        if $operation == \"remove\" {\r\n            var json array\r\n            var roles_id map\r\n            roles_id = DBFind(\"@1sections\").Columns(\"roles_access\").Where({\"id\":$id,ecosystem:$ecosystem_id}).Row()\r\n            json = JSONDecode(roles_id[\"roles_access\"])\r\n            if (Len(json)==1) {\r\n                var roles_access array\r\n                roles_access = JSONEncode(roles_access)\r\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":roles_access})\r\n            } else {\r\n                var buffer string\r\n                buffer = Join(json, \",\")\r\n                if Contains(buffer, Str($rid)) {\r\n                    buffer = Replace(buffer, `,` + Str($rid), ``)\r\n                }\r\n                if HasPrefix(buffer, Str($rid)) {\r\n                    buffer = Replace(buffer, Str($rid) + `,`, ``)\r\n                }\r\n                json = Split(buffer, \",\")\r\n                json = JSONEncode(json)\r\n                DBUpdate(\"@1sections\", $id, {\"roles_access\":json})\r\n            }\r\n            }\r\n        }\r\n    }",
            "Type": "contracts"
        },
        {
            "Name": "SelectApp",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SelectApp {\r\n    data {\r\n        ApplicationId int\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $app = DBFind(\"@1applications\").Columns(\"id,name\").Where({id: $ApplicationId, ecosystem: $ecosystem_id}).Row()\r\n        if !$app{\r\n            LangRes(\"@1app_not_found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var value map bufferId int\r\n        value[\"app_id\"] = Str($ApplicationId)\r\n        value[\"app_name\"] = $app[\"name\"]\r\n\r\n        bufferId = Int(DBFind(\"@1buffer_data\").Where({member_id: $key_id, key: \"export\", ecosystem: $ecosystem_id}).One(\"id\"))\r\n        if bufferId >0 {\r\n            DBUpdate(\"@1buffer_data\", bufferId, {\"value\": value})\r\n        } else {\r\n            DBInsert(\"@1buffer_data\", {\"member_id\": $key_id,\"key\": \"export\",\"value\": value, ecosystem: $ecosystem_id})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UpdateMetrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UpdateMetrics {\r\n    conditions {\r\n        ContractConditions(\"MainCondition\")\r\n    }\r\n    action {\r\n        var values array\r\n        values = DBCollectMetrics()\r\n\r\n        var i, id int\r\n        var v map\r\n        while (i < Len(values)) {\r\n            var inmap map\r\n\r\n            v = values[i]\r\n            inmap[\"time\"] = v[\"time\"]\r\n            inmap[\"key\"] = v[\"key\"]\r\n            inmap[\"metric\"] = v[\"metric\"]\r\n            \r\n            id = Int(DBFind(\"@1metrics\").Columns(\"id\").Where(inmap).One(\"id\"))\r\n            var ival int\r\n            if id != 0 {\r\n                ival = Int(v[\"value\"])\r\n                DBUpdate(\"@1metrics\", id, {\"value\": ival})\r\n            } else {\r\n                inmap[\"value\"] = Int(v[\"value\"])\r\n                DBInsert(\"@1metrics\", inmap )\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "UpdateSysParam",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UpdateSysParam {\r\n    data {\r\n        Name string\r\n        Value string\r\n        Conditions string \"optional\"\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if GetContractByName($Name) == 0{\r\n            warning LangRes(\"@1system_parameter_not found\", $Lang)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"Value\"] = $Value\r\n        CallContract($Name, params)\r\n        DBUpdateSysParam($Name, $Value, $Conditions)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "Export",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\r\n    data {\r\n        Lang string \"optional\"\r\n    }\r\n\r\n    func createExport(items array) string {\r\n        var res map\r\n        res[\"name\"] = $AppName\r\n        res[\"conditions\"] = $AppConditions\r\n        res[\"data\"] = items\r\n        return JSONEncodeIndent(res, \"    \")\r\n    }\r\n    func mapping(res map, resKey string, item map itemKey string){\r\n        if item[itemKey] {\r\n            res[resKey] = Str(item[itemKey])\r\n        }\r\n    }\r\n    func prepareItem(item map, type string) string {\r\n        var res map\r\n        res[\"Type\"] = type\r\n        mapping(res, \"Name\", item, \"name\")\r\n        mapping(res, \"Value\", item, \"value\")\r\n        mapping(res, \"Conditions\", item, \"conditions\")\r\n        mapping(res, \"Menu\", item, \"menu\")\r\n        mapping(res, \"Title\", item, \"title\")\r\n        mapping(res, \"Trans\", item, \"res\")\r\n        mapping(res, \"Columns\", item, \"columns\")\r\n        mapping(res, \"Permissions\", item, \"permissions\")\r\n        mapping(res, \"Confirmation\", item, \"confirmation\")\r\n        return res\r\n    }\r\n\r\n    func getColumnsWithType(table_name string, columnsJSON string) string {\r\n        var colsMap map result columns array\r\n        colsMap = JSONDecode(columnsJSON)\r\n        columns = GetMapKeys(colsMap)\r\n        var i int\r\n        while i < Len(columns){\r\n            if Size(columns[i]) > 0 {\r\n                var col map\r\n                col[\"name\"] = columns[i]\r\n                col[\"conditions\"] = colsMap[col[\"name\"]]\r\n                col[\"type\"] = GetColumnType(table_name, col[\"name\"])\r\n                result = Append(result, col)\r\n            }\r\n            i = i + 1\r\n        }\r\n        return JSONEncode(result)\r\n    }\r\n\r\n    func exportTable(type string, result array) array {\r\n        var items array limit offset i lenItems int item map\r\n        limit = 250\r\n        while true{\r\n            var rows array where map\r\n            if type == \"menu\" {\r\n                if Len($menus_names) > 0 {\r\n                    where[\"name\"] = {\"$in\": $menus_names}\r\n                    where[\"ecosystem\"] = $ecosystem_id\r\n                }\r\n            }else{\r\n                where[\"app_id\"] = $AppID\r\n                where[\"ecosystem\"] = $ecosystem_id\r\n            }\r\n            if where {\r\n                var tbl string\r\n                tbl = \"@1\" + Str(type)\r\n                if (tbl == \"@1languages\"){\r\n                    rows = DBFind(tbl).Limit(limit).Offset(offset).Where({ecosystem: $ecosystem_id})\r\n                } else {\r\n                    rows = DBFind(tbl).Limit(limit).Offset(offset).Where(where)\r\n                }\r\n            }\r\n            if Len(rows) > 0{\r\n                i = 0\r\n                while i < Len(rows){\r\n                    items = Append(items, rows[i])\r\n                    i = i + 1\r\n                }\r\n            }else{\r\n                break\r\n            }\r\n            offset = offset + limit\r\n        }\r\n        i = 0\r\n        lenItems = Len(items)\r\n        while i < lenItems {\r\n            item = items[i]\r\n            if type == \"tables\" {\r\n                item[\"columns\"] = getColumnsWithType(item[\"name\"], item[\"columns\"])\r\n            }\r\n            result = Append(result, prepareItem(item, type))\r\n            if type == \"pages\" {\r\n                $menus_names = Append($menus_names, Sprintf(\"'%v'\", item[\"menu\"]))\r\n            }\r\n            i = i + 1\r\n        }\r\n        return result\r\n    }\r\n\r\n    conditions {\r\n        var buf app map\r\n        buf = DBFind(\"@1buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where({member_id:$key_id, key: \"export\", ecosystem: $ecosystem_id}).Row()\r\n        if !buf{\r\n            warning LangRes(\"@1app_not_selected\", $Lang)\r\n        }\r\n        $AppID = Int(buf[\"value.app_id\"])\r\n        $AppName = Str(buf[\"value.app_name\"])\r\n\r\n        app = DBFind(\"@1applications\").Columns(\"id,conditions\").Where({id:$AppID, ecosystem: $ecosystem_id}).Row()\r\n        if !app{\r\n            warning LangRes(\"@1app_not_found\", $Lang)\r\n        }\r\n        $AppConditions = app[\"conditions\"]\r\n\r\n        $menus_names = []\r\n        \r\n    }\r\n\r\n    action {\r\n        var exportJSON string items array\r\n        items = exportTable(\"pages\", items)\r\n        items = exportTable(\"contracts\", items)\r\n        items = exportTable(\"blocks\", items)\r\n        items = exportTable(\"languages\", items)\r\n        items = exportTable(\"app_params\", items)\r\n        items = exportTable(\"tables\", items)\r\n        items = exportTable(\"menu\", items)\r\n\r\n        exportJSON = createExport(items)\r\n        \r\n        UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", \"export\", exportJSON, $AppID, \"application/json\")\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}