{"pages":[{"Name":"rgregr","Conditions":"true","Menu":"default_menu","Value":"rtertre"},{"Name":"default_page","Conditions":"ContractAccess(\"@1EditPage\")","Menu":"default_menu","Value":"P(class, Default Ecosystem Page)"}],"blocks":[],"menus":[{"Name":"menu1","Conditions":"true","Value":"MenuGroup(1)"},{"Name":"default_menu","Conditions":"ContractAccess(\"@1EditMenu\")","Value":"MenuItem(main, Default Ecosystem Menu)"}],"parameters":[{"Name":"founder_account","Value":"-2960611442286790273","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"full_node_wallet_id","Value":"-2960611442286790273","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"new_table","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"new_column","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_tables","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_language","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_signature","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_page","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_menu","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"changing_contracts","Value":"ContractConditions(`MainCondition`)","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"ecosystem_name","Value":"","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"max_sum","Value":"1000000","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"citizenship_cost","Value":"1","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"money_digit","Value":"2","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"stylesheet","Value":"body { \n  /* You can define your custom styles here or create custom CSS rules */\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"testname","Value":"test1","Conditions":"true"}],"languages":[{"Name":"test","Trans":"{\"en\":\"test\",\"ru\":\"тест\"}","Conditions":""}],"contracts":[{"Name":"test1","Value":"contract test1 {\n    data {\n\n    }\n\n    conditions {\n\n    }\n\n    action {\n\n    }\n}","Conditions":"true"},{"Name":"Import","Value":"func ImportList(row array, cnt string) {\n    if !row {\n        return\n    }\n    var i int\n    while i < Len(row) {\n        var idata map\n        idata = row[i]\n        CallContract(cnt, idata)\n        i = i + 1\n\t}\n}\n\nfunc ImportData(row array) {\n    if !row {\n        return\n    }\n    var i int\n    while i < Len(row) {\n        var idata map\n        var list array\n        var tblname, columns string\n        idata = row[i]\n        tblname = idata[`Table`]\n        columns = Join(idata[`Columns`], `,`)\n        list = idata[`Data`] \n        if !list {\n            continue\n        }\n        var j int\n        while j < Len(list) {\n            var ilist array\n            ilist = list[j]\n            DBInsert(tblname, columns, ilist)\n            j=j+1\n        }\n        i = i + 1\n\t}\n}\n\ncontract Import {\n    data {\n        Data string\n    }\n    conditions {\n        $list = JSONToMap($Data)\n    }\n    action {\n        ImportList($list[\"pages\"], \"NewPage\")\n        ImportList($list[\"blocks\"], \"NewBlock\")\n        ImportList($list[\"menus\"], \"NewMenu\")\n        ImportList($list[\"parameters\"], \"NewParameter\")\n        ImportList($list[\"languages\"], \"NewLang\")\n        ImportList($list[\"contracts\"], \"NewContract\")\n        ImportList($list[\"tables\"], \"NewTable\")\n        ImportData($list[\"data\"])\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditColumn","Value":"contract EditColumn {\n    data {\n    \tTableName   string\n\t    Name        string\n\t    Permissions string\n    }\n    conditions {\n        ColumnCondition($TableName, $Name, ``, $Permissions, ``)\n    }\n    action {\n        PermColumn($TableName, $Name, $Permissions)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewColumn","Value":"contract NewColumn {\n    data {\n    \tTableName   string\n\t    Name        string\n\t    Type        string\n\t    Permissions string\n\t    Index       string \"optional\"\n    }\n    conditions {\n        ColumnCondition($TableName, $Name, $Type, $Permissions, $Index)\n    }\n    action {\n        CreateColumn($TableName, $Name, $Type, $Permissions, $Index)\n    }\n    func rollback() {\n        RollbackColumn($TableName, $Name)\n    }\n    func price() int {\n        return  SysParamInt(`column_price`)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditTable","Value":"contract EditTable {\n    data {\n    \tName       string\n    \tPermissions string\n    }\n    conditions {\n        TableConditions($Name, ``, $Permissions)\n    }\n    action {\n        PermTable($Name, $Permissions )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewTable","Value":"contract NewTable {\n    data {\n    \tName       string\n    \tColumns      string\n    \tPermissions string\n    }\n    conditions {\n        TableConditions($Name, $Columns, $Permissions)\n    }\n    action {\n        CreateTable($Name, $Columns, $Permissions)\n    }\n    func rollback() {\n        RollbackTable($Name)\n    }\n    func price() int {\n        return  SysParamInt(`table_price`)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditBlock","Value":"contract EditBlock {\n    data {\n        Id         int\n    \tValue      string\n    \tConditions string\n    }\n    conditions {\n        ConditionById(`blocks`, true)\n    }\n    action {\n        DBUpdate(`blocks`, $Id, `value,conditions`, $Value, $Conditions)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewBlock","Value":"contract NewBlock {\n    data {\n    \tName       string\n    \tValue      string\n    \tConditions string\n    }\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n        if DBIntExt(`blocks`, `id`, $Name, `name`) {\n            warning Sprintf( `Block %s aready exists`, $Name)\n        }\n    }\n    action {\n        DBInsert(`blocks`, `name,value,conditions`, $Name, $Value, $Conditions )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditSign","Value":"contract EditSign {\n    data {\n    \tId         int\n    \tValue      string\n    \tConditions string\n    }\n    conditions {\n        ConditionById(`signatures`, true)\n    }\n    action {\n        DBUpdate(`signatures`, $Id, `value,conditions`, $Value, $Conditions)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewSign","Value":"contract NewSign {\n    data {\n    \tName       string\n    \tValue      string\n    \tConditions string\n    }\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n        var exist string\n        exist = DBStringExt(`signatures`, `name`, $Name, `name`)\n        if exist {\n            error Sprintf(\"The signature %s already exists\", $Name)\n        }\n    }\n    action {\n        DBInsert(`signatures`, `name,value,conditions`, $Name, $Value, $Conditions )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditLang","Value":"contract EditLang {\n    data {\n        Name  string\n        Trans string\n    }\n    conditions {\n        EvalCondition(`parameters`, `changing_language`, `value`)\n    }\n    action {\n        DBUpdateExt(`languages`, `name`, $Name, `res`, $Trans )\n        UpdateLang($Name, $Trans)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewLang","Value":"contract NewLang {\n    data {\n        Name  string\n        Trans string\n    }\n    conditions {\n        EvalCondition(`parameters`, `changing_language`, `value`)\n        var exist string\n        exist = DBStringExt(`languages`, `name`, $Name, `name`)\n        if exist {\n            error Sprintf(\"The language resource %s already exists\", $Name)\n        }\n    }\n    action {\n        DBInsert(`languages`, `name,res`, $Name, $Trans )\n        UpdateLang($Name, $Trans)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"AppendPage","Value":"contract AppendPage {\n    data {\n        Id         int\n    \tValue      string\n    }\n    conditions {\n        ConditionById(`pages`, false)\n    }\n    action {\n        var value string\n        value = DBString(`pages`, `value`, $Id)\n       \tif Contains(value, `PageEnd:`) {\n\t\t   value = Replace(value, \"PageEnd:\", $Value) + \"\\r\\nPageEnd:\"\n    \t} else {\n    \t\tvalue = value + \"\\r\\n\" + $Value\n    \t}\n        DBUpdate(`pages`, $Id, `value`,  value )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditPage","Value":"contract EditPage {\n    data {\n        Id         int\n    \tValue      string\n    \tMenu      string\n    \tConditions string\n    }\n    conditions {\n        ConditionById(`pages`, true)\n    }\n    action {\n        DBUpdate(`pages`, $Id, `value,menu,conditions`, $Value, $Menu, $Conditions)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewPage","Value":"contract NewPage {\n    data {\n    \tName       string\n    \tValue      string\n    \tMenu       string\n    \tConditions string\n    }\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n        if DBIntExt(`pages`, `id`, $Name, `name`) {\n            warning Sprintf( `Page %s already exists`, $Name)\n        }\n    }\n    action {\n        DBInsert(`pages`, `name,value,menu,conditions`, $Name, $Value, $Menu, $Conditions )\n    }\n    func price() int {\n        return  SysParamInt(`page_price`)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"AppendMenu","Value":"contract AppendMenu {\n    data {\n        Id     int\n    \tValue      string\n    }\n    conditions {\n        ConditionById(`menu`, false)\n    }\n    action {\n        DBUpdate(`menu`, $Id, `value`, DBString(`menu`, `value`, $Id) + \"\\r\\n\" + $Value )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditMenu","Value":"contract EditMenu {\n    data {\n    \tId         int\n    \tValue      string\n        Title      string \"optional\"\n    \tConditions string\n    }\n    conditions {\n        ConditionById(`menu`, true)\n    }\n    action {\n        DBUpdate(`menu`, $Id, `value,title,conditions`, $Value, $Title, $Conditions)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewMenu","Value":"contract NewMenu {\n    data {\n    \tName       string\n    \tValue      string\n    \tTitle      string \"optional\"\n    \tConditions string\n    }\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n        if DBIntExt(`menu`, `id`, $Name, `name`) {\n            warning Sprintf( `Menu %s already exists`, $Name)\n        }\n    }\n    action {\n        DBInsert(`menu`, `name,value,title,conditions`, $Name, $Value, $Title, $Conditions )\n    }\n    func price() int {\n        return  SysParamInt(`menu_price`)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditParameter","Value":"contract EditParameter {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    conditions {\n        EvalCondition(`parameters`, $Name, `conditions`)\n        ValidateCondition($Conditions, $ecosystem_id)\n        var exist int\n       \tif $Name == `ecosystem_name` {\n    \t\texist = FindEcosystem($Value)\n    \t\tif exist > 0 && exist != $ecosystem_id {\n    \t\t\twarning Sprintf(`Ecosystem %s already exists`, $Value)\n    \t\t}\n    \t}\n    }\n    action {\n        DBUpdateExt(`parameters`, `name`, $Name, `value,conditions`, $Value, $Conditions )\n       \tif $Name == `ecosystem_name` {\n            DBUpdate(`system_states`, $ecosystem_id, `name`, $Value)\n        }\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewParameter","Value":"contract NewParameter {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n        if DBIntExt(`parameters`, `id`, $Name, `name`) {\n            warning Sprintf( `Parameter %s already exists`, $Name)\n        }\n    }\n    action {\n        DBInsert(`parameters`, `name,value,conditions`, $Name, $Value, $Conditions )\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewEcosystem","Value":"contract NewEcosystem {\n    data {\n        Name  string \"optional\"\n    }\n    conditions {\n        if $Name && FindEcosystem($Name) {\n            error Sprintf(`Ecosystem %s is already existed`, $Name)\n        }\n    }\n    action {\n        var id int\n        id = CreateEcosystem($key_id, $Name)\n    \tDBInsert(Str(id) + \"_pages\", \"name,value,menu,conditions\", `default_page`, \n              SysParamString(`default_ecosystem_page`), `default_menu`, \"ContractConditions(`MainCondition`)\")\n    \tDBInsert(Str(id) + \"_menu\", \"name,value,title,conditions\", `default_menu`, \n              SysParamString(`default_ecosystem_menu`), \"default\", \"ContractConditions(`MainCondition`)\")\n    \tDBInsert(Str(id) + \"_keys\", \"id,pub\", $key_id, DBString(\"1_keys\", \"pub\", $key_id))\n        $result = id\n    }\n    func price() int {\n        return  SysParamInt(`ecosystem_price`)\n    }\n    func rollback() {\n        RollbackEcosystem()\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"ActivateContract","Value":"contract ActivateContract {\n    data {\n        Id         int\n    }\n    conditions {\n        $cur = DBRow(`contracts`, `id,conditions,active,wallet_id`, $Id)\n        if Int($cur[`id`]) != $Id {\n            error Sprintf(`Contract %d does not exist`, $Id)\n        }\n        if Int($cur[`active`]) == 1 {\n            error Sprintf(`The contract %d has been already activated`, $Id)\n        }\n        Eval($cur[`conditions`])\n        if $key_id != Int($cur[`wallet_id`]) {\n            error Sprintf(`Wallet %d cannot activate the contract`, $key_id)\n        }\n    }\n    action {\n        DBUpdate(`contracts`, $Id, `active`, 1)\n        Activate($Id, $ecosystem_id)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"EditContract","Value":"contract EditContract {\n    data {\n        Id         int\n    \tValue      string\n    \tConditions string\n    }\n    conditions {\n        $cur = DBRow(`contracts`, `id,value,conditions,active,wallet_id,token_id`, $Id)\n        if Int($cur[`id`]) != $Id {\n            error Sprintf(`Contract %d does not exist`, $Id)\n        }\n        Eval($cur[`conditions`])\n        ValidateCondition($Conditions,$ecosystem_id)\n\t    var list, curlist array\n\t    list = ContractsList($Value)\n\t    curlist = ContractsList($cur[`value`])\n\t    if Len(list) != Len(curlist) {\n\t        error `Contracts cannot be removed or inserted`\n\t    }\n\t    var i int\n\t    while i < Len(list) {\n\t        var j int\n\t        var ok bool\n\t        while j < Len(curlist) {\n\t            if curlist[j] == list[i] {\n\t                ok = true\n\t                break\n\t            }\n\t            j = j + 1 \n\t        }\n\t        if !ok {\n\t            error `Contracts names cannot be changed`\n\t        }\n\t        i = i + 1\n\t    }\n    }\n    action {\n        var root int\n        root = CompileContract($Value, $ecosystem_id, Int($cur[`wallet_id`]), Int($cur[`token_id`]))\n        DBUpdate(`contracts`, $Id, `value,conditions`, $Value, $Conditions)\n        FlushContract(root, $Id, Int($cur[`active`]) == 1)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"NewContract","Value":"contract NewContract {\n    data {\n    \tValue      string\n    \tConditions string\n    \tWallet         string \"optional\"\n    \tTokenEcosystem int \"optional\"\n    }\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n        $walletContract = $key_id\n       \tif $Wallet {\n\t\t    $walletContract = AddressToId($Wallet)\n\t\t    if $walletContract == 0 {\n\t\t\t   error Sprintf(`wrong wallet %s`, $Wallet)\n\t\t    }\n\t    }\n\t    var list array\n\t    list = ContractsList($Value)\n\t    var i int\n\t    while i < Len(list) {\n\t        if IsContract(list[i], $ecosystem_id) {\n\t            warning Sprintf(`Contract %s exists`, list[i] )\n\t        }\n\t        i = i + 1\n\t    }\n        if !$TokenEcosystem {\n            $TokenEcosystem = 1\n        } else {\n            if !SysFuel($TokenEcosystem) {\n                warning Sprintf(`Ecosystem %d is not system`, $TokenEcosystem )\n            }\n        }\n    }\n    action {\n        var root, id int\n        root = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)\n        id = DBInsert(`contracts`, `value,conditions, wallet_id, token_id`, \n               $Value, $Conditions, $walletContract, $TokenEcosystem)\n        FlushContract(root, id, false)\n    }\n    func price() int {\n        return  SysParamInt(`contract_price`)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"MoneyTransfer","Value":"contract MoneyTransfer {\n    data {\n        Recipient string\n        Amount    string\n        Comment     string \"optional\"\n    }\n    conditions {\n        $recipient = AddressToId($Recipient)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %s is invalid\", $Recipient)\n        }\n        var total money\n        $amount = Money($Amount) \n        if $amount == 0 {\n            error \"Amount is zero\"\n        }\n        total = Money(DBString(`keys`, `amount`, $key_id))\n        if $amount >= total {\n            error Sprintf(\"Money is not enough %v < %v\",total, $amount)\n        }\n    }\n    action {\n        DBUpdate(`keys`, $key_id,`-amount`, $amount)\n        DBUpdate(`keys`, $recipient,`+amount`, $amount)\n        DBInsert(`history`, `sender_id,recipient_id,amount,comment,block_id,txhash`, \n            $key_id, $recipient, $amount, $Comment, $block, $txhash)\n    }\n}","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"SystemFunctions","Value":"contract SystemFunctions {\n}\n\nfunc DBFind(table string).Columns(columns string).Where(where string, params ...)\n     .WhereId(id int).Order(order string).Limit(limit int).Offset(offset int).Ecosystem(ecosystem int) array {\n    return DBSelect(table, columns, id, order, offset, limit, ecosystem, where, params)\n}\n\nfunc DBString(table, column string, id int) string {\n    var ret array\n    var result string\n    \n    ret = DBFind(table).Columns(column).WhereId(id)\n    if Len(ret) > 0 {\n        var vmap map\n        vmap = ret[0]\n        result = vmap[column]\n    }\n    return result\n}\n\nfunc ConditionById(table string, validate bool) {\n    var cond string\n    cond = DBString(table, `conditions`, $Id)\n    if !cond {\n        error Sprintf(`Item %d has not been found`, $Id)\n    }\n    Eval(cond)\n    if validate {\n        ValidateCondition($Conditions,$ecosystem_id)\n    }\n}\n\n","Conditions":"ContractConditions(`MainCondition`)"},{"Name":"MainCondition","Value":"contract MainCondition {\n  conditions {\n    if(StateVal(\"founder_account\")!=$key_id)\n    {\n      warning \"Sorry, you don`t have access to this action.\"\n    }\n  }\n}","Conditions":"ContractConditions(`MainCondition`)"}],"tables":[{"Name":"blocks","Columns":"[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditBlock\\\")\"},{\"name\":\"value\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditBlock\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditBlock\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewBlock\\\")\",\"update\":\"ContractAccess(\\\"@1EditBlock\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"contracts","Columns":"[{\"name\":\"wallet_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"@1EditContract\\\", \\\"@1ActivateContract\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditContract\\\", \\\"@1ActivateContract\\\")\"},{\"name\":\"value\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditContract\\\", \\\"@1ActivateContract\\\")\"},{\"name\":\"active\",\"type\":\"character\",\"conditions\":\"ContractAccess(\\\"@1EditContract\\\", \\\"@1ActivateContract\\\")\"},{\"name\":\"token_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"@1EditContract\\\", \\\"@1ActivateContract\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewContract\\\")\",\"update\":\"ContractAccess(\\\"@1EditContract\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"history","Columns":"[{\"name\":\"amount\",\"type\":\"money\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"txhash\",\"type\":\"bytea\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"comment\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"block_id\",\"type\":\"integer\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"sender_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"recipient_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\",\"update\":\"false\",\"new_column\":\"false\"}"},{"Name":"keys","Columns":"[{\"name\":\"pub\",\"type\":\"bytea\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"},{\"name\":\"amount\",\"type\":\"money\",\"conditions\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1MoneyTransfer\\\", \\\"@1NewEcosystem\\\")\",\"update\":\"ContractAccess(\\\"@1MoneyTransfer\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"languages","Columns":"[{\"name\":\"res\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditLang\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditLang\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditLang\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewLang\\\")\",\"update\":\"ContractAccess(\\\"@1EditLang\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"menu","Columns":"[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditMenu\\\")\"},{\"name\":\"value\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditMenu\\\",\\\"@1AppendMenu\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditMenu\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewMenu\\\", \\\"@1NewEcosystem\\\")\",\"update\":\"ContractAccess(\\\"@1EditMenu\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"pages","Columns":"[{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditPage\\\")\"},{\"name\":\"menu\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditPage\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditPage\\\")\"},{\"name\":\"value\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditPage\\\",\\\"@1AppendPage\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewPage\\\", \\\"@1NewEcosystem\\\")\",\"update\":\"ContractAccess(\\\"@1EditPage\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"signatures","Columns":"[{\"name\":\"value\",\"type\":\"jsonb\",\"conditions\":\"ContractAccess(\\\"@1EditSign\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"@1EditSign\\\")\"},{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"@1EditSign\\\")\"}]","Permissions":"{\"insert\":\"ContractAccess(\\\"@1NewSign\\\")\",\"update\":\"ContractAccess(\\\"@1EditSign\\\")\",\"new_column\":\"ContractAccess(\\\"@1NewColumn\\\")\"}"},{"Name":"tests","Columns":"[{\"name\":\"testname\",\"type\":\"text\",\"conditions\":\"true\"}]","Permissions":"{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"}],"data":[]}